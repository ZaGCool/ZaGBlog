<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试页面</title>
      <link href="/blog/done/"/>
      <url>/blog/done/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>如果你看到此页面，说明你已成功运行并部署此网站。</p><p>如图<br><img src="./1.jpg" alt=""></p><p>你可以查看，以下文档进行自定义设置。</p><blockquote><p>网站修改配置文档：</p></blockquote><a class="btn-beautify button--animated " href="https://guguge.gitee.io/blog/butterfly"   title="链接1"><i class="fas fa-download"></i><span>链接1</span></a><a class="btn-beautify button--animated " href="https://guguge.top/blog/butterfly"   title="链接2"><i class="fas fa-download"></i><span>链接2</span></a><hr><blockquote><p>文章书写格式参考文档：</p></blockquote><a class="btn-beautify button--animated " href="https://guguge.gitee.io/blog/markdown"   title="链接1"><i class="fas fa-download"></i><span>链接1</span></a><a class="btn-beautify button--animated " href="https://guguge.top/blog/markdown"   title="链接2"><i class="fas fa-download"></i><span>链接2</span></a>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6+ 笔记</title>
      <link href="/blog/%E5%89%8D%E7%AB%AF/ES6+%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/%E5%89%8D%E7%AB%AF/ES6+%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6+"></a>ES6+</h2><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ol><li>ECMAScript 和 JavaScript (ECMA dom bom)</li></ol><blockquote><p> ECMAScript 是一种由 Ecma 国际（前身为欧洲计算机制造商协会）在标准 ECMA-262 中定义的脚本语言规范 jscript action script</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ECMA是标准，JS是实现</span><br><span class="line">- 类似于HTML5是标准，IE10、Chrome、FF都是实现</span><br><span class="line">- 换句话说，将来也能有其他XXXScript来实现ECMA</span><br></pre></td></tr></table></figure><p><strong>ECMAScript 简称 ECMA 或者 ES</strong></p><blockquote><p>目前最新版本是 ES6+(ES6/7/8/9/10)</p></blockquote><ul><li>低级浏览器主要支持 ES 3.1</li><li>高级浏览器正在从 ES 5 过渡到 ES6</li></ul><ol><li>历史版本</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">时间 ECMA JS 解释  </span><br><span class="line"><span class="number">1996.11</span> ES <span class="number">1.0</span> JS 稳定 Netscape 将 JS 提交给 ECMA 组织，ES 正式出现  </span><br><span class="line"><span class="number">1998.06</span> ES <span class="number">2.0</span> ES2 正式发布  </span><br><span class="line"><span class="number">1999.12</span> ES <span class="number">3.0</span> ES3 被广泛支持  </span><br><span class="line"><span class="number">2007.10</span> ES <span class="number">4.0</span> ES4 过于激进，被废了  </span><br><span class="line"><span class="number">2008.07</span> ES <span class="number">3.1</span> <span class="number">4.0</span> 退化为严重缩水版的 <span class="number">3.1</span> 因为吵得太厉害，所以 ES <span class="number">3.1</span> 代号为 Harmony(和 谐)</span><br><span class="line"><span class="number">2009.12</span> ES <span class="number">5.0</span> ES <span class="number">5.0</span> 正式发布 同时公布了 JavaScript.next 也就是后来的 ES <span class="number">6.0</span></span><br><span class="line"><span class="number">2011.06</span> ES <span class="number">5.1</span> ES <span class="number">5.1</span> 成为了 ISO 国际标准  </span><br><span class="line"><span class="number">2013.03</span> ES <span class="number">6.0</span> ES <span class="number">6.0</span> 草案定稿  </span><br><span class="line"><span class="number">2013.12</span> ES <span class="number">6.0</span> ES <span class="number">6.0</span> 草案发布  </span><br><span class="line"><span class="number">2015.06</span> ES <span class="number">6.0</span> ES <span class="number">6.0</span> 预计发布正式版 JavaScript.next 开始指向 ES <span class="number">7.0</span></span><br><span class="line"></span><br><span class="line">ES6(ES2015)——IE10+、Chrome、FireFox、移动端、NodeJS （支持程度不一）</span><br></pre></td></tr></table></figure><p><strong>扩展： 对于高级语法可以使用 babel 进行预转换 （后续在 webpack 中会讲)</strong></p><p>扩展</p><pre><code>TC39推动JavaScript发展的委员会每一项新特性最终要进入到ECMAScript规范里，需要经历5个阶段Stage 0: 任何成员或者贡献者 都可以提交的想法Stage 1: 作为一个正式的提案Stage 2：规范化的第一个版本 以后大概率会成为标准Stage 3: 进一步完善提案细节Stage 4：正式的标准 finish</code></pre><hr><h3 id="ES6-语法"><a href="#ES6-语法" class="headerlink" title="ES6 语法"></a>ES6 语法</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line"><span class="number">1</span> 可以重复声明</span><br><span class="line"><span class="number">2</span> 无法限制修改</span><br><span class="line"><span class="number">3</span> 没有块级作用域</span><br><span class="line"><span class="number">4</span> 变量提升</span><br><span class="line"><span class="number">5</span> 支持全局挂载</span><br><span class="line"><span class="number">6</span> 只声明不赋值</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 不能重复声明变量  可以重新赋值  有块级作用域  没有变量提升 不支持全局挂载 可以只声明不初始化</span><br><span class="line"><span class="keyword">const</span> 不能重复声明变量  不可以重新赋值  有块级作用域  没有变量提升 不支持全局挂载 不能只声明不初始化</span><br></pre></td></tr></table></figure><blockquote><p>块级作用域解决索引的问题</p></blockquote><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><blockquote><p> 并且没有自己的 this，arguments，super</p></blockquote><pre><code>函数--箭头函数function 名字()&#123;&#125;()=&gt;&#123;&#125;1.如果只有一个参数，()可以省2.如果只有一个return，&#123;&#125;可以省// 1 简化 window.onload// 2 普通函数的简化// 3 sort排序方法的简化</code></pre><h4 id="Rest-Parameter"><a href="#Rest-Parameter" class="headerlink" title="Rest Parameter"></a>Rest Parameter</h4><pre><code>扩展运算符：作用：参数扩展/数组展开  收集参数  展开参数// 1 函数参数的扩展 收集剩余参数 ...args// 2 函数传参的展开 实际参数的传入 ...arr// 3  利用rest参数 多个数组的合并// 4 注意事项 let a = ...arr;// 5 函数嵌套调用</code></pre><h4 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h4><pre><code>function func (data) &#123;    var data = data || &#39;&#39;&#125;func(0)func(false)// ===== 改进</code></pre><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><blockquote><p>解构赋值： 1.左右两边结构必须一样 2.声明和赋值不能分开(必须在一句话里完成)</p></blockquote><pre><code>// 1 数组的解构赋值// 2 对象解构赋值// 3 复杂数据解构  解构粒度// 4 注意事项说明</code></pre><h4 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h4><blockquote><p>传统字符串拼接的时候 要注意 + 号以及 引号的位置 ， 换行问题</p><p>模版字符串``, ${变量名}</p></blockquote><pre><code>const name = &#39;尼古拉斯赵四&#39;const age = 24const info = `My name is $&#123;name&#125;,I am $&#123;age&#125;`</code></pre><h4 id="数组的新增的迭代方法"><a href="#数组的新增的迭代方法" class="headerlink" title="数组的新增的迭代方法"></a>数组的新增的迭代方法</h4><blockquote><p>迭代： 通俗叫法 遍历 循环 （内部对可迭代对象进行迭代 迭代器（生成器） next “hello” [“1”,’3’,’5’] next() 对象 for in for of）</p></blockquote><pre><code>map 映射// map 数组每个元素乘2// map 数组分数映射是否及格filter  过滤// filter 过滤3的倍数forEach 迭代遍历// 过滤信息的价格大于10000reduce  汇总// 汇总求和// forEach的循环find  查找  返回查找的第一个匹配项findIndex 查找到第一个匹配项的索引some()  只要有一个为真 则结果为真every() 所有结果都为真 则结果为真Array.from:转换具有Iterator接口的数据结构为真正数组，返回新数组// Array.from(&#39;foo&#39;) // [&quot;f&quot;,&quot;o&quot;, &quot;o&quot;]// Array.from([1,2,3], x=&gt;x*2) // [2,4,6]Array.of()转换一组值为真正数组，返回新数组// Array.of(7)       // [7]// Array.of(1, 2, 3) // [1, 2, 3]Array.prototype.keys()：返回以索引值为遍历器的对象// arr1 = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]Array.prototype.values()：返回以属性值为遍历器的对象Array.prototype.entries()：返回以索引值和属性值为遍历器的对象// const array1 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]// const iterator = array1.entries()</code></pre><h4 id="字符串新增的几个方法"><a href="#字符串新增的几个方法" class="headerlink" title="字符串新增的几个方法"></a>字符串新增的几个方法</h4><pre><code>includes(content)  （es7语法）// 用来检测是否包含指定的内容，如果包含，则返回true，否则返回falseconst array1 = [1, 2, 3]const pets = [&#39;cat&#39;, &#39;dog&#39;, &#39;bat&#39;]startsWith(content)// 用来检测是否以指定的内容开头，如果是，返回true，否则返回falseendsWidth(content)// 用来检测是否以指定的内容结束，如果是，返回true，否则返回falserepeat(times);// 将字符串重复指定的次数并返回练习：// 判断图片类型// 判断协议</code></pre><h4 id="幂运算符-es7"><a href="#幂运算符-es7" class="headerlink" title="幂运算符** (es7)"></a>幂运算符** (es7)</h4><blockquote><p>幂运算符**，具有与 Math.pow()一样的功能，代码如下：</p></blockquote><pre><code>console.log(2**10) // 1024console.log(Math.pow(2, 10)) // 1024</code></pre><h4 id="模块化（Module）"><a href="#模块化（Module）" class="headerlink" title="模块化（Module）"></a>模块化（Module）</h4><p><strong>在 ES6 之前，JS 并没有模块化的概念，有的也只是社区定制的类似 CommonJS 和 AMD 之类的规则。例如基于 CommonJS 的 NodeJS ————- (webpack 中进行讲解)</strong></p><h4 id="对象属性方法简写"><a href="#对象属性方法简写" class="headerlink" title="对象属性方法简写"></a>对象属性方法简写</h4><pre><code>var cat = &#39;mimi&#39;var dog = &#39;haha&#39;var sayHi = function()&#123; alert(&quot;wang wang&quot;) &#125;var someObject = &#123;  cat,  dog,  sayHi,  eating()&#123;    alert(&quot;eating...&quot;)  &#125;&#125;</code></pre><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><pre><code>// 传统写法 定义User构造函数  姓名属性 密码属性  显示姓名方法  显示密码方法// 新式写法  class  constructor</code></pre><h4 id="面向对象继承"><a href="#面向对象继承" class="headerlink" title="面向对象继承"></a>面向对象继承</h4><pre><code>// 传统写法 User ===&gt; VipUser(有自己的level,showLevel)    call/apply// 新式写法  extends   super()</code></pre><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><blockquote><p>Promise 是 ES6 提供的一种异步解决方案，比回调函数更加清晰明了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">单词翻译过来是 承诺的意思 这个承诺在未来会有一个确切的答复，并且该承诺有三种状态，分别是：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>等待中（pending）<span class="number">2.</span>完成了 （resolved）<span class="number">3.</span>拒绝了（rejected）</span><br><span class="line"></span><br><span class="line">这个承诺一旦从等待状态变成为其他状态就永远不能更改状态了，也就是说一旦状态变为 resolved 后，就不能再次改变</span><br></pre></td></tr></table></figure><pre><code>new Promise((resolve, reject) =&gt; &#123;  resolve(&#39;success&#39;)  // 无效  reject(&#39;reject&#39;)&#125;)</code></pre><p><strong>当我们调用构造函数 Promise 的时候 构造函数内部代码会立即执行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;new Promise&#x27;</span>)</span><br><span class="line">  resolve(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;finifsh&#x27;</span>)</span><br><span class="line"><span class="comment">// new Promise -&gt; finifsh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 实现了链式调用，也就是说每次调用 then 之后返回的都是一个 Promise，并且是一个全新的 Promise，原因也是因为状态不可变。如果你在 then 中 使用了 return，那么 return 的值会被 Promise.resolve() 包装</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  resolve(<span class="number">1</span>) <span class="comment">//  请求的省</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// =&gt; 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> <span class="comment">// 包装成 Promise.resolve(2) // 市</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// =&gt; 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span>=&gt;</span>res)</span><br><span class="line"></span><br><span class="line">ajax(url, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    ajax(url1, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        ajax(url2, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 经过promise的改写：</span></span><br><span class="line">ajax(url)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">      <span class="keyword">return</span> ajax(url1)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">      <span class="keyword">return</span> ajax(url2)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 图片加载 promise的处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 ajax的promise的处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 简单模拟实现Promise</span></span><br></pre></td></tr></table></figure><hr><h4 id="generator-生成器"><a href="#generator-生成器" class="headerlink" title="generator 生成器"></a>generator 生成器</h4><h4 id="async-await-es8-异步同步化"><a href="#async-await-es8-异步同步化" class="headerlink" title="async/ await (es8) 异步同步化"></a>async/ await (es8) 异步同步化</h4><p>虽然 Promise 可以解决回调地狱的问题，但是链式调用太多，则会变成另一种形式的回调地狱 —— 面条地狱，所以在 ES8 里则出现了 Promise 的语法糖 async/await，专门解决这个问题。</p><pre><code>async ()=&gt;&#123;  let data1 = await ajax(url1);  // data1逻辑处理  let data2 = await ajax(url2);  // data2逻辑处理  let data3 = await ajax(url3);  // data3&#125;</code></pre><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><pre><code>// Object.values()方法返回一个给定对象自身的所有可枚举属性值的数组const object1 = &#123;      a: &#39;somestring&#39;,      b: 42,      c: false&#125;console.log(Object.values(object1)) // [&quot;somestring&quot;, 42, false]// Object.entries()方法返回一个给定对象自身可枚举属性的键值对数组for (let [key, value] of Object.entries(object1)) &#123;      console.log(`$&#123;key&#125;: $&#123;value&#125;`)&#125;// Object.keys() 方法返回一个给定对象的自身可枚举的属性的键名组成的数组</code></pre><h4 id="padStart-amp-amp-padEnd-es8"><a href="#padStart-amp-amp-padEnd-es8" class="headerlink" title="padStart() &amp;&amp; padEnd() es8"></a>padStart() &amp;&amp; padEnd() es8</h4><pre><code>const str1 = &#39;5&#39;console.log(str1.padStart(2, &#39;0&#39;)) // &quot;05&quot;const str1 = &#39;hello&#39;console.log(str1.padEnd(10, &#39;.&#39;)) // &quot;hello.....&quot;const str2 = &#39;200&#39;console.log(str2.padEnd(5)) // &quot;200  &quot;</code></pre><h4 id="对象扩展操作符-es9"><a href="#对象扩展操作符-es9" class="headerlink" title="对象扩展操作符 (es9)"></a>对象扩展操作符 (es9)</h4><pre><code>var obj1 = &#123; foo: &#39;bar&#39;, x: 42 &#125;;var obj2 = &#123; foo: &#39;baz&#39;, y: 13 &#125;;var clonedObj = &#123; ...obj1 &#125;;var mergedObj = &#123; ...obj1, ...obj2 &#125;;</code></pre><h5 id="String-prototype-trimStart-标准方法-trimLeft-trimEnd-标准方法-trimRight"><a href="#String-prototype-trimStart-标准方法-trimLeft-trimEnd-标准方法-trimRight" class="headerlink" title="String.prototype.trimStart() 标准方法/ trimLeft() / trimEnd()标准方法 / trimRight()"></a>String.prototype.trimStart() 标准方法/ trimLeft() / trimEnd()标准方法 / trimRight()</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="try-catch"><a href="#try-catch" class="headerlink" title="try{}catch{}"></a>try{}catch{}</h5><pre><code>try&#123;&#125;catch&#123;&#125;在以往的版本中，try-catch里catch后面必须带异常参数在ES10之后，这个参数却不是必须的，如果用不到，我们可以不用传</code></pre><h5 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h5><pre><code>在全局的this 相当于window</code></pre><hr><p>js 的异步运行机制 微任务/宏任务</p><p>图例演示</p><p><img src="/imgs/js运行机制1.png" alt="JavaScript运行机制" height="450" ><br><img src="/imgs/js运行机制2.png" alt="JavaScript运行机制" height="450" ></p><p>面试练习题</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack 笔记整理</title>
      <link href="/blog/%E5%89%8D%E7%AB%AF/webpack%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/%E5%89%8D%E7%AB%AF/webpack%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="webpack-4-0-简介"><a href="#webpack-4-0-简介" class="headerlink" title="webpack 4.0+简介"></a>webpack 4.0+简介</h2><blockquote><p><a href="https://www.webpackjs.com/">webpack 中文网</a></p><p><a href="https://webpack.js.org/">webpack 官网</a></p><p>webpack 是一个前端自动化打包构建工具</p><p>基于 nodeJs 平台的工具/模块 会遵循 nodeJs 的规范</p><p>nodeJs ===&gt; npm 包管理器</p></blockquote><h4 id="为什么要使用-webpack"><a href="#为什么要使用-webpack" class="headerlink" title="为什么要使用 webpack"></a>为什么要使用 webpack</h4><ul><li>代码开发过程中出现的大量注释空格以及换行导致文件体积过大，webpack 可以通过压缩打包的方式来解决这些问题</li><li>ES6 在开发过程中非常便捷方便我们开发，但是运行在不同的浏览器中，可能会出现兼容性问题，webpack 可以帮助我们在打包的时候，把高版本语法转换为低版本语法，实现兼容</li><li>在组件化开发过程中，资源整合会导致 index.html 入口引入文件过多，不方便管理，webpack 可以帮助通过 nodeJs 或者 es6 的模块化规范来解决资源整合问题，还可以处理 vue 的单文件组件</li><li>webpack 还有其他的诸如启动本地服务，实现模块热加载，区分开发环境和生产环境，对各个类型文件进行预编译… </li></ul><h4 id="webpack-可以使用-nodeJs-的一个规范"><a href="#webpack-可以使用-nodeJs-的一个规范" class="headerlink" title="webpack 可以使用 nodeJs 的一个规范"></a>webpack 可以使用 nodeJs 的一个规范</h4><blockquote><p>commonJS 规范 （主要解决了模块的导入导出方式）</p><p>还支持 es6 的模块化规范</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">四种模块化规范</span><br><span class="line"><span class="number">1</span> AMD模块化规范 具体实现 <span class="built_in">require</span>.js</span><br><span class="line"><span class="number">2</span> CMD模块化规范 具体实现 seajs</span><br><span class="line"><span class="number">3</span> commonJs 规范（ 可以在nodejs中运行） <span class="built_in">require</span>() / <span class="built_in">exports</span> <span class="built_in">module</span>.exports</span><br><span class="line"><span class="number">4</span> es6模块化规范</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">from</span> /</span><br><span class="line"><span class="keyword">export</span></span><br></pre></td></tr></table></figure><h4 id="什么是-webpack"><a href="#什么是-webpack" class="headerlink" title="什么是 webpack"></a>什么是 webpack</h4><blockquote><p>webpack 是一个现代 JavaScript 应用程序的*静态模块打包器</p></blockquote><p><img src="/imgs/webpack01.png" alt="webpack01"></p><p><strong>可以做的事情</strong></p><blockquote><p>代码转换、文件转换、代码分割、模块合并、自动刷新，代码校验，自动发布</p></blockquote><h5 id="需要提前准备的基础"><a href="#需要提前准备的基础" class="headerlink" title="需要提前准备的基础"></a>需要提前准备的基础</h5><ul><li>了解 node 以及 npm 的使用</li><li>掌握 es6 的语法</li></ul><hr><blockquote><p>包管理器 npm install / yarn add</p><p>-g 全局安装 不会在本地项目中生成 会在你的安装的 nodeJs 对应的 node_modules 目录存在</p><p>—save (-S) 把模块安装到项目依赖当中 jquery</p><p>—save-dev (-D) 把模块安装到开发依赖当中 webpack</p><p>你的项目目录中 package.json (当前的你的项目中安装的模块) npm install</p></blockquote><h4 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h4><h5 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y    yarn init -y</span><br></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装本地webpack打包工具   webpack-cli (webpack命令行工具)</span><br><span class="line">yarn add / npm install  webpack webpack-cli  -D</span><br></pre></td></tr></table></figure><h5 id="webpack-最基本的使用-（0-配置）"><a href="#webpack-最基本的使用-（0-配置）" class="headerlink" title="webpack 最基本的使用 （0 配置）"></a>webpack 最基本的使用 （0 配置）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx webpack 进行打包 会生成 dist目录（ index.js === 》main.js）</span><br><span class="line"></span><br><span class="line"><span class="comment">// npx 命令是npx包管理器5.x出来的 这个命令 npx可以在本地项目中进行查找这个模块，如果有这个模块 则直接执行命令 如果没有这个模块 自动下载这个模块到项目 并且完成命令执行</span></span><br></pre></td></tr></table></figure><h5 id="手动配置-webpack"><a href="#手动配置-webpack" class="headerlink" title="手动配置 webpack"></a>手动配置 webpack</h5><blockquote><p>犹如 gulp 中使用 gulpfile.js</p><p>在你的项目根目录下 webpack.config.js （作为 webpack 的配置文件）</p></blockquote><h5 id="webpack-支持-commonJs-规范"><a href="#webpack-支持-commonJs-规范" class="headerlink" title="webpack 支持 commonJs 规范"></a>webpack 支持 commonJs 规范</h5><blockquote><p>解释 打包的 bundle 文件—commonJs 规范 的运行大致原理（加载依赖）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodeJs自身通过commonJs来实现模块化，就是通过一个入口文件(index.js)来进行查找相关require的模块==&gt; 进而找到其他的依赖的模块，最终汇集到一个全局的module对象上，在执行的时候 通过一个入口文件加载并按照顺序进行执行</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.exports 导出</span></span><br><span class="line"><span class="comment">// exports 导出 （本质上exports还是指向 module.exports 是一个快捷方式）</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// 可以导出一个字符串 单个数据</span></span><br><span class="line"><span class="comment">// 也可以导出一个对象 合并多个导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">    <span class="attr">person</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// require() 引入 当前需要加载的模块路径</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">require</span>();</span><br><span class="line">obj.sayHi();</span><br><span class="line"><span class="built_in">console</span>.log(obj.person);</span><br></pre></td></tr></table></figure><h5 id="简单的打包"><a href="#简单的打包" class="headerlink" title="简单的打包"></a>简单的打包</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  打包时 手动指定 webpack配置文件</span></span><br><span class="line">npx webpack--config webpack.config.my.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//  在package.json中 配置scripts脚本命令</span></span><br><span class="line"><span class="attr">scripts</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.config.my.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;aa&quot;</span>: <span class="string">&quot;npm install jquery&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有些特殊的命令 运行时不需要加run</span></span><br><span class="line"><span class="comment">// npm  test  start   stop ..</span></span><br></pre></td></tr></table></figure><h5 id="webpack-config-js-配置文件"><a href="#webpack-config-js-配置文件" class="headerlink" title="webpack.config.js 配置文件"></a>webpack.config.js 配置文件</h5><blockquote><p>webpack 会自动找当前的配置文件进行打包</p></blockquote><h5 id="配置入口和出口"><a href="#配置入口和出口" class="headerlink" title="配置入口和出口"></a>配置入口和出口</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 这是一个nodejs文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 设置入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: path.join(__dirname, <span class="string">&quot;index.js&quot;</span>),</span><br><span class="line">    <span class="comment">// 设置出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 设置输出目录</span></span><br><span class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="comment">// 输出文件</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h5><blockquote><p>webpack 或者 npx webpack</p></blockquote><h5 id="模式的配置"><a href="#模式的配置" class="headerlink" title="模式的配置"></a>模式的配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mode: <span class="string">&quot;production&quot;</span>（</span><br><span class="line">生产环境下代码打包压缩）</span><br><span class="line">    <span class="string">&quot;development&quot;</span></span><br><span class="line">开发环境（ 代码打包不压缩）</span><br></pre></td></tr></table></figure><h5 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步  npm install webpack-dev-server -D</span></span><br><span class="line">webpack - dev - server（ 提供的本地服务器）</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 它会帮你在内存中进行打包 并启动服务器 默认启动在根目录下</span><br><span class="line"><span class="number">2.</span> 在内存中打包效率很高 方便我们开发</span><br><span class="line"><span class="number">3.</span> 自动开启http服务</span><br><span class="line"><span class="number">4.</span> 自动打开浏览器</span><br><span class="line"><span class="number">5.</span> 自动监视文件的变化</span><br><span class="line"><span class="number">6.</span> 引入， 每次修改代码， 都需要重新打包 浏览器会自动刷新</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步 可以在配置文件中进行设置</span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 配置启动目录</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">9999</span>, <span class="comment">// 配置端口</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    <span class="attr">progress</span>: <span class="literal">true</span>, <span class="comment">// 显示打包进度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步 运行的时候 执行</span></span><br><span class="line">npx webpack - dev - server 或者 webpack - dev - server</span><br></pre></td></tr></table></figure><h5 id="热更新的说明"><a href="#热更新的说明" class="headerlink" title="热更新的说明"></a>热更新的说明</h5><ul><li>开启</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hot: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        <span class="attr">template</span>: path.join(__dirname, <span class="string">&quot;src&quot;</span>, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">],</span><br></pre></td></tr></table></figure><ul><li>热更新与 dev-server 模式不会在生产环境下用，生产环境还是需要 <code>npm run build</code> </li></ul><hr><h4 id="webpack-的-loader-以及-plugins"><a href="#webpack-的-loader-以及-plugins" class="headerlink" title="webpack 的 loader 以及 plugins"></a>webpack 的 loader 以及 plugins</h4><blockquote><p>webpack 可以使用 <a href="https://www.webpackjs.com/concepts/loaders">loader</a> 来预处理文件。这允许你打包除 JavaScript 之外的任何静态资源。你可以使用 Node.js 来很简单地编写自己的 loader。</p><p>webpack 有着丰富的插件接口(rich plugin interface)。webpack 自身的多数功能都使用这个插件接口。这个插件接口使 webpack 变得<strong>极其灵活</strong>。</p></blockquote><h5 id="html-插件"><a href="#html-插件" class="headerlink" title="html 插件"></a>html 插件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">html - webpack - plugin 借助这样一个插件 实现 打包一个html模版文件 并实现打包js自动引入</span><br><span class="line"><span class="comment">// 第一步 需要安装这个插件</span></span><br><span class="line">yarn add html - webpack - plugin - D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步 引入这个html插件</span></span><br><span class="line"><span class="keyword">let</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步  在webpack配置文件中进行配置</span></span><br><span class="line"><span class="comment">// 引入 html-webpack-plugin插件 插件需要 plugins: []</span></span><br><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">    <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="attr">removeAttributeQuotes</span>: <span class="literal">true</span>, <span class="comment">// 删除属性的双引号</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> <span class="comment">// 合并空行 进行压缩</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hash</span>: <span class="literal">true</span> <span class="comment">// 把模版文件中引入的打包的js后面加?hash值 避免浏览器缓存</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="打包文件-hash-进行-版本控制"><a href="#打包文件-hash-进行-版本控制" class="headerlink" title="打包文件 hash 进行 版本控制"></a>打包文件 hash 进行 版本控制</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename: <span class="string">&quot;bundle.[hash:8].js&quot;</span>, 可以实现打包js的版本控制;</span><br></pre></td></tr></table></figure><h5 id="css-样式处理"><a href="#css-样式处理" class="headerlink" title="css 样式处理"></a>css 样式处理</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yarn add less less-loader -D</span></span><br><span class="line"><span class="comment">// yarn add style-loader css-loader -D</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [&#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="comment">// singleton: 是否只使用一个style标签,会将多个引入混合为一个style标签插入页面</span></span><br><span class="line">                    <span class="attr">injectType</span>: <span class="string">&quot;singletonStyleTag&quot;</span>,</span><br><span class="line">                    <span class="attr">insert</span>: <span class="function"><span class="keyword">function</span> <span class="title">insertAtTop</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">document</span></span><br><span class="line">                            .querySelector(<span class="string">&quot;head&quot;</span>)</span><br><span class="line">                            .insertBefore(ele, <span class="built_in">document</span>.querySelector(<span class="string">&quot;style&quot;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽离-css-文件以及添加浏览器前缀"><a href="#抽离-css-文件以及添加浏览器前缀" class="headerlink" title="抽离 css 文件以及添加浏览器前缀"></a>抽离 css 文件以及添加浏览器前缀</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yarn add mini - css - extract - plugin - D 抽离css</span><br><span class="line">在插件位置 添加如下代码：</span><br><span class="line"><span class="keyword">new</span> mini - css - extract - plugin(&#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.css&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 在style-loader的位置 替换成以下内容</span></span><br><span class="line">miniCssExtractPlugin.loader,</span><br><span class="line"></span><br><span class="line">    css浏览器的前缀</span><br><span class="line">yarn add postcss - loader autoprefixer - D</span><br><span class="line"></span><br><span class="line">在css - loader 之前 添加 postcss - loader</span><br><span class="line">添加 postcss.config.js 配置文件 需要设置一些 使用插件</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)(&#123;</span><br><span class="line">        <span class="attr">overrideBrowserslist</span>: [<span class="string">&#x27;last 100 versions&#x27;</span>] <span class="comment">//必须设置支持的浏览器才会自动添加添加浏览器兼容</span></span><br><span class="line">    &#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="css-压缩以及-js-压缩处理"><a href="#css-压缩以及-js-压缩处理" class="headerlink" title="css 压缩以及 js 压缩处理"></a>css 压缩以及 js 压缩处理</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">如果想实现css的压缩处理 需要引入一个插件</span><br><span class="line">optimize - css - assets - webpack - plugin</span><br><span class="line">需要设置优化项</span><br><span class="line">但设置之后 我们的js 却无法实现压缩于是</span><br><span class="line">我们需要引入另一个插件 那就是js的优化压缩插件(内部使用uglifyjs进行压缩， 支持最新ES6 + )</span><br><span class="line">terser - webpack - plugin</span><br><span class="line"></span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">        <span class="keyword">new</span> TerserJSPlugin(&#123;&#125;),</span><br><span class="line">        <span class="keyword">new</span> OptimizeCSSAssetPlugin(&#123;&#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="file-loader-处理图片文件"><a href="#file-loader-处理图片文件" class="headerlink" title="file-loader 处理图片文件"></a>file-loader 处理图片文件</h4><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 配置图片加载</span></span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>md5 文件名的说明</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5值， 访问文件名重复， 如果是相同的图片， 计算出来的md5码是相同的。</span><br></pre></td></tr></table></figure><h4 id="url-loader-处理图片文件"><a href="#url-loader-处理图片文件" class="headerlink" title="url-loader 处理图片文件"></a>url-loader 处理图片文件</h4><blockquote><p>url-loader 与 file-loader 一样，也可以处理图片，但是 url-loader 可以以 base64 编码的方式处理图片</p></blockquote><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev url-loader</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 配置图片加载</span><br><span class="line">    <span class="built_in">test</span>: /\.(png|jpg|gif)$/,</span><br><span class="line">        use: [</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">&#x27;url-loader&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>base64 的优点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 精灵图的作用： 减小网络请求</span><br><span class="line"><span class="number">2.</span> base64: 减少网络请求 通过京东查看base64编码的图片</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>设置 limit 参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 配置图片加载</span></span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="comment">// 限定文件大小，注意：如果文件超出了大小，会自动调用file-loader，所以安装url-loader通过都要安装file-loader</span></span><br><span class="line">            <span class="attr">limit</span>: <span class="number">8192</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="url-loader-处理字体图标文件"><a href="#url-loader-处理字体图标文件" class="headerlink" title="url-loader 处理字体图标文件"></a>url-loader 处理字体图标文件</h4><blockquote><p>处理字体图标文件与处理图标一模一样</p></blockquote><ul><li>配置</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 配置字体图标加载</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span>: /\.(woff|woff2|eot|ttf|otf|svg)$/,</span><br><span class="line">  <span class="attr">&quot;use&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;loader&quot;</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 限定文件大小</span></span><br><span class="line">        <span class="attr">&quot;limit&quot;</span>: <span class="number">819200</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babel-处理高版本的-ES-语法"><a href="#babel-处理高版本的-ES-语法" class="headerlink" title="babel 处理高版本的 ES 语法"></a>babel 处理高版本的 ES 语法</h4><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Babel 是一个 JavaScript 编译器。</p><p>今天就开始使用下一代 JavaScript 语法吧！</p><p><a href="http://babeljs.io/">官网</a></p><p><a href="https://www.babeljs.cn/">中文网</a></p><p>babel 可以把最新版本的语法编译成浏览器能够兼容的代码（ES5）</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;test&quot;</span>: /\.js$/,</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: /(node_modules)/,</span><br><span class="line">  <span class="attr">&quot;use&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;loader&quot;</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>babel 配置文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在项目根目录创建.babelrc配置文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;env&quot;</span>#</span><br><span class="line">        设置babel处理哪些版本的语法， env包括： ES2015 / ES2016 / ES2017的结合体</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h3><p>在之前的 javascript 中一直是没有模块系统的，前辈们为了解决这些问题，提出了各种规范, 最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。而 ES6 中提供了简单的模块系统，完全可以取代现有的 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><blockquote><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个 变量，就必须使用 export 关键字输出该变量。下面是一个 JS 文件，里面使用 export 命令输出变量。</p></blockquote><p>es6 中新增了两个命令   <code>export</code>   和   <code>import</code>  ,   <code>export</code>   命令用于规定模块的对外接口， <code>import</code>   命令用于输入其他模块提供的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;hucc&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> desc = <span class="string">&quot;很帅&quot;</span>;</span><br></pre></td></tr></table></figure><p>使用 export 命令定义了模块的对外接口以后，其他 JS 文件就可以通过 import 命令加载这个模块（文件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    desc</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./a.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;从模块内部导出的内容:&quot;</span>, name, age, desc);</span><br></pre></td></tr></table></figure><h4 id="export-详解"><a href="#export-详解" class="headerlink" title="export 详解"></a>export 详解</h4><p>上面介绍了模块化最基础的用法，export 不止可以导出函数，还可以导出对象，数组，字符串等等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;hucc&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>export 的写法，除了像上面这样，还有另外一种。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;hucc&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优点：上面代码在export命令后面，使用大括号指定所要输出的一组变量。它与前一种写法是等价的，但是应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    arr,</span><br><span class="line">    obj</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过 as 改变输出名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;hucc&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//通过as把obj的名字改成了user，导入时只能写 as 后的命名</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    arr,</span><br><span class="line">    obj <span class="keyword">as</span> user</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    arr,</span><br><span class="line">    user</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./a.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;读取的值：&quot;</span>, name, arr, user);</span><br></pre></td></tr></table></figure><p>上面的写法中， <code>import</code>   中需要指定加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p><p><code>export default</code>   指定默认输出, import 无需知道变量名就可以直接使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;哈哈&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//在导入时，可以随意的使用变量名来接收</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&quot;./a&quot;</span>;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p><strong>注意：export default 是非常用的语法，用的很多, 以一些常用的模块为例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&quot;jQuery&quot;</span>; <span class="comment">// 加载jQuery 库</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>; <span class="comment">// 加载 lodash</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>; <span class="comment">// 加载 moment</span></span><br></pre></td></tr></table></figure><h4 id="import-详解"><a href="#import-详解" class="headerlink" title="import 详解"></a>import 详解</h4><p><code>import</code>   为加载模块的命令，基础使用方式和之前一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    arr,</span><br><span class="line">    user</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是export default导出的内容</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&quot;./a&quot;</span>;</span><br></pre></td></tr></table></figure><p>通过 as 命令修改导入的变量名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    name <span class="keyword">as</span> n,</span><br><span class="line">    arr,</span><br><span class="line">    user</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./a&quot;</span>;</span><br></pre></td></tr></table></figure><p>加载模块的全部内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;hucc&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    arr,</span><br><span class="line">    obj <span class="keyword">as</span> user</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//math.js</span></span><br><span class="line"><span class="comment">//除了指定输出变量名或者 export.default 定义的导入， 还可以通过 * 号加载模块的全部.</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> all <span class="keyword">from</span> <span class="string">&quot;./a&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(all.name);</span><br><span class="line"><span class="built_in">console</span>.log(all.arr);</span><br><span class="line"><span class="built_in">console</span>.log(all.user);</span><br></pre></td></tr></table></figure><h4 id="兼容性说明"><a href="#兼容性说明" class="headerlink" title="兼容性说明"></a>兼容性说明</h4><p>上面介绍了，es6 中模块的使用方式，但是现在 es6 的模块化，无论在浏览器端还是 node.js 上都没有得到很好的支持，所以需要，一些转码的工具（babel）。使我们可以用 es6 的方式来编码，最后输出 es5 的代码。</p><hr><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>文件扩展名为   <code>.vue</code>   的  <strong>single-file components(单文件组件)</strong></p></blockquote><p><a href="https://cn.vuejs.org/v2/guide/single-file-components.html">单文件组件</a></p><p>优势：</p><ul><li><a href="https://github.com/vuejs/awesome-vue#source-code-editing">完整语法高亮</a></li><li><a href="https://webpack.js.org/concepts/modules/#what-is-a-webpack-module">CommonJS 模块</a></li><li><a href="https://vue-loader.vuejs.org/zh-cn/features/scoped-css.html">组件作用域的 CSS</a></li></ul><h4 id="vscode-插件的安装"><a href="#vscode-插件的安装" class="headerlink" title="vscode 插件的安装"></a>vscode 插件的安装</h4><ul><li><code>vutur</code> : 默认单文件组件是没有高亮的，需要安装此插件</li><li><code>vue 2 snippets</code> :vue 的智能提示，提供了很多 vue 的快捷键</li></ul><h4 id="单文件组件的格式介绍"><a href="#单文件组件的格式介绍" class="headerlink" title="单文件组件的格式介绍"></a>单文件组件的格式介绍</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组件的模板 --&gt;</span><br><span class="line">&lt;template&gt; &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件对象 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;&#125;,</span><br><span class="line">  created() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件的样式,可以使用其他预编译语言来编写 --&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="vue-loader-处理单文件组件"><a href="#vue-loader-处理单文件组件" class="headerlink" title="vue-loader 处理单文件组件"></a>vue-loader 处理单文件组件</h4><ul><li>新建单文件组件 <code>App.vue</code> </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;hello Vue!!!&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>安装 vue</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue</span><br></pre></td></tr></table></figure><ul><li>准备 app.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack的入口文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入根组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入vue</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;&lt;Vue/&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        App</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>打包，会报错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span> . / src / App.vue <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">Module parse failed: Unexpected token(<span class="number">1</span>: <span class="number">0</span>)</span><br><span class="line">You may need an appropriate loader to handle <span class="built_in">this</span> file type.</span><br></pre></td></tr></table></figure><ul><li>需要 vue-loader</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue - loader--save - dev</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&quot;vue-loader/lib/plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// ... 其它规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader: <span class="string">&quot;vue-loader&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 请确保引入这个插件！</span></span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>打包报错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[vue - loader] vue - template - compiler must be installed <span class="keyword">as</span> a peer dependency, or a compatible compiler implementation must be passed via options.</span><br></pre></td></tr></table></figure><ul><li>安装依赖项</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-template-compiler --save-dev</span><br></pre></td></tr></table></figure><ul><li>报错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue.runtime.esm.js: <span class="number">588</span>[Vue warn]: You are using the runtime - only build <span class="keyword">of</span> Vue where the template compiler is not available.Either pre - compile the templates into render functions, or use the compiler - included build.</span><br><span class="line"></span><br><span class="line">(found <span class="keyword">in</span> &lt; Root &gt; )</span><br></pre></td></tr></table></figure><h4 id="vue-的构建版本介绍"><a href="#vue-的构建版本介绍" class="headerlink" title="vue 的构建版本介绍"></a>vue 的构建版本介绍</h4><ul><li>重新导入 vue</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue/dist/vue.esm&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>重新编译，发现就可以了</p></li><li><p>对比引入 <code>vue.esm</code> 与 <code>vue</code> 的区别</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template方法 与 render方法</span><br></pre></td></tr></table></figure><h3 id="webpack-配置-vue-router"><a href="#webpack-配置-vue-router" class="headerlink" title="webpack-配置 vue-router"></a>webpack-配置 vue-router</h3><ul><li>安装 vue-router</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue - router</span><br></pre></td></tr></table></figure><ul><li>使用 vue-router</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import Vue from &quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue/dist/vue.esm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入vue-router</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用路由</span></span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure><ul><li>配置路由</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&quot;/home&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: Home</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/list&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: List</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用路由</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;&lt;App&gt;&lt;/App&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        App</span><br><span class="line">    &#125;,</span><br><span class="line">    router</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由功能模块化提取"><a href="#路由功能模块化提取" class="headerlink" title="路由功能模块化提取"></a>路由功能模块化提取</h3><p>vue-router 模块功能提取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用路由</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue/dist/vue.esm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;../components/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;../components/List.vue&quot;</span>;</span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&quot;/home&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: Home</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/list&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: List</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h5 id="打包文件分类"><a href="#打包文件分类" class="headerlink" title="打包文件分类"></a>打包文件分类</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 css文件 放在dist目录下的 css文件夹中</span></span><br><span class="line"><span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;css/main.css&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2  img</span></span><br><span class="line"><span class="attr">outputPath</span>: <span class="string">&quot;/img/&quot;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;http://www.zag.com&#x27;</span> <span class="comment">// 添加图片资源的公共路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 js</span></span><br><span class="line"><span class="attr">output</span>: filename: <span class="string">&#x27;js/bundle.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以在output中配置 所有的资源的公共路径</span></span><br><span class="line"><span class="attr">publicPath</span>: <span class="string">&#x27;http://www.zag.com&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="resolve-属性的设置"><a href="#resolve-属性的设置" class="headerlink" title="resolve 属性的设置"></a>resolve 属性的设置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&quot;bootstrap$&quot;</span>: <span class="string">&quot;bootstrap/dist/css/bootstrap.css&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="全局变量引入问题"><a href="#全局变量引入问题" class="headerlink" title="全局变量引入问题"></a>全局变量引入问题</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123; <span class="comment">// 在每个模块中注入$符  直接使用</span></span><br><span class="line">    <span class="attr">$</span>: <span class="string">&quot;jquery&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">如果在文件中引入外部js文件（ 比如jquery的CDN）</span><br><span class="line">为了防止jquery通过模块引入打包文件中 可以设置忽略</span><br><span class="line"><span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;$&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="webpack-中的一些小插件"><a href="#webpack-中的一些小插件" class="headerlink" title="webpack 中的一些小插件"></a>webpack 中的一些小插件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 cleanWebpackPlugin  清空插件 （可以用来清空每次打包的目录 然后再进行新的打包）</span></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin(<span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="comment">// 2 copyWebpackPlugin  拷贝文件的插件</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">        <span class="attr">from</span>: <span class="string">&quot;doc&quot;</span>,</span><br><span class="line">        <span class="attr">to</span>: <span class="string">&quot;./&quot;</span></span><br><span class="line">    &#125;]),</span><br><span class="line">    <span class="comment">// 3 bannerPlugin  webpack内置插件</span></span><br><span class="line">    <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&quot;make 2019 by zag&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="webpack-开发环境下的代理跨域方式"><a href="#webpack-开发环境下的代理跨域方式" class="headerlink" title="webpack 开发环境下的代理跨域方式"></a>webpack 开发环境下的代理跨域方式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在devServer中 设置proxy</span></span><br><span class="line"><span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">        <span class="comment">// secure: false,// 如果是https接口，需要配置这个参数</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="comment">// 通过重写的方式代理到目标服务器</span></span><br><span class="line">            <span class="string">&quot;/api&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">注意： 打包上线之前 需要把 / api请求前缀在文件中全部去掉， 可以借助使用axios工具的 Axios.defaults.baseURL = <span class="string">&#x27;/api&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="Ignore-Plugin"><a href="#Ignore-Plugin" class="headerlink" title="Ignore Plugin"></a>Ignore Plugin</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了防止 在引入第三方模块的时候 内部加载一些不必要的大的文件，</span></span><br><span class="line"><span class="comment">// 比如 moment 日期时间的包 需要引入 它目录下的 ./locale/各种语言包 导致整个文件打包体积变大</span></span><br><span class="line"><span class="comment">// 可以通过webpack内置插件 来实现忽略</span></span><br><span class="line"><span class="keyword">new</span> Webpack.IgnorePlugin(<span class="regexp">/\.\/locale/</span>, <span class="regexp">/moment/</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当然 如果需要引入其中的中文支持 则可以单独引入</span></span><br><span class="line">    <span class="keyword">import</span> <span class="string">&quot;moment/locale/zh-cn&quot;</span>;</span><br><span class="line">即可， 这样文件打包体积也不会变的很大</span><br></pre></td></tr></table></figure><h5 id="treeShaking"><a href="#treeShaking" class="headerlink" title="treeShaking"></a>treeShaking</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 语法 在生产环境下 会自动去除掉没用的代码</span><br><span class="line"><span class="comment">// tree-shaking 把没用的代码 自动删除掉</span></span><br></pre></td></tr></table></figure><h5 id="实时打包文件"><a href="#实时打包文件" class="headerlink" title="实时打包文件"></a>实时打包文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch: <span class="literal">true</span> <span class="comment">// 实时监控 变化 从而进行打包</span></span><br><span class="line"><span class="attr">watchOptions</span>: &#123;</span><br><span class="line">    <span class="attr">poll</span>: <span class="number">1000</span>, <span class="comment">// 每秒 监控 1000次</span></span><br><span class="line">    <span class="attr">aggregateTimeout</span>: <span class="number">500</span>, <span class="comment">// 防抖 我一直输入代码</span></span><br><span class="line">    <span class="attr">ignored</span>: <span class="regexp">/node_modules/</span> <span class="comment">// 不需要进行监控哪个文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devtool: 源码映射 会单独生成一个 sourcemap文件 出错了， 会标示 当前报错的列和行 大而全</span><br><span class="line"><span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span> <span class="comment">// 增加映射文件 帮我们调试代码</span></span><br><span class="line"><span class="attr">devtool</span>: <span class="string">&#x27;eval-source-map&#x27;</span>; <span class="comment">// 不会产生单独文件 但是可以显示行和列</span></span><br></pre></td></tr></table></figure><h5 id="打包多页应用"><a href="#打包多页应用" class="headerlink" title="打包多页应用"></a>打包多页应用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 在webpack配置文件中</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">home</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">other</span>: <span class="string">&quot;./src/other.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// name: 代表 home/other</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[name].[hash:8].js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// html-webpack-plugin html模版生成插件</span></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="comment">// 将两个文件分别引入不同的模版文件中 chunks 代码块</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&quot;./index.html&quot;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;home.html&quot;</span>,</span><br><span class="line">        <span class="attr">chunks</span>: [<span class="string">&quot;home&quot;</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&quot;./index.html&quot;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;other.html&quot;</span>,</span><br><span class="line">        <span class="attr">chunks</span>: [<span class="string">&quot;home&quot;</span>, <span class="string">&quot;other&quot;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="vue-cli-的使用"><a href="#vue-cli-的使用" class="headerlink" title="vue-cli 的使用"></a>vue-cli 的使用</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-工作过程中， vue开发都是需要基于webpack来开发的。</span><br><span class="line">    -</span><br><span class="line">    但是webpack实际上很难使用和掌握， 因为配置项太多了， 导致很多vue初学者因为不会使用webpack而放弃了vue， 这是vue作者不想看到的 -</span><br><span class="line">    因此vue作者提供了vue - cli, vue脚手架工具， 通过这个工具只要执行一条命令就可以生成给一个项目结构， 这个项目结构中， 所有的webpack全都配置好了</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/vuejs/vue-cli/tree/v2#vue-cli--">github 地址</a></li><li></li></ul><p><img src="/imgs/图1.png" alt="webpack01"></p><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli -g</span><br></pre></td></tr></table></figure><ul><li>初始化项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vue-project</span><br></pre></td></tr></table></figure><ul><li>如果下载失败</li></ul><p><a href="https://blog.csdn.net/qq_15243963/article/details/78779111">解决 vue-cli 不能初始化 webpack 模板的问题</a></p><ul><li>使用命令</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vue - project--offline</span><br></pre></td></tr></table></figure><ul><li>启动项目</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> + Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础语法04</title>
      <link href="/blog/%E5%89%8D%E7%AB%AF/vue%E5%9F%BA%E7%A1%8004/"/>
      <url>/blog/%E5%89%8D%E7%AB%AF/vue%E5%9F%BA%E7%A1%8004/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h1><h2 id="props是只读的"><a href="#props是只读的" class="headerlink" title="props是只读的"></a>props是只读的</h2><p>props属性是只读的，子组件中不允许修改父组件中的数据</p><h2 id="父组件到子组件"><a href="#父组件到子组件" class="headerlink" title="父组件到子组件"></a>父组件到子组件</h2><ul><li>方式：通过<code>props</code>属性来传递数据</li><li>注意：属性的值必须在组件中通过<code>props</code>属性显示指定，否则，不会生效</li><li>说明：传递过来的<code>props</code>属性的用法与<code>data</code>属性的用法相同</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello</span> <span class="attr">msg</span>=<span class="string">&quot;120&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hello</span> <span class="attr">my-msg</span>=<span class="string">&quot;&#x27;abc&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  components: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    hello: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      // 显式创建props及其传递过来的属性</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      props: [&#x27;msg&#x27;, &#x27;myMsg&#x27;],</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      template: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 hello 组件，这是消息：</span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="xml"> --- </span><span class="template-variable">&#123;&#123;<span class="name">myMsg</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="子组件到父组件"><a href="#子组件到父组件" class="headerlink" title="子组件到父组件"></a>子组件到父组件</h2><ul><li>方式：父组件给子组件传递一个函数，由子组件调用这个函数</li><li>说明：借助vue中的自定义事件（v-on:cunstomFn=”fn”）</li><li><code>$emit()</code>：触发事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello</span> @<span class="attr">pfn</span>=<span class="string">&quot;parentFn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 父组件：提供方法</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">parentFn</span>(<span class="params">data</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;父组件：&#x27;</span>, data)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;hello&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;fn&quot;&gt;按钮&lt;/button&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 子组件：通过$emit调用</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">fn</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;pfn&#x27;</span>, <span class="string">&#x27;这是子组件传递给父组件的数据&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="非父子组件通讯"><a href="#非父子组件通讯" class="headerlink" title="非父子组件通讯"></a>非父子组件通讯</h2><blockquote><p>在简单的场景下，可以使用一个空的 Vue 实例作为事件总线</p></blockquote><ul><li><code>$on()</code>：绑定事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发组件 A 中的事件</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;id-selected&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件 B 创建的钩子中监听事件</span></span><br><span class="line">bus.$on(<span class="string">&#x27;id-selected&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>示例：组件A —-&gt; 组件B</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件A： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">com-a</span>&gt;</span><span class="tag">&lt;/<span class="name">com-a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件B： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">com-b</span>&gt;</span><span class="tag">&lt;/<span class="name">com-b</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> bus = <span class="keyword">new</span> Vue()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">comB</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;p&gt;组件A告诉我：&#123;&#123;msg&#125;&#125;&lt;/p&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 定义事件：</span></span></span><br><span class="line"><span class="javascript">          bus.$on(<span class="string">&#x27;tellComB&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.msg = msg</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="attr">comA</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;emitFn&quot;&gt;告诉B&lt;/button&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">emitFn</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 调用组件B中定义的事件：</span></span></span><br><span class="line"><span class="javascript">            bus.$emit(<span class="string">&#x27;tellComB&#x27;</span>, <span class="string">&#x27;土豆土豆我是南瓜&#x27;</span>)</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取组件（或元素）-refs"><a href="#获取组件（或元素）-refs" class="headerlink" title="获取组件（或元素） - refs"></a>获取组件（或元素） - refs</h2><ul><li>说明：<code>vm.$refs</code> 一个对象，持有已注册过 ref 的所有子组件（或HTML元素）</li><li>使用：在 HTML元素 中，添加<code>ref</code>属性，然后在JS中通过<code>vm.$refs.属性</code>来获取</li><li>注意：如果获取的是一个子组件，那么通过ref就能获取到子组件中的data和methods</li><li><code>$refs允许父组件直接快速的获取子组件的数据，使用场景并不多</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;dv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  vm.$refs.dv</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过ref属性可以获取到子组件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">son</span> <span class="attr">ref</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.son)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取子组件的数据和方法</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.son.msg)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件-slot插槽"><a href="#组件-slot插槽" class="headerlink" title="组件-slot插槽"></a>组件-slot插槽</h2><h2 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h2><blockquote><p>当组件中某一项需要单独定义，那么就应该使用solt </p></blockquote><h3 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h3><blockquote><p>除非子组件模板包含至少一个 <code>&lt;slot&gt;</code> 插口，否则父组件的内容将会被丢弃 ,当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。 </p></blockquote><p>在组件的模版中定义<code>slot</code>插槽</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;modal&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;modal&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;温馨提示&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;button&gt;关闭&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>父组件传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;modal&gt;你确定要退出系统吗？&lt;/modal&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">modal</span>&gt;</span>你确定要删除这个内容吗？<span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><blockquote><p>如果一个组件中想使用多个slot那么此时就应该使用具名slot。 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;modal&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;modal&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;content&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>温馨提示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span>你要删除内容吗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span>你要删除这条记录吗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>开启<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态组件-component"><a href="#动态组件-component" class="headerlink" title="动态组件 - component"></a>动态组件 - component</h2><ul><li>作用：渲染一个“元组件”为动态组件。依 <code>is</code> 的值，来决定哪个组件被渲染。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态组件由 vm 实例的属性值 `componentId` 控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 两个组件：</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">&#x27;home&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;这是 Home 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">&#x27;login&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;这是 Login 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">componentId</span>: <span class="string">&#x27;home&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue重点知识回顾"><a href="#vue重点知识回顾" class="headerlink" title="vue重点知识回顾"></a>vue重点知识回顾</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 组件定义方式</span><br><span class="line"><span class="number">2.</span> 组件通讯</span><br><span class="line">父-》子</span><br><span class="line">子-》父</span><br><span class="line">非父子 （bus）</span><br></pre></td></tr></table></figure><h1 id="单页应用程序与路由"><a href="#单页应用程序与路由" class="headerlink" title="单页应用程序与路由"></a>单页应用程序与路由</h1><h2 id="SPA-单页应用程序"><a href="#SPA-单页应用程序" class="headerlink" title="SPA -单页应用程序"></a>SPA -单页应用程序</h2><ul><li>SPA： <code>Single Page Application</code></li></ul><p><a href="https://baike.baidu.com/item/SPA/17536313?fr=aladdin">SPA </a></p><p><a href="https://music.163.com/">网易云音乐</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单页Web应用（single page application，SPA），就是只有一个Web页面的应用，</span><br><span class="line">是加载单个HTML页面，并在用户与应用程序交互时动态更新该页面的Web应用程序。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于传统的多页面应用程序来说, 每次请求服务器返回的都是一个完整的页面, 需要加载很多资源文件，css js 图片</span><br><span class="line"></span><br><span class="line">对于单页应用程序来说, 只有第一次会加载页面, 以后的每次请求, 仅仅是获取必要的数据.</span><br><span class="line">  然后, 由页面中js解析获取的数据, 展示在页面中</span><br></pre></td></tr></table></figure><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>1 减少了请求体积，加快页面响应速度，降低了对服务器的压力</li><li>2 更好的用户体验，让用户在web app感受native app的流畅</li></ul><h3 id="主要技术点"><a href="#主要技术点" class="headerlink" title="主要技术点"></a>主要技术点</h3><ul><li>1 ajax / axios</li><li>2 哈希值（锚点）的使用（window.location.hash #）</li><li>3 hashchange 事件</li></ul><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>监听锚点值变化的事件，根据不同的锚点值，请求相应的数据</li><li>1 锚点（#）原本用作页面内部进行跳转，定位并展示相应的内容</li><li>2 SPA中，锚点被用作请求不同资源的标识，请求数据并展示内容</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>路由即：浏览器URL中的哈希值（# hash）与展示视图内容（template）之间的对应规则</li><li>vue中的路由是：hash 和 component的对应关系，一个哈希值对应一个组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 Web app 中，通过一个页面来展示和管理整个应用的功能。</span><br><span class="line">SPA往往是功能复杂的应用，为了有效管理所有视图内容，前端路由 应运而生！</span><br><span class="line">简单来说，路由就是一套映射规则（一对一的对应规则），由开发人员制定规则。</span><br><span class="line">当URL中的哈希值（# hash）发生改变后，路由会根据制定好的规则，展示对应的视图内容</span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>安装：<code>npm i -S vue-router</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 5 路由入口：链接导航 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 6 路由出口：用来展示匹配路由视图内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1 导入 vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 导入 路由文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 3 创建两个组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Home = Vue.component(<span class="string">&#x27;home&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;这是 Home 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Login = Vue.component(<span class="string">&#x27;login&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;这是 Login 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 4 创建路由对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: Home &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: Login &#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 不要忘记，将路由与vue实例关联到一起！</span></span></span><br><span class="line"><span class="javascript">    router</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ul><li>解释：将 <code>/</code> 重定向到 <code>/home</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="路由导航高亮"><a href="#路由导航高亮" class="headerlink" title="路由导航高亮"></a>路由导航高亮</h3><ul><li>说明：当前匹配的导航链接，会自动添加<code>router-link-exact-active router-link-active</code>类</li><li>通过配置项 <code>linkActiveClass: &#39;now&#39;</code> 来修改默认的高亮类名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改默认高亮的a标签的类名</span></span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&#x27;now&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h3><ul><li>说明：我们经常需要把某种模式匹配到的所有路由，全都映射到同一个组件，此时，可以通过路由参数来处理</li><li>语法：<code>/user/:id</code></li><li>使用：当匹配到一个路由时，参数值会被设置到 this.$route.params</li><li>其他：可以通过 <code>$route.query</code> 获取到 URL 中的查询字符串（queryString） 等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链接：</span></span><br><span class="line">&lt;router-link to=<span class="string">&quot;/user/1001&quot;</span>&gt;用户 Jack&lt;/router-link&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1002&quot;</span>&gt;</span>用户 Rose<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由：</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: User &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User组件：</span></span><br><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vue过渡动画"><a href="#vue过渡动画" class="headerlink" title="vue过渡动画"></a>vue过渡动画</h1><blockquote><p>vue适合做增删改查，不适合做特别炫酷的动态效果，但是在网页中常见的显示隐藏动画也是非常普遍的。在vue中支持多种方式进行动画</p></blockquote><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue动画-类名"><a href="#vue动画-类名" class="headerlink" title="vue动画-类名"></a>vue动画-类名</h2><blockquote><p>在进入/离开的过渡中，会有 6 个 class 切换。 </p></blockquote><p><img src="E:/cursor/24-SH23/16-vue%E7%AC%AC%E5%9B%9B%E5%A4%A9/01-%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E7%AC%94%E8%AE%B0/imgs/transition.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.slide-enter</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-enter-to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-enter-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-leave</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-leave-to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue动画-animate-css"><a href="#vue动画-animate-css" class="headerlink" title="vue动画-animate.css"></a>vue动画-animate.css</h2><ul><li>安装</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i animate.css</span><br></pre></td></tr></table></figure><ul><li>引入</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./node_modules/animate<span class="selector-class">.css</span>/animate<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide&quot;</span> <span class="attr">enter-active-class</span>=<span class="string">&quot;animated bounceInLeft&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">leave-active-class</span>=<span class="string">&quot;animated bounceOutRight&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础语法03</title>
      <link href="/blog/%E5%89%8D%E7%AB%AF/vue%E5%9F%BA%E7%A1%8003/"/>
      <url>/blog/%E5%89%8D%E7%AB%AF/vue%E5%9F%BA%E7%A1%8003/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="响应式数据的说明"><a href="#响应式数据的说明" class="headerlink" title="响应式数据的说明"></a>响应式数据的说明</h1><blockquote><p>axios根据id删除数据问题</p><p>动态添加数据不是响应式以及$set的使用 ===》多属性动态添加响应</p><p>异步dom更新以及$nextTick的使用</p></blockquote><h2 id="动态添加的数据是无效的以及-set的使用"><a href="#动态添加的数据是无效的以及-set的使用" class="headerlink" title="动态添加的数据是无效的以及$set的使用"></a>动态添加的数据是无效的以及$set的使用</h2><ul><li>data中的数据一定要先声明，再使用，动态给对象添加的属性不是响应式的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;person.name&#125;&#125;---&#123;&#123;person.age&#125;&#125;---&#123;&#123;person.gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">person</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">age</span>: <span class="number">18</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态给data中添加的数据是无效的</span></span><br><span class="line"><span class="comment">// 在vue实例创建的时候，会把data中的数据绑定到vm上，所以data中的数据是响应的</span></span><br><span class="line"><span class="comment">// 但是动态绑定的数据不是响应是的。</span></span><br><span class="line">vm.person.gender = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>如果想要动态绑定数据，并且是响应式的,需要使用<code>vm.$set方法</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.person, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="异步DOM更新以及-nextTick的说明"><a href="#异步DOM更新以及-nextTick的说明" class="headerlink" title="异步DOM更新以及$nextTick的说明"></a>异步DOM更新以及$nextTick的说明</h2><p>在vue中数据发生了改变，DOM中的数据也会跟着发生改变，但是这个过程是异步的</p><p>vue的数据发生改变之后，DOM不会立即更新，会等到下一次渲染工作执行的时候才会更新DOM</p><p>目的：为了提高渲染的性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">clickFn () &#123;</span><br><span class="line">    <span class="comment">// 数据变化了， view中的内容也要跟着变</span></span><br><span class="line">    <span class="built_in">this</span>.msg = <span class="string">&#x27;你好啊，vue1&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.msg = <span class="string">&#x27;你好啊，vue2&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.msg = <span class="string">&#x27;你好啊，vue3&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.msg = <span class="string">&#x27;你好啊，vue4&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.msg = <span class="string">&#x27;你好啊，vue5&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为什么：DOM操作是非常消耗性能的，简单DOM的操作能够提升我们的性能，如果每次操作数据，都立即更新DOM，无疑性能会非常的低，所以vue中会等待数据都修改完成</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>).innerHTML</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>$nextTick</code>方法会在DOM更新之后执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 在实际开发中，有可能需要在数据改变之后，获取到更新之后的DOM数据</span></span><br><span class="line"><span class="comment">// 这个时候可以使用 $nextTick函数</span></span><br><span class="line"><span class="comment">// 当vue更新完DOM后，会自动调用$nextTick函数，确保在这个函数中可以获取到DOM结构是最新的</span></span><br><span class="line"><span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>).innerHTML</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="watch监视数据的变化"><a href="#watch监视数据的变化" class="headerlink" title="watch监视数据的变化"></a>watch监视数据的变化</h1><blockquote><p>vue实例中提供了一个watch属性，用于监听vue实例中的属性的变化。</p><p>watch对应了一个对象，键是观察的属性，值是对应的回调函数。</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>基本使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数：当前值</span></span><br><span class="line"><span class="comment">//第二个参数：上一次的值</span></span><br><span class="line"><span class="attr">username</span>: <span class="function"><span class="keyword">function</span>(<span class="params">curr, old</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表单校验效果</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watch: 监视数据的变化</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// 监视msg，只要msg属性的值发生改变，function就会执行</span></span><br><span class="line">    <span class="comment">// value: 当前值  oldValue:上一次的值</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value.length &gt;=<span class="number">3</span> &amp;&amp; value.length &lt;= <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.tips = <span class="string">&#x27;正确&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.tips = <span class="string">&#x27;密码格式不正确&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监视对象"><a href="#监视对象" class="headerlink" title="监视对象"></a>监视对象</h2><blockquote><p>监视对象的时候，需要加上<code>deep: true</code></p><p>为了发现对象内部值的变化，可以在选项参数中指定 <code>deep: true</code> </p></blockquote><ul><li>如果是一个对象，无法监听到对象内部值的变化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">user</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">          <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="attr">user</span>: <span class="function"><span class="keyword">function</span>(<span class="params">curr, old</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(curr, old);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;user.name&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;user.age&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>需要加上deep</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">handler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">curr, old</span>) </span>&#123;</span><br><span class="line">           <span class="comment">//注意：如果监听的是对象，新值与旧值都是相同的，因为指向了同一个对象。</span></span><br><span class="line">          <span class="comment">// https://cn.vuejs.org/v2/api/#vm-watch</span></span><br><span class="line">          <span class="built_in">console</span>.log(curr.age, curr.name);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>immediate</strong> 属性,立马进行监听</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">handler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">curr, old</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(curr.age, curr.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><blockquote><p>计算属性：当计算属性依赖的数据发生改变的时候，计算属性会重新计算一次，如果计算属性依赖的属性没有发生改变，那么计算属性就不会重新计算。</p></blockquote><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">n1</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">n2</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//n3依赖与n1和n2的值，当n1 和 n2发生改变的时候，这个函数就会执行。</span></span><br><span class="line">    <span class="comment">//返回值就是n3的值</span></span><br><span class="line">      <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">n3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> +<span class="built_in">this</span>.n1 + +<span class="built_in">this</span>.n2;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>计算属性是基于它们的依赖项进行缓存的</strong> </p><p>如果页面中需要使用多次计算属性的值，只会计算一次，计算属性只有在它的相关依赖发生改变时才会重新求值。 </p><p><strong>计算属性不能与data中的属性同名，因为无论是data中的属性还是计算属性，最终都是挂载到vm上的</strong></p><h2 id="计算属性与watch的区别"><a href="#计算属性与watch的区别" class="headerlink" title="计算属性与watch的区别"></a>计算属性与watch的区别</h2><blockquote><p>通过加法计算器进行比较</p></blockquote><p>计算属性：当依赖的属性发生改变的时候，当前属性就会跟着变化</p><p>监听：当前属性发生改变的时候，监听的函数就会执行</p><p><strong>注意：当你有一些数据需要随着其它数据变动而变动时，不要滥用 <code>watch</code></strong></p><h2 id="使用计算属性实现品牌管理案例"><a href="#使用计算属性实现品牌管理案例" class="headerlink" title="使用计算属性实现品牌管理案例"></a>使用计算属性实现品牌管理案例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">newList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.list.filter( <span class="function"><span class="params">item</span>=&gt;</span>item.name.includes(<span class="built_in">this</span>.key) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>vue除了提供了核心的一些指令，还允许注册自定义指令。 </p><p>有的情况下，你仍然需要对<strong>普通 DOM 元素进行底层操作</strong>，这时候就会用到自定义指令。 </p><ul><li>基本语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册自定义指令</span></span><br><span class="line"><span class="comment">// v-focus  v-text  v-on</span></span><br><span class="line"><span class="comment">// 参数1，指令名称  参数2：配置参数</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 钩子函数比较多，用的比较多的是 bind 和 update</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只会调用一次，当指令绑定到当前元素上时调用</span></span><br><span class="line">    bind (el) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当前元素被插入到父节点的时候调用(渲染时)</span></span><br><span class="line">    inserted (el,binding) &#123;</span><br><span class="line">        el.focus()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当指令对应的数据发生改变的时候</span></span><br><span class="line">    update () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 所有的DOM都更新之后</span></span><br><span class="line">    componentUpdated () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指令与元素解绑的时候</span></span><br><span class="line">    unbind () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>指令的参数</li></ul><p>所有的钩子函数两个参数<code>el</code>和<code>binding</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">el: 当前元素</span><br><span class="line">binding：一个对象，包含以下属性：</span><br><span class="line">    name：指令名，不包括 v- 前缀。</span><br><span class="line">    value：指令的绑定值，例如：v-my-directive=<span class="string">&quot;1 + 1&quot;</span> 中，绑定值为 <span class="number">2</span>。</span><br><span class="line">    oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</span><br><span class="line">    expression：字符串形式的指令表达式。例如 v-my-directive=<span class="string">&quot;1 + 1&quot;</span> 中，表达式为 <span class="string">&quot;1 + 1&quot;</span>。</span><br><span class="line">    arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 <span class="string">&quot;foo&quot;</span>。</span><br><span class="line">    modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 &#123; <span class="attr">foo</span>: <span class="literal">true</span>, <span class="attr">bar</span>: <span class="literal">true</span> &#125;。</span><br></pre></td></tr></table></figure><h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><h2 id="组件的概念"><a href="#组件的概念" class="headerlink" title="组件的概念"></a>组件的概念</h2><blockquote><p>组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。 </p><p>在vue中都是组件化开发的，组件化开发就是把一个完整的页面分割成一个一个的小组件。</p></blockquote><p>组件的优点：</p><ul><li>容易维护</li><li>复用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue组件分为全局组件和局部组件</span><br><span class="line">全局组件：在所有的vue实例中都能使用</span><br><span class="line">局部组件：只有在当前vue实例中能够使用</span><br></pre></td></tr></table></figure><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><ul><li>定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要注册一个全局组件，可以使用 Vue.component(tagName, options)。</span></span><br><span class="line"><span class="comment">//注册一个全局的组件</span></span><br><span class="line"><span class="comment">// Vue.component(tagName, options)</span></span><br><span class="line">Vue.component(<span class="string">&quot;hello&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;我是全局组件！&lt;/h3&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">全局组件可以在所有的实例中使用</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意点：组件的模板有且仅有一个根元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template: &#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是全局组件！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>有两个根元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;;  //错误的用法</span><br><span class="line">template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是全局组件！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>有两个根元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;;</span><br></pre></td></tr></table></figure><ul><li>如果有很多的内容，template可以使用字符串模版</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;my-button&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;我是一个标题&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是一个段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在vue实例的内部，通过components属性来定义局部组件</span></span><br><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&quot;my-button&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;我是一个标题&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是一个段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件是特殊的vue实例"><a href="#组件是特殊的vue实例" class="headerlink" title="组件是特殊的vue实例"></a>组件是特殊的vue实例</h2><blockquote><p>可以将组件看成是一个vue的实例，因此，在vue实例中能配置的属性，在组件中依旧能够配置。</p><p>比如：data,method,watch,computed,钩子函数等</p><p>注意：组件中data属性必须是一个函数，返回值才是data的数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以把组件看成一个vue实例</span></span><br><span class="line">Vue.component(<span class="string">&quot;my-button&quot;</span>, &#123;</span><br><span class="line">   <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h1 @click=&quot;add&quot;&gt;我是一个标题&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="comment">//组件可以通过data属性提供组件自己的数据，注意，组件的data参数必须是一个函数，不能是用一个对象。</span></span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;hello vue&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;哈哈&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>组件是一个独立封闭的个体，组件之间的数据是无法相互使用的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">outer</span>: <span class="string">&#x27;我是实例的数据&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以把组件看成一个vue实例</span></span><br><span class="line">Vue.component(<span class="string">&quot;my-button&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;inner&#125;&#125;&lt;/p&gt;  //正确，组件可以使用自己的数据</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;outer&#125;&#125;&lt;/p&gt;  //报错，组件无法使用其他组件的数据</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">inner</span>: <span class="string">&#x27;我是组件的数据&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="vue-devTool浏览器插件的使用"><a href="#vue-devTool浏览器插件的使用" class="headerlink" title="vue-devTool浏览器插件的使用"></a>vue-devTool浏览器插件的使用</h2><blockquote><p>vue-devtools是一款基于chrome游览器的插件，用于调试vue应用，这可以极大地提高我们的调试效率。</p></blockquote><p><a href="https://segmentfault.com/a/1190000009682735">https://segmentfault.com/a/1190000009682735</a></p><p>默认插件必须在http协议下打开才能看到。</p><p>插件详细信息—-》允许访问文件网址   ，这样file协议打开也能看到效果了</p><h1 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h1><blockquote><p>因为组件是一个独立的个体，组件无法使用到外部的数据</p><p>但是在真实开发中，多个组件之间是需要相互使用彼此的数据的，因此需要使用组件通讯的技术，让组件之间能够相互传值。</p></blockquote><p>组件通讯分为三类</p><ul><li>父组件传递值给子组件</li><li>子组件传递值给父组件</li><li>非父子组件之间的传值</li></ul><h2 id="组件通讯-父传子"><a href="#组件通讯-父传子" class="headerlink" title="组件通讯-父传子"></a>组件通讯-父传子</h2><ul><li>定义两个组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;parent&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;parent&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;这是父组件&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;son&gt;&lt;/son&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">car</span>: <span class="string">&#x27;玛莎拉蒂&#x27;</span>,</span><br><span class="line">            <span class="attr">month</span>: <span class="number">1000000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&quot;son&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;son&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;这是子组件&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>组件的通讯</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 在父组件的模版中，给子组件增加一个自定义的属性。</span><br><span class="line">&lt;son :car=<span class="string">&quot;car&quot;</span>&gt;&lt;/son&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 子组件通过props属性进行接收</span><br><span class="line"><span class="comment">//接收父组件传递过来的值</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;car&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 子组件使用父组件传递过来的值</span><br><span class="line"><span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div class=&quot;son&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是子组件&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是父组件传递过来的值----&#123;&#123;car&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br></pre></td></tr></table></figure><ul><li>思考，怎么获取父组件的money</li></ul><p><strong>注意：props负责获取父组件的传递过来的，props中的值是只读的，不允许修改</strong></p><h2 id="组件通讯-子到父"><a href="#组件通讯-子到父" class="headerlink" title="组件通讯-子到父"></a>组件通讯-子到父</h2><blockquote><p>参考链接：<a href="https://blog.csdn.net/jsxiaoshu/article/details/79058940">https://blog.csdn.net/jsxiaoshu/article/details/79058940</a></p></blockquote><p>整体思路</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 父组件给子组件注册一个自定义事件</span><br><span class="line"><span class="number">2.</span> 子组件触发这个自定义事件，触发事件时把数据传递给父组件</span><br></pre></td></tr></table></figure><ul><li>父组件给子组件注册事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;son @fn=<span class="string">&#x27;getData&#x27;</span>&gt;&lt;/son&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">//1. 父组件中定义了一个方法，用于获取数据</span></span><br><span class="line">    getData () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;父组件中提供的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子组件触发自定义事件，并且把要传递的数据作为参数进行传递</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$emit可以出发当前实例的事件</span></span><br><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;getData&#x27;</span>, <span class="built_in">this</span>.car);</span><br></pre></td></tr></table></figure><ul><li>父组件获取值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">//1. 父组件中定义了一个方法，用于获取数据</span></span><br><span class="line">    getData (skill) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;父组件中提供的方法&quot;</span>, skill);</span><br><span class="line">        <span class="built_in">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例-评论列表"><a href="#案例-评论列表" class="headerlink" title="案例-评论列表"></a>案例-评论列表</h2><ul><li>父到子</li><li>子到父</li><li>es6中属性的简写</li></ul><h2 id="组件通讯-非父子"><a href="#组件通讯-非父子" class="headerlink" title="组件通讯-非父子"></a>组件通讯-非父子</h2><blockquote><p>非父子组件之间通过一个空的Vue实例来传递数据。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> Vue();   <span class="comment">//bus:公交车  事件总线</span></span><br></pre></td></tr></table></figure><ul><li>核心逻辑</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">组件A给组件B传值：</span><br><span class="line"><span class="number">1.</span> 组件A给bus注册一个事件，监听事件的处理程序</span><br><span class="line"><span class="number">2.</span> 组件B触发bus上对应的事件，把 值当成参数来传递</span><br><span class="line"><span class="number">3.</span> 组件A通过事件处理程序获取数据</span><br></pre></td></tr></table></figure><ul><li>组件A给bus注册事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//rose在组件创建的时候，给bus注册了一个事件</span></span><br><span class="line">created () &#123;</span><br><span class="line">    bus.$on(<span class="string">&quot;get&quot;</span>, <span class="function">(<span class="params">msg</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;这是rose注册的事件&quot;</span>, msg);</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组件B触发bus的事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;send&quot;</span>&gt;表白&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">send</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        bus.$emit(<span class="string">&quot;get&quot;</span>, <span class="built_in">this</span>.msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组件A通过事件处理程序可以获取到传递的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bus.$on(<span class="string">&quot;get&quot;</span>, <span class="function">(<span class="params">msg</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;这是rose注册的事件&quot;</span>, msg);</span><br><span class="line">    <span class="built_in">this</span>.msg = msg;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意点：1. 必须是同一辆公交车  2. 注册的事件和触发的事件必须保持一致</strong></p><h2 id="案例：开关灯案例"><a href="#案例：开关灯案例" class="headerlink" title="案例：开关灯案例"></a>案例：开关灯案例</h2><h2 id="bus是一种通用的组件通讯方案"><a href="#bus是一种通用的组件通讯方案" class="headerlink" title="bus是一种通用的组件通讯方案"></a>bus是一种通用的组件通讯方案</h2><p>我们有三种组件通讯的方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 父父子</span><br><span class="line"><span class="number">2.</span> 子传父</span><br><span class="line"><span class="number">3.</span> 非父子（bus）</span><br><span class="line"></span><br><span class="line">其实bus方案也适用于父传子和子传父的方案。</span><br></pre></td></tr></table></figure><h5 id="了解：其他组件通信方式"><a href="#了解：其他组件通信方式" class="headerlink" title="了解：其他组件通信方式"></a>了解：其他组件通信方式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>$refs以及$parent、$children</span><br><span class="line"><span class="number">2.</span>$attrs &amp; $listeners</span><br><span class="line"><span class="number">3.</span>provide &amp; inject</span><br><span class="line"><span class="number">4.</span>vuex</span><br></pre></td></tr></table></figure><h1 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h1><blockquote><p>当组件中某一项需要单独定义，那么就应该使用slot </p></blockquote><h2 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h2><blockquote><p>除非子组件模板包含至少一个 <code>&lt;slot&gt;</code> 插口，否则父组件的内容将会被丢弃 ,当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。 </p></blockquote><p>在组件的模版中定义<code>slot</code>插槽</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;modal&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;modal&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;温馨提示&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;button&gt;关闭&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>父组件传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;modal&gt;你确定要退出系统吗？&lt;/modal&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">modal</span>&gt;</span>你确定要删除这个内容吗？<span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><blockquote><p>如果一个组件中想使用多个slot那么此时就应该使用具名slot。 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;modal&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;modal&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;content&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>温馨提示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span>你要删除内容吗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span>你要删除这条记录吗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>开启<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础语法02</title>
      <link href="/blog/%E5%89%8D%E7%AB%AF/vue%E5%9F%BA%E7%A1%8002/"/>
      <url>/blog/%E5%89%8D%E7%AB%AF/vue%E5%9F%BA%E7%A1%8002/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h1><blockquote><ol><li><p>跑马灯点击加速 2. 品牌管理案例（为空不能添加/清空输入框）</p></li><li><p>关于事件对象的补充说明</p></li><li><p>修饰符的顺序 也可以只加修饰符</p></li></ol><p>5 .passive事件修饰符<strong>不拦截默认事件</strong></p></blockquote><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>在监听键盘事件时，我们经常需要检查常见的键值。Vue 允许为  <code>v-on</code>  在监听键盘事件时添加按键修饰符： </p><ul><li>基本使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>全局按键修饰符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.enter</span><br><span class="line">    .tab</span><br><span class="line">    .delete(捕获“ 删除” 和“ 退格” 键)</span><br><span class="line">    .esc</span><br><span class="line">    .space</span><br><span class="line">    .up</span><br><span class="line">    .down</span><br><span class="line">    .left</span><br><span class="line">    .right</span><br></pre></td></tr></table></figure><ul><li>支持直接写keyCode</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 缺点：不知道对应的键盘码，可阅读不高</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keydown.113</span>=<span class="string">&quot;fn&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>支持自己配置</li></ul><blockquote><p><code>Vue.config.keyCodes</code> </p></blockquote><h2 id="v-if-和-v-show"><a href="#v-if-和-v-show" class="headerlink" title="v-if 和 v-show"></a>v-if 和 v-show</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/conditional.html">条件渲染</a></li><li><code>v-if</code> ：根据表达式的值的真假条件，销毁或重建元素</li><li><code>v-show</code> ：根据表达式之真假值，切换元素的 display CSS 属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>这个元素展示出来了吗？？？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>这个元素，在HTML结构中吗？？？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="样式处理-class和style"><a href="#样式处理-class和style" class="headerlink" title="样式处理-class和style"></a>样式处理-class和style</h2><ul><li>使用方式： <code>v-bind:class=&quot;expression&quot;</code> or <code>:class=&quot;expression&quot;</code> </li><li>表达式的类型：字符串、数组、对象（重点）</li><li>语法：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 重点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: true &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;active&#x27;, &#x27;text-danger&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#123; active: true &#125;, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">--- style ---</span><br><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; color: activeColor, &#x27;font-size&#x27;: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 将多个 样式对象 应用到一个元素上--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- baseStyles 和 overridingStyles 都是对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="提升性能：v-pre"><a href="#提升性能：v-pre" class="headerlink" title="提升性能：v-pre"></a>提升性能：v-pre</h2><ul><li>说明：跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="提升性能：v-once"><a href="#提升性能：v-once" class="headerlink" title="提升性能：v-once"></a>提升性能：v-once</h2><ul><li>说明：只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例：品牌管理"><a href="#案例：品牌管理" class="headerlink" title="案例：品牌管理"></a>案例：品牌管理</h2><h1 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器 filter"></a>过滤器 filter</h1><ul><li>作用：文本数据格式化</li><li>两种过滤器：1 全局过滤器 2 局部过滤器</li></ul><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><ul><li>说明：通过全局方式创建的过滤器，在任何一个vue实例中都可以使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">&#x27;filterName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// value 表示要过滤的内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; dateStr | date &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; dateStr | date(&#x27;YYYY-MM-DD hh:mm:ss&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">&#x27;date&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, format</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// value 要过滤的字符串内容</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// format 过滤器的参数</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h2><ul><li>说明：局部过滤器是在某一个vue实例的内容创建的，只在当前实例中起作用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">// 通过 filters 属性创建局部过滤器</span></span><br><span class="line">    <span class="attr">filters</span>: &#123;</span><br><span class="line">        <span class="attr">filterName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="品牌案例-日期格式化"><a href="#品牌案例-日期格式化" class="headerlink" title="品牌案例-日期格式化"></a>品牌案例-日期格式化</h2><h1 id="生命周期与钩子函数"><a href="#生命周期与钩子函数" class="headerlink" title="生命周期与钩子函数"></a>生命周期与钩子函数</h1><h2 id="生命周期介绍"><a href="#生命周期介绍" class="headerlink" title="生命周期介绍"></a>生命周期介绍</h2><ul><li>简单说：<strong>一个实例从开始到最后消亡所经历的各种状态，就是一个组件的生命周期</strong></li></ul><p>组件生命周期函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，那么这些事件，统称为组件的生命周期函数！</p><ul><li>生命周期的钩子函数：框架提供的函数，能够让开发人员的代码，参与到组件的生命周期中。也就是说，通过钩子函数，就可以控制组件的行为</li><li>注意：vue再执行过程中会自动调用 <code>生命周期钩子函数</code> ，我们只需要提供这些钩子函数即可</li><li>注意：钩子函数的名称都是固定的！！！</li></ul><h2 id="钩子函数-beforeCreate"><a href="#钩子函数-beforeCreate" class="headerlink" title="钩子函数 - beforeCreate()"></a>钩子函数 - beforeCreate()</h2><ul><li>说明：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用</li><li>注意：此时，无法获取 data中的数据、methods中的方法</li></ul><h2 id="钩子函数-created"><a href="#钩子函数-created" class="headerlink" title="钩子函数 - created()"></a>钩子函数 - <strong>created()</strong></h2><ul><li>注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据</li><li>使用场景：发送请求获取数据</li></ul><h2 id="钩子函数-beforeMounted"><a href="#钩子函数-beforeMounted" class="headerlink" title="钩子函数 - beforeMounted()"></a>钩子函数 - beforeMounted()</h2><ul><li>说明：在挂载开始之前被调用</li></ul><h2 id="钩子函数-mounted"><a href="#钩子函数-mounted" class="headerlink" title="钩子函数 - mounted()"></a>钩子函数 - <strong>mounted()</strong></h2><ul><li>说明：此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作</li></ul><h2 id="钩子函数-beforeUpdated"><a href="#钩子函数-beforeUpdated" class="headerlink" title="钩子函数 - beforeUpdated()"></a>钩子函数 - beforeUpdated()</h2><ul><li>说明：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li></ul><h2 id="钩子函数-updated"><a href="#钩子函数-updated" class="headerlink" title="钩子函数 - updated()"></a>钩子函数 - updated()</h2><ul><li>说明：组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</li></ul><h2 id="钩子函数-beforeDestroy"><a href="#钩子函数-beforeDestroy" class="headerlink" title="钩子函数 - beforeDestroy()"></a>钩子函数 - beforeDestroy()</h2><ul><li>说明：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>使用场景：实例销毁之前，执行清理任务，比如：清除定时器等</li></ul><h2 id="钩子函数-destroyed"><a href="#钩子函数-destroyed" class="headerlink" title="钩子函数 - destroyed()"></a>钩子函数 - destroyed()</h2><ul><li>说明：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><blockquote><p>vue自身没有提供发送ajax请求的工具</p><p>vue1.x的时候vue提供了一个包，vue-resource 专门用于发送ajax请求，但是vue2.x的时候，vue的作者的自己发了一个文章，推荐大家都使用axios库来发送ajax请求。</p></blockquote><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。 </p><ul><li>Promise based HTTP client for the browser and node.js<ul><li>以Promise为基础的HTTP客户端，适用于：浏览器和node.js</li><li>封装ajax，用来发送请求，异步获取数据</li></ul></li><li>安装： <code>npm i -S axios</code> </li><li><a href="https://github.com/axios/axios">axios 推荐</a></li><li><a href="https://www.kancloud.cn/yunye/axios/234845">中文axios</a></li></ul><h1 id="品牌管理案例在线版"><a href="#品牌管理案例在线版" class="headerlink" title="品牌管理案例在线版"></a>品牌管理案例在线版</h1><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h2 id="监视数据变化-watch"><a href="#监视数据变化-watch" class="headerlink" title="监视数据变化 - watch"></a>监视数据变化 - watch</h2><ul><li>概述： <code>watch</code> 是一个对象，键是需要观察的表达式，值是对应回调函数。</li><li>作用：当表达式的值发生变化后，会调用对应的回调函数完成响应的监视操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监视数据的变化</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">//newVal: 变化后的数据  </span></span><br><span class="line">    <span class="comment">//oldVal: 变化前的数据</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;监视了msg的数据变化&#x27;</span>, newVal, oldVal)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>监视对象数据的变化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监视数据的变化</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// watch的完整写法</span></span><br><span class="line">    <span class="attr">car</span>: &#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// handler会在数据发生改变的时候触发</span></span><br><span class="line">            <span class="built_in">console</span>.log(newVal)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">//是否深度监听</span></span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span> <span class="comment">// 在监视启动的时候，会立即启动这个函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算属性-1"><a href="#计算属性-1" class="headerlink" title="计算属性"></a>计算属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-说明： 计算属性是基于它们的依赖进行缓存的， 只有在它的相关依赖发生改变时才会重新求值</span><br><span class="line">    -</span><br><span class="line">    注意： Mustache语法（ &#123;</span><br><span class="line">        &#123;&#125;</span><br><span class="line">    &#125;）</span><br><span class="line">中不要放入太多的逻辑， 否则会让模板过重、 难以理解和维护</span><br><span class="line">    -</span><br><span class="line">    注意： <span class="string">`computed`</span> </span><br><span class="line">中的属性不能与 <span class="string">`data`</span> </span><br><span class="line">中的属性同名</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">firstname</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">        <span class="attr">lastname</span>: <span class="string">&#x27;rose&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">fullname</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.firstname + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">this</span>.lastname</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当计算属性依赖的属性值发生改变的时候，计算属性对应的函数就会重新计算，并且把值缓存起来，直到下一次重新计算，因此计算属性的效率是非常高的。</p><h2 id="品牌管理案例-筛选功能"><a href="#品牌管理案例-筛选功能" class="headerlink" title="品牌管理案例-筛选功能"></a>品牌管理案例-筛选功能</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础语法01</title>
      <link href="/blog/%E5%89%8D%E7%AB%AF/vue%E5%9F%BA%E7%A1%8001/"/>
      <url>/blog/%E5%89%8D%E7%AB%AF/vue%E5%9F%BA%E7%A1%8001/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vue基本概念"><a href="#Vue基本概念" class="headerlink" title="Vue基本概念"></a>Vue基本概念</h1><p><img src="/imgs/VUE-logo.png" alt="Vue"></p><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><ul><li>Vue基础知识</li><li>Vue全家桶（vue/vue-router/vuex/axios）</li><li>组件化开发</li><li>webpack - 前端模块化打包构建工具</li><li>ES6</li><li>Vue项目</li></ul><h2 id="vue介绍"><a href="#vue介绍" class="headerlink" title="vue介绍"></a>vue介绍</h2><ul><li><a href="https://cn.vuejs.org/">vue 中文网</a></li><li><a href="https://cn.vuejs.org/v2/guide/index.html#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88">Vue.js 是什么</a></li><li>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。 </li><li>建议：<strong>通读一遍Vue官网教程中的基础内容</strong></li></ul><h2 id="渐进式的概念-尤雨溪"><a href="#渐进式的概念-尤雨溪" class="headerlink" title="渐进式的概念(尤雨溪)"></a>渐进式的概念(尤雨溪)</h2><blockquote><p>渐进式——在原有项目中，可以先尝试引入一两个组件，可以当插件用… . 甚至也可以用它来开发整个项目！</p></blockquote><p><a href="http://www.bslxx.com/a/vue/2017/1026/1082.html">vue是一个渐进式的框架，我是这么理解的</a></p><p>使用vue，不用一来就使用Vue所有的全家桶， 从最初的只因多看你一眼而用了前端js库，一直到最后的大型项目决方案。 </p><p><img src="imgs/jjs.png" alt=""></p><h2 id="库和框架的概念"><a href="#库和框架的概念" class="headerlink" title="库和框架的概念"></a>库和框架的概念</h2><p><img src="/imgs/框架和库.png" alt="框架和库的区别"></p><ul><li><a href="https://zhuanlan.zhihu.com/p/26078359?group_id=830801800406917120">我们所说的前端框架与库的区别？</a></li></ul><h3 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h3><blockquote><p>库，本质上是一些函数的集合。每次调用函数，实现一个特定的功能</p></blockquote><ul><li>代表：jQuery</li><li>使用库的时候，把库当成工具使用，需要自己控制代码的执行逻辑。</li></ul><h3 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h3><blockquote><p>框架，是一套完整的解决方案，使用框架的时候，需要把你的代码放到框架合适的地方，框架会在合适的时机调用你的代码</p></blockquote><ul><li>框架规定了自己的编程方式，是一套完整的解决方案</li><li>使用框架的时候，由框架控制一切，我们只需要按照规则写代码</li></ul><h3 id="库和框架的区别"><a href="#库和框架的区别" class="headerlink" title="库和框架的区别"></a>库和框架的区别</h3><ul><li>使用库的时候，很自由，只要调用库提供的各种各样的方法就行，也可以不用其他的一些方法</li><li>使用框架的时候，需要按照框架的规则写代码，限制会非常多，但同时框架的功能也很强大，可以极大的提升开发的效率。</li></ul><p><img src="imgs/ku.jpg" alt=""></p><h2 id="MVVM的概念"><a href="#MVVM的概念" class="headerlink" title="MVVM的概念"></a>MVVM的概念</h2><p>参考资料：<a href="https://www.cnblogs.com/indream/p/3602348.html">从Script到Code Blocks、Code Behind到MVC、MVP、MVVM</a></p><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ul><li>MVC是一种软件架构模式，也有人叫做设计模式</li><li>M: Model 数据模型（专门用来操作数据，数据的CRUD）</li><li>V：View 视图（对于前端来说，就是页面）</li><li>C：Controller 控制器（是视图和数据模型沟通的桥梁，用于处理业务逻辑）</li></ul><p><img src="imgs/mvc.jpg" alt=""></p><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM，一种更好的UI模式解决方案</p><ul><li>M：model数据模型</li><li>V：view视图</li><li>VM：ViewModel 视图模型</li></ul><h3 id="MVC-vs-MVVM"><a href="#MVC-vs-MVVM" class="headerlink" title="MVC vs MVVM"></a>MVC vs MVVM</h3><ul><li>MVC模式，将应用程序划分为三大部分，实现了职责分离，需要自己实现controller的代码，需要操作DOM</li><li>MVVM通过 <code>数据双向绑定</code> 让数据自动地双向同步<ul><li>V（修改视图） -&gt; M（数据自动同步）</li><li>M（修改数据） -&gt; V（视图自动徒步）</li></ul></li></ul><p><img src="imgs/MVVM.png" alt=""></p><h3 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h3><p>虽然没有完全遵循 MVVM 模型，Vue 的设计无疑受到了它的启发。因此在文档中经常会使用 vm (ViewModel 的简称) 这个变量名表示 Vue 实例</p><p>注意：</p><p><strong>1. 在vue中，不推荐直接手动操作DOM！！！</strong> </p><p><strong>2. 在vue中，通过数据驱动视图，不要在想着怎么操作DOM，而是想着如何操作数据！！</strong></p><h1 id="vue初体验"><a href="#vue初体验" class="headerlink" title="vue初体验"></a>vue初体验</h1><h2 id="基本使用步骤"><a href="#基本使用步骤" class="headerlink" title="基本使用步骤"></a>基本使用步骤</h2><ul><li>安装： <code>npm install vue</code> </li><li>注意：开发期间使用未压缩版vue.js！！！重说三</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.可以通过&#123;&#123;&#125;&#125;显示vue中的数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1. 引入vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 创建vue实例，需要指定el和data属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 指定vue监管的视图区域,只要id为app的div内部才会受vue的管理</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 提供了vue中使用的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&#x27;hello vue&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>问题1：把 <code>&#123;&#123;msg&#125;&#125;</code> 写到 <code>div#app</code> 外能生效么？</p><p>问题2：el能否写成ele, data能否写成datas? 框架的限制很多，但是习惯就好了！</p></blockquote><h2 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">插值表达式： `&#123;&#123;&#125;&#125;` ，也叫Mustache语法，小胡子语法，因为长得像胡子</span><br><span class="line"></span><br><span class="line">* 解释：使用 `&#123;&#123;&#125;&#125;` （插值表达式）从 `data` 中获取数据，并展示在模板中</span><br><span class="line">* 说明： `&#123;&#123;&#125;&#125;` 中只能出现JavaScript表达式</span><br><span class="line">* 说明：数据对象的属性值发生了改变，插值处的内容都会更新</span><br><span class="line"></span><br><span class="line">&gt; 1 不能使用不存在的数据 2 不能使用js语句</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; msg &#125;&#125;.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; isOk ? &#x27;yes&#x27;: &#x27;no&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 1 + 2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ！！！错误示范！！！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; if()&#123;&#125; &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; err &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h1><ul><li>解释：指令 (Directives) 是带有 <code>v-</code> 前缀的特殊属性，可以在html标签中使用，可以看成特殊的html属性</li><li>作用：指令提供了一些特殊的功能，当指向绑定到标签上时，可以给标签增加一些特殊的行为</li></ul><h2 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h2><ul><li>描述：插值表达式不能用在html的属性上，如果想要动态的设置html元素的属性，需要使用v-bind指令</li><li>作用：动态的设置html的属性</li><li>语法： <code>v-bind:title=&quot;msg&quot;</code> </li><li>简写： <code>:title=&quot;msg&quot;</code> </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h2><ul><li>解释：更新元素的  <code>textContent</code> 。如果要更新部分的  <code>textContent</code>  ，需要使用  <code>&#123;&#123; Mustache &#125;&#125;</code>  插值。 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h2><ul><li>解释：更新DOM对象的 innerHTML, html标签会生效</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。只在可信内容上使用  <code>v-html</code> ，</strong>永不<strong>用在用户提交的内容上。</strong> </p><h2 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h2><ul><li>作用：在表单元素上创建双向数据绑定</li><li>说明：监听用户的输入事件以更新数据</li><li>思考：如何在JS代码中获取到文本框的值？？？</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;edit me&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><ul><li>双向数据绑定：将DOM与Vue实例的data数据绑定到一起，彼此之间相互影响<ul><li>数据的改变会引起DOM的改变</li><li>DOM的改变也会引起数据的变化</li></ul></li><li>原理：数据劫持， <code>Object.defineProperty</code> 中的 <code>get</code> 和 <code>set</code> 方法<ul><li><code>getter</code> 和 <code>setter</code> ：访问器</li><li>作用：指定 <code>读取或设置</code> 对象属性值的时候，执行的操作</li></ul></li><li>注意： <code>Object.defineProperty</code> 方法是ES5中提供的，IE8浏览器不支持这个方法。因此，Vue支持IE8及其以下版本浏览器</li><li><a href="https://cn.vuejs.org/v2/guide/reactivity.html">Vue - 深入响应式原理</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">MDN - Object.defineProperty()</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  语法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;msg&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 设置 obj.msg 执行的操作</span></span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="comment">// 读取 obj.msg 执行的操作</span></span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Vue双向绑定的极简实现"><a href="#Vue双向绑定的极简实现" class="headerlink" title="Vue双向绑定的极简实现"></a>Vue双向绑定的极简实现</h3><ul><li><a href="https://segmentfault.com/a/1190000006599500">剖析Vue原理&amp;实现双向绑定MVVM</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;msgBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> txt = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;txt&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> msgBox = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;msgBox&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> obj = &#123;&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 给对象obj添加msg属性，并设置setter访问器</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;msg&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置 obj.msg 执行的操作</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">curVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            txt.value = curVal</span></span><br><span class="line"><span class="javascript">            msgBox.innerText = curVal</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听文本框的改变</span></span></span><br><span class="line"><span class="javascript">    txt.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        obj.msg = <span class="built_in">this</span>.value</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h2><ul><li>作用：绑定事件</li><li>语法： <code>v-on:click=&quot;say&quot;</code> or <code>v-on:click=&quot;say(&#39;参数&#39;, $event)&quot;</code> </li><li>简写： <code>@click=&quot;say&quot;</code> </li><li>说明：绑定的事件从 <code>methods</code> 中获取</li><li>案例：跑马灯</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li><code>.stop</code> 阻止冒泡，调用 event.stopPropagation()</li><li><code>.prevent</code> 阻止默认行为，调用 event.preventDefault()</li><li><code>.capture</code> 添加事件侦听器时使用事件 <code>捕获</code> 模式</li><li><code>.self</code> 只当事件在该元素本身（比如不是子元素）触发时，才会触发事件</li><li><code>.once</code> 事件只触发一次</li></ul><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><p>在监听键盘事件时，我们经常需要检查常见的键值。Vue 允许为  <code>v-on</code>  在监听键盘事件时添加按键修饰符： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.enter</span><br><span class="line">    .tab</span><br><span class="line">    .delete(捕获“ 删除” 和“ 退格” 键)</span><br><span class="line">    .esc</span><br><span class="line">    .space</span><br><span class="line">    .up</span><br><span class="line">    .down</span><br><span class="line">    .left</span><br><span class="line">    .right</span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ul><li>作用：基于源数据多次渲染元素或模板块</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 基础用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- item 为当前项，index 为索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125; -- &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- item 为值，key 为键，index 为索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, key, index) in obj&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125; -- &#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 10&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="key属性"><a href="#key属性" class="headerlink" title="key属性"></a>key属性</h3><ul><li>推荐：使用 <code>v-for</code> 的时候提供 <code>key</code> 属性，能够提升列表渲染的性能</li><li>说明：使用 key，VUE会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li><li><a href="https://cn.vuejs.org/v2/guide/list.html#key">vue key</a></li><li><a href="https://www.zhihu.com/question/61064119/answer/183717717">vue key属性的说明</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例：品牌管理"><a href="#案例：品牌管理" class="headerlink" title="案例：品牌管理"></a>案例：品牌管理</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端ajax上传记录</title>
      <link href="/blog/%E5%89%8D%E7%AB%AF/ajax%E4%B8%8A%E4%BC%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/%E5%89%8D%E7%AB%AF/ajax%E4%B8%8A%E4%BC%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ajax上传文件"><a href="#ajax上传文件" class="headerlink" title="ajax上传文件"></a>ajax上传文件</h3><blockquote><p>需要用到两个对象</p><ol><li><strong>FormData</strong></li><li><strong>XMLHttpRequest</strong></li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myfile&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;UpladFile()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">UploadFile=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件对象</span></span><br><span class="line">    <span class="keyword">let</span> fileObj = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#file&#x27;</span>).files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 获取上传文件的后台地址</span></span><br><span class="line">    <span class="keyword">let</span> fileUrl = <span class="string">&#x27;./file/save&#x27;</span>;</span><br><span class="line">    <span class="comment">// FormData 对象</span></span><br><span class="line">    <span class="keyword">let</span> FD = <span class="keyword">new</span> FormData();</span><br><span class="line">    <span class="comment">// 增加表单数据</span></span><br><span class="line">    FD.append(<span class="string">&#x27;author&#x27;</span>,<span class="string">&#x27;zag&#x27;</span>);</span><br><span class="line">    FD.append(<span class="string">&#x27;file&#x27;</span>,filObj);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">&#x27;post&#x27;</span>,fileUrl,<span class="literal">true</span>);</span><br><span class="line">    xhr.onload = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;上传完成&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send(FD)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增加进度条-进行上传进度显示"><a href="#增加进度条-进行上传进度显示" class="headerlink" title="增加进度条 进行上传进度显示"></a>增加进度条 进行上传进度显示</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置一个html5的进度条 实时改变它的value值就可以实现不断变化的进度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">id</span>=<span class="string">&quot;progressBar&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">progress</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;progressText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们只需要在js的xhr对象上增加一个事件侦听器 就可以检测当前上传进度参数  通过赋值达到进度条的实时变化</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">&#x27;progress&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> progressBar = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#progressBar&#x27;</span>);</span><br><span class="line">    <span class="comment">// e事件对象中有两个参数 1 loaded  2 total</span></span><br><span class="line">    <span class="keyword">if</span>(e.lengthComputable)&#123;</span><br><span class="line">        progressBar.max = e.total</span><br><span class="line">        progressBar.value = e.loaded</span><br><span class="line">        progressText.innerHTML = (e.loaded/e.total * <span class="number">100</span>) + <span class="string">&#x27;%&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h4 id="拖拽上传的简单逻辑实现"><a href="#拖拽上传的简单逻辑实现" class="headerlink" title="拖拽上传的简单逻辑实现"></a>拖拽上传的简单逻辑实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标区域target 的ondrop事件触发 之后 获取事件对象</span></span><br><span class="line"><span class="keyword">let</span> target = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.tip&#x27;</span>);</span><br><span class="line">target.ondrop = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="comment">// 获取文件对象数组</span></span><br><span class="line">    <span class="keyword">let</span> fs = e.dataTransfer.files;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="comment">// 读取为二进制数据</span></span><br><span class="line">            reader.readAsArrayBuffer(file);</span><br><span class="line">            reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> binary = <span class="built_in">this</span>.result;</span><br><span class="line">                upload(binary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> upload = <span class="function">(<span class="params">binary</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">   xhr.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;http://xxxx/opload&quot;</span>);</span><br><span class="line">   xhr.overrideMimeType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">   <span class="comment">//直接发送二进制数据</span></span><br><span class="line">   <span class="keyword">if</span>(xhr.sendAsBinary)&#123;</span><br><span class="line">       xhr.sendAsBinary(binary);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       xhr.send(binary);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听变化</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState===<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status===<span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">// 响应成功       </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="粘贴逻辑"><a href="#粘贴逻辑" class="headerlink" title="粘贴逻辑"></a>粘贴逻辑</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">&#x27;paste&#x27;</span>,<span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = (event.clipboardData)</span><br><span class="line">.... &#125;);</span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ol><li><p>大文件的上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">采用blob.slice 分片 思想</span><br><span class="line">所有切片挨个发请求 然后merge</span><br></pre></td></tr></table></figure></li><li><p>断点续传 + 秒传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">md5计算，缓存思想 ⽂文件⽤用md5计算⼀一个指纹，上传之</span><br><span class="line">前，先问后端，这个⽂文件的hash在不不在，在的话就不不⽤用</span><br><span class="line">传了了，就是所谓的断点续传，如果整个⽂文件都存在了了 就</span><br><span class="line">是秒传</span><br></pre></td></tr></table></figure></li><li><p>计算<strong>hash</strong>优化</p><ol><li><p><strong>web-worker</strong></p><p>⼤大⽂文件的md5太慢了了,启⽤用webworker计算</p></li><li><p><strong>time-slice</strong></p><p>react fiber架构学习，利利⽤用浏览器器空闲时间<br>requestIdleCallback</p></li></ol></li><li><p>抽样<strong>hash</strong></p><p>布隆隆过滤器思想</p></li><li><p>请求并发数控制和重试</p></li><li><p>慢启动策略略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TCP拥塞控制的问题 其实就是根据当前⽹网络情况，动态 调整切⽚片的⼤大⼩小</span><br><span class="line">1. chunk中带上size值，不不过进度条数量量不不确定了了， 修改createFileChunk， 请求加上时间统计)</span><br><span class="line">2. ⽐比如我们理理想是30秒传递⼀一个</span><br><span class="line">3. 初始⼤大⼩小定为1M，如果上传花了了10秒，那下⼀一个区</span><br><span class="line">块⼤大⼩小变成3M</span><br><span class="line">4. 如果上传花了了60秒，那下⼀一个区块⼤大⼩小变成500KB</span><br><span class="line">    web全栈架构师</span><br><span class="line">以此类推</span><br><span class="line">5. 并发+慢启动的逻辑有些复杂，我⾃自⼰己还没绕明⽩白，</span><br><span class="line">囧所以先⼀一次只传⼀一个切⽚片，来演示这个逻辑，新建 ⼀一个 handleUpload1 函数</span><br></pre></td></tr></table></figure></li><li><p>碎⽚片清理</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包 装饰器</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/12.%E9%97%AD%E5%8C%85%20%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/12.%E9%97%AD%E5%8C%85%20%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><strong>函数名只是函数代码空间的引用，当函数名赋值给一个对象的时候，就是引用传递</strong></p><p><strong>定义</strong>:在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包</p><p><strong>内部函数和使用的外部函数提供的变量构成的整体称为闭包</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_conf</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> a*x + b</span><br><span class="line">    <span class="keyword">return</span> line</span><br><span class="line">line1 = line_conf(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">line2 - line_conf(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(line1(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(line2(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><strong>修改外部函数中的变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">start=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> start</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">c1 = outer(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(c1())</span><br><span class="line"><span class="built_in">print</span>(c1())</span><br></pre></td></tr></table></figure><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 公司基础平台部门要在已有的功能基础上加上一些验证功能</span></span><br><span class="line"><span class="comment"># 秉着对修改关闭对扩展开发的软件开发原则 我们使用装饰器进行实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line"><span class="meta">@w2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"><span class="meta">@w3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"><span class="meta">@w4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">不改动原有函数功能的前提下 加入装饰器修饰符  定义装饰器函数</span></span><br><span class="line"><span class="string">通过传入基础功能（在验证功能之后执行) 在调用内部闭包本身</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>引入日志</li><li>函数执行时间统计</li><li>执行函数前预备处理</li><li>执行函数后清理功能</li><li>权限校验等场景</li><li>缓存</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span>(<span class="params">fun</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s called at %s&#x27;</span> %(fun.__name__, ctime()))</span><br><span class="line">        fun()</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am foo&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line"><span class="comment"># 加入函数执行时间统计功能</span></span><br></pre></td></tr></table></figure><p><strong>被装饰得函数有参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span>(<span class="params">fun</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>(<span class="params">a,b</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s called at %s&#x27;</span> %(fun.__name__, ctime()))</span><br><span class="line">        <span class="built_in">print</span>(a,b)</span><br><span class="line">        fun(a,b)</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a+b)</span><br><span class="line">   </span><br><span class="line">foo(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo(<span class="number">6</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><strong>被装饰的函数有不定长参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span>(<span class="params">fun</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s called at %s&#x27;</span>%(fun.__name__, ctime()))</span><br><span class="line">        fun(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">foo(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo(<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,name=<span class="string">&quot;lisi&quot;</span>,age=<span class="number">22</span>)</span><br></pre></td></tr></table></figure><p><strong>装饰器中的return</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span>(<span class="params">fun</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s called at %s&#x27;</span>%(fun.__name__, ctime()))</span><br><span class="line">        <span class="keyword">return</span> fun()</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am foo&#x27;</span>)</span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInfo</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;---hahah&#x27;</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(getInfo())</span><br></pre></td></tr></table></figure><p><strong>在原有装饰器基础上 增加外部变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun_arg</span>(<span class="params">pre=<span class="string">&#x27;hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">timefun</span>(<span class="params">fun</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>():</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s called at %s&#x27;</span>%(fun.__name__, ctime()))</span><br><span class="line">            <span class="keyword">return</span> fun()</span><br><span class="line">        <span class="keyword">return</span> wrapped</span><br><span class="line">    <span class="keyword">return</span> timefun</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg(<span class="params"><span class="string">&#x27;itcast&#x27;</span></span>)   </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg(<span class="params"><span class="string">&#x27;python&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;too&#x27;</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line">too()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">too()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1 调用timefun_arg函数 传入&quot;itcast&quot;参数 得到timefun返回值</span></span><br><span class="line"><span class="string">2 执行timefun函数 传入foo函数 将返回值wrapped函数返回</span></span><br><span class="line"><span class="string">3 将返回的wrapped函数赋值给foo  </span></span><br><span class="line"><span class="string">4 调用foo函数 相当于执行wrapped闭包 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>类装饰器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在python中一般callable对象都是函数，装饰器函数 必须接受一个callable对象作为参数 然后返回一个callable对象</span></span><br><span class="line">那么我们可以将某个对象重写__call__()方法 那么这个对象就是<span class="built_in">callable</span>的</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call me&#x27;</span>)</span><br><span class="line">t = Test()</span><br><span class="line">t()  <span class="comment"># call me</span></span><br></pre></td></tr></table></figure><p><strong>类装饰器的实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----初始化---&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;func name is %s&#x27;</span> % func.__name__)</span><br><span class="line">        self.__func = func</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----装饰器中的功能&#x27;</span>)</span><br><span class="line">        self.__func()</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----test---&#x27;</span>)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库高级用法</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/11.Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/11.Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数据库的高级用法"><a href="#数据库的高级用法" class="headerlink" title="数据库的高级用法"></a>数据库的高级用法</h3><h4 id="1-视图"><a href="#1-视图" class="headerlink" title="1.视图"></a>1.视图</h4><blockquote><p>对于复杂的查询，往往是有多个数据表进行关联查询而得到，而这种语句往往比较复杂，也可能非常频繁的使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select goods.name,goods_cates.name,goods_brands.name</span><br><span class="line">from goods</span><br><span class="line">join goods_cates on goods.cate_id = goods_cates.id</span><br><span class="line">join goods_brands on goods.brand_id = goods_brands.id;</span><br></pre></td></tr></table></figure><blockquote><p>简化复杂的查询操作 使用视图 封装为虚拟表</p><p>视图只是一个虚表 不存储任何基本表的表数据 当用户使用视图 视图会从基本表中取出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- create view 视图名称 as select语句</span><br><span class="line">create view v_goods_info</span><br><span class="line">as </span><br><span class="line">select goods.name,goods_cates.name,goods_brands.name</span><br><span class="line">from goods</span><br><span class="line">join goods_cates on goods.cate_id = goods_cates.id</span><br><span class="line">join goods_brands on goods.brand_id = goods_brands.id;</span><br><span class="line"></span><br><span class="line">-- 查看视图</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">-- 删除视图</span><br><span class="line">drop view 视图名称</span><br><span class="line">drop view v_goods_info;</span><br></pre></td></tr></table></figure><h4 id="2-事务"><a href="#2-事务" class="headerlink" title="2.事务"></a>2.事务</h4><blockquote><p><strong>事务Transaction，是指作为一个基本工作单元执行的一系列sql语句的操作 要么完全的执行，要么完全的不执行</strong></p></blockquote><ul><li><p>原子性</p><p>一个事务是一个不可分割的最小工作单元，不可能只执行其中的一部分操作</p></li><li><p>一致性</p><p>数据库总是从一个一致性状态转换为另一个一致性状态</p></li><li><p>隔离性</p><p>通常来说，一个事务所做的修改在最终提交之前对其他事物是不可见的</p></li><li><p>持久性</p><p>一旦事务提交，则其所做的修改会永久保存到数据库中</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 开启事务</span><br><span class="line">begin;</span><br><span class="line">-- 或者</span><br><span class="line">start transaction;</span><br><span class="line"></span><br><span class="line">-- 提交事务</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">-- 回滚事务</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line"># 案例：</span><br><span class="line"># 查看商品分类信息</span><br><span class="line">select * from goods_cates;</span><br><span class="line"># 开启事务 增加数据</span><br><span class="line">begin;</span><br><span class="line">insert into goods_cates(name) values(&#x27;小霸王游戏机&#x27;);</span><br><span class="line"># 提交事务  或者回滚信息</span><br><span class="line">commit;  /   rollback;</span><br><span class="line"># 查询新增数据</span><br><span class="line">select * from goods_cates;</span><br></pre></td></tr></table></figure><h4 id="3-索引"><a href="#3-索引" class="headerlink" title="3.索引"></a>3.索引</h4><blockquote><p>当数据库数据量很大时 修改较少的情况下，为了提高查询效率，可以给数据建立索引</p></blockquote><p><strong>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分).他们记录着数据的位置信息</strong></p><p>通过特定的查找算法（比如二叉三叉树）来提供查询效率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查看表中的已有索引</span><br><span class="line">show index from 表名；</span><br><span class="line"></span><br><span class="line">-- 创建索引</span><br><span class="line">create index 索引名称 on 表名（字段名称(长度))</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index 索引名称 on 表名</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建测试数据表</span></span><br><span class="line">create table test_index(title varchar(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 导入十万条数据</span></span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> connect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建Connection连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,database=<span class="string">&#x27;jing_dong&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;mysql&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获得Cursor对象</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 插入10万次数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        cursor.execute(<span class="string">&quot;insert into test_index values(&#x27;ha-%d&#x27;)&quot;</span> % i)</span><br><span class="line">    <span class="comment"># 提交数据</span></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#========运行以上文件=============</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启运行时间检测</span></span><br><span class="line"><span class="built_in">set</span> profiling =<span class="number">1</span>;</span><br><span class="line"><span class="comment"># 查找第1万条数据ha--99999</span></span><br><span class="line">select * <span class="keyword">from</span> test_index where title = <span class="string">&#x27;ha-99999&#x27;</span>;</span><br><span class="line"><span class="comment"># 为表title_index的title列创建索引</span></span><br><span class="line">create index title_index on test_index(title(<span class="number">10</span>));</span><br><span class="line"><span class="comment"># 执行查询语句</span></span><br><span class="line">select * <span class="keyword">from</span> test_index where title=<span class="string">&quot;ha-99999&quot;</span>;</span><br><span class="line"><span class="comment"># 再次查看执行的时间</span></span><br><span class="line">show profiles;</span><br></pre></td></tr></table></figure><p><img src="/media/images/pic/Snipaste_2018-09-21_15-55-47.png" alt="Snipaste_2018-09-21_15-55-47"></p><p>可以看出  建立索引之后的查询速率得到很大的提升，但创建索引的过程花费不少时间，因此我们可以得到结论：对于频繁读取并且不经常更改的数据，可以使用创建索引来提高查询效率</p><h4 id="4-用户管理"><a href="#4-用户管理" class="headerlink" title="4.用户管理"></a>4.用户管理</h4><blockquote><ol><li>查看所有的用户</li><li>修改密码</li><li>删除用户</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  所有的用户以及权限信息存储在mysql数据库的user表中</span></span><br><span class="line">use mysql</span><br><span class="line"><span class="comment"># 查看user表的结果</span></span><br><span class="line">desc user;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Host表示允许访问的主机   User 用户名  authentication_string 密码 为加密后的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有的用户</span></span><br><span class="line">select host,user,authentication_string <span class="keyword">from</span> user;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建账户 授权</span></span><br><span class="line"><span class="comment"># - 需要使用实例级账户登录后操作，以root为例</span></span><br><span class="line"><span class="comment"># - 常用权限主要包括：create、alter、drop、insert、update、delete、select</span></span><br><span class="line"><span class="comment"># - 如果分配所有权限，可以使用all privileges</span></span><br><span class="line"></span><br><span class="line">grant 权限列表 on 数据库 to <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;访问主机&#x27;</span> identified by <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># - 主机地址：localhost / 具体ip / % 任意主机</span></span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用root登录</span></span><br><span class="line">mysql -uroot -pmysql</span><br><span class="line"><span class="comment"># 添加数据库账户 并设置权限</span></span><br><span class="line">grant select on jing_dong.* to <span class="string">&#x27;zhangsan&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="comment"># 显示创建的账户信息</span></span><br><span class="line">show grants <span class="keyword">for</span> zhangsan@%;</span><br><span class="line"><span class="comment"># 退出root账户</span></span><br><span class="line">quit</span><br><span class="line"><span class="comment"># 使用章三账户登录 进行查看和操作</span></span><br><span class="line">mysql -uzhangsan -p123</span><br></pre></td></tr></table></figure><p><strong>修改权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant 权限名称 on 数据库 to 账户@主机 with grant option；</span><br></pre></td></tr></table></figure><p><strong>修改密码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用root登录  修改数据库中的user表</span><br><span class="line"># 1 使用password()函数进行密码加密</span><br><span class="line">update user set authenication_string=password(&#x27;12345&#x27;) where user=&quot;zhangsan&quot;;</span><br><span class="line">#  2 注册修改完成后需要刷新权限</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure><p><strong>删除账户</strong></p><p>使用root登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &#x27;zhangsan&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除章三的用户信息</span><br><span class="line">delete from user where user=&quot;zhangsan&quot;;</span><br><span class="line"># 操作结束之后需要刷新权限</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure><blockquote><p>如果root密码忘记怎么办？</p><p>参考 <a href="http://blog.csdn.net/lxpbs8851/article/details/10895085">http://blog.csdn.net/lxpbs8851/article/details/10895085</a></p></blockquote><hr><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><h4 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h4><ul><li>第一范式<strong>1NF</strong>：强调列的原子性</li><li>第二范式<strong>2NF</strong>：表中必须有一个主键，非主键字段必须完全依赖于主键，而不能部分依赖于主键</li><li>第三范式<strong>3NF</strong>：非主键必须直接依赖于主键，不能存在传递依赖</li></ul><h4 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h4><p>E-R图即实体-联系图(Entity Relationship Diagram)，是指提供了表示实体型、属性和联系的方法，用来描述现实世界的概念模型。由美籍华裔计算机科学家陈品山(Peter Chen)发明。</p><p><strong>E-R模型设计图</strong></p><p><img src="/media/images/pic/Snipaste_2018-09-21_16-37-19.png" alt="Snipaste_2018-09-21_16-37-19"></p><p><strong>一对一关系</strong></p><p><img src="/media/images/pic/Snipaste_2018-09-21_16-37-56.png" alt="Snipaste_2018-09-21_16-37-56"></p><p><strong>一对多</strong></p><p><img src="/media/images/pic/Snipaste_2018-09-21_16-38-12.png" alt="Snipaste_2018-09-21_16-38-12"></p><p><strong>多对多</strong></p><p><img src="/media/images/pic/Snipaste_2018-09-21_16-38-26.png" alt="Snipaste_2018-09-21_16-38-26"></p><p><a href="https://edu.aqniu.com/course/83/tasks#modal">https://edu.aqniu.com/course/83/tasks#modal</a></p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul><li>范式就是设计数据库的通用规范。<ul><li>1NF强调字段是最小单元，不可再分</li><li>2NF强调在1NF基础上必须要有主键和非主键字段必须完全依赖于主键，也就是说 不能部分依赖</li><li>3MF强调在2NF基础上 非主键字段必须直接依赖于主键，也就是说不能传递依赖(间接依赖)。</li></ul></li><li>E-R图由 实体、属性、实体之间的联系构成，主要用来描述 数据库中表结构。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多表联查以及数据库编程</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/10.%E5%A4%9A%E8%A1%A8%E8%81%94%E6%9F%A5%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/10.%E5%A4%9A%E8%A1%A8%E8%81%94%E6%9F%A5%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="MySql编程"><a href="#MySql编程" class="headerlink" title="MySql编程"></a>MySql编程</h3><h4 id="1-准备数据"><a href="#1-准备数据" class="headerlink" title="1.准备数据"></a>1.准备数据</h4><h5 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 创建 &quot;京东&quot;数据库</span><br><span class="line">create database jing_dong charset=utf8;</span><br><span class="line"></span><br><span class="line">-- 使用&quot;京东&quot;数据库</span><br><span class="line">use jing_dong;</span><br><span class="line"></span><br><span class="line">-- 创建一个商品goods数据表</span><br><span class="line">create table goods (</span><br><span class="line">id int unsigned primary key auto_increment not null,</span><br><span class="line">    name varchar(150) not null,</span><br><span class="line">    cate_name varchar(40) not null,</span><br><span class="line">    brand_name varchar(40) not null,</span><br><span class="line">    price decimal(10,3) not null default 0,</span><br><span class="line">    is_show bit not null default 1,</span><br><span class="line">    is_saleoff bit not null default 0</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">-- 创建 &quot;京东&quot; 数据库</span><br><span class="line">create database jing_dong charset=utf8;</span><br><span class="line"></span><br><span class="line">-- 使用 &quot;京东&quot; 数据库</span><br><span class="line">use jing_dong;</span><br><span class="line"></span><br><span class="line">-- 创建一个商品goods数据表</span><br><span class="line">create table goods(</span><br><span class="line">    id int unsigned primary key auto_increment not null,</span><br><span class="line">    name varchar(150) not null,</span><br><span class="line">    cate_name varchar(40) not null,</span><br><span class="line">    brand_name varchar(40) not null,</span><br><span class="line">    price decimal(10,3) not null default 0,</span><br><span class="line">    is_show bit not null default 1,</span><br><span class="line">    is_saleoff bit not null default 0</span><br><span class="line">);</span><br><span class="line">1.3 插入数据</span><br><span class="line"></span><br><span class="line">-- 向goods表中插入数据</span><br><span class="line"></span><br><span class="line">insert into goods values(0,&#x27;r510vc 15.6英寸笔记本&#x27;,&#x27;笔记本&#x27;,&#x27;华硕&#x27;,&#x27;3399&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;y400n 14.0英寸笔记本电脑&#x27;,&#x27;笔记本&#x27;,&#x27;联想&#x27;,&#x27;4999&#x27;,default,default);</span><br><span class="line">insert into goods values(0,&#x27;g150th 15.6英寸游戏本&#x27;,&#x27;游戏本&#x27;,&#x27;雷神&#x27;,&#x27;8499&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;x550cc 15.6英寸笔记本&#x27;,&#x27;笔记本&#x27;,&#x27;华硕&#x27;,&#x27;2799&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;x240 超极本&#x27;,&#x27;超级本&#x27;,&#x27;联想&#x27;,&#x27;4880&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;u330p 13.3英寸超极本&#x27;,&#x27;超级本&#x27;,&#x27;联想&#x27;,&#x27;4299&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;svp13226scb 触控超极本&#x27;,&#x27;超级本&#x27;,&#x27;索尼&#x27;,&#x27;7999&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;ipad mini 7.9英寸平板电脑&#x27;,&#x27;平板电脑&#x27;,&#x27;苹果&#x27;,&#x27;1998&#x27;,default,default);</span><br><span class="line">insert into goods values(0,&#x27;ipad air 9.7英寸平板电脑&#x27;,&#x27;平板电脑&#x27;,&#x27;苹果&#x27;,&#x27;3388&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;ipad mini 配备 retina 显示屏&#x27;,&#x27;平板电脑&#x27;,&#x27;苹果&#x27;,&#x27;2788&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;ideacentre c340 20英寸一体电脑 &#x27;,&#x27;台式机&#x27;,&#x27;联想&#x27;,&#x27;3499&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;vostro 3800-r1206 台式电脑&#x27;,&#x27;台式机&#x27;,&#x27;戴尔&#x27;,&#x27;2899&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;imac me086ch/a 21.5英寸一体电脑&#x27;,&#x27;台式机&#x27;,&#x27;苹果&#x27;,&#x27;9188&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;at7-7414lp 台式电脑 linux ）&#x27;,&#x27;台式机&#x27;,&#x27;宏碁&#x27;,&#x27;3699&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;z220sff f4f06pa工作站&#x27;,&#x27;服务器/工作站&#x27;,&#x27;惠普&#x27;,&#x27;4288&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;poweredge ii服务器&#x27;,&#x27;服务器/工作站&#x27;,&#x27;戴尔&#x27;,&#x27;5388&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;mac pro专业级台式电脑&#x27;,&#x27;服务器/工作站&#x27;,&#x27;苹果&#x27;,&#x27;28888&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;hmz-t3w 头戴显示设备&#x27;,&#x27;笔记本配件&#x27;,&#x27;索尼&#x27;,&#x27;6999&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;商务双肩背包&#x27;,&#x27;笔记本配件&#x27;,&#x27;索尼&#x27;,&#x27;99&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;x3250 m4机架式服务器&#x27;,&#x27;服务器/工作站&#x27;,&#x27;ibm&#x27;,&#x27;6888&#x27;,default,default); </span><br><span class="line">insert into goods values(0,&#x27;商务双肩背包&#x27;,&#x27;笔记本配件&#x27;,&#x27;索尼&#x27;,&#x27;99&#x27;,default,default);</span><br></pre></td></tr></table></figure><h4 id="2-SQL语句强化"><a href="#2-SQL语句强化" class="headerlink" title="2.SQL语句强化"></a>2.SQL语句强化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 查询类型cate_name为 &#x27;超极本&#x27; 的商品名称、价格</span><br><span class="line">select name,price from goods where cate_name = &quot;超级本&quot;;</span><br><span class="line"></span><br><span class="line">-- 显示商品的种类</span><br><span class="line">select cate_name from goods group by cate_name;</span><br><span class="line"></span><br><span class="line">-- 求所有电脑产品的平均价格,并且保留两位小数</span><br><span class="line">select round(avg(price),2) as &quot;平均价格&quot; from goods;</span><br><span class="line"></span><br><span class="line">-- 显示每种商品的平均价格</span><br><span class="line">select cate_name,round(avg(price),2) from goods group by cate_name;</span><br><span class="line"></span><br><span class="line">-- 查询每种类型的商品中 最贵、最便宜、平均价、数量</span><br><span class="line">select cate_name,max(price),min(price),avg(price),count(*) from goods group by cate_name;</span><br><span class="line"></span><br><span class="line">-- 查询所有价格大于平均价格的商品，并且按价格降序排序</span><br><span class="line">select * from goods where price &gt; (select avg(price) from goods) order by price desc;</span><br></pre></td></tr></table></figure><h4 id="3-创建商品分类表"><a href="#3-创建商品分类表" class="headerlink" title="3.创建商品分类表"></a>3.创建商品分类表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 创建商品分类表</span><br><span class="line">create table if not exists goods_cates(</span><br><span class="line">id int unsigned primary key auto_increment,</span><br><span class="line">    name varchar(40) not null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">--  将分组结果写入到goods_cates数据表</span><br><span class="line">insert into goods_cates (name) </span><br><span class="line">    select cate_name from goods group by cate_name;</span><br><span class="line">    </span><br><span class="line">--  通过goods_cates数据表来更新goods表</span><br><span class="line">update goods as g</span><br><span class="line">    inner join goods_cates as gc</span><br><span class="line">    on g.cate_name=gc.name</span><br><span class="line">    set g.cate_name=gc.id;</span><br></pre></td></tr></table></figure><h4 id="4-创建商品品牌表"><a href="#4-创建商品品牌表" class="headerlink" title="4.创建商品品牌表"></a>4.创建商品品牌表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 在创建数据表的时候一起插入数据</span><br><span class="line">-- 注意: 需要对brand_name 用as起别名，否则name字段就没有值</span><br><span class="line">create table goods_brands (</span><br><span class="line">    id int unsigned primary key auto_increment,</span><br><span class="line">    name varchar(40) not null) select brand_name as name from goods group by brand_name;</span><br><span class="line"></span><br><span class="line">-- 通过goods_brands数据表来更新goods数据表</span><br><span class="line">update goods as g inner join goods_brands as b on g.brand_name=b.name set g.brand_name=b.id;</span><br></pre></td></tr></table></figure><h4 id="5-修改商品表结构"><a href="#5-修改商品表结构" class="headerlink" title="5.修改商品表结构"></a>5.修改商品表结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table goods  </span><br><span class="line">change cate_name cate_id int unsigned not null,</span><br><span class="line">change brand_name brand_id int unsigned not null;</span><br></pre></td></tr></table></figure><h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foreign key约束指定某一个列或一组列作为外部键，其中包含外部键的表称为子表，包含外键所引用的键的表称为父表。</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 在goods表中插入任意记录</span><br><span class="line">insert into goods (name,cate_id,brand_id,price)</span><br><span class="line">values(&#x27;LaserJet Pro P1606dn 黑白激光打印机&#x27;, 12, 4,&#x27;1849&#x27;);</span><br><span class="line"></span><br><span class="line">-- 通过内连接方式查看</span><br><span class="line">select g.id,g.name,c.name,b.name,g.price from goods as g</span><br><span class="line">inner join goods_cates as c on g.cate_id=c.id</span><br><span class="line">inner join goods_brands as b on g.brand_id=b.id;</span><br><span class="line"></span><br><span class="line">-- 通过左连接方式查看</span><br><span class="line">select g.id,g.name,c.name,b.name,g.price from goods as g</span><br><span class="line">left join goods_cates as c on g.cate_id=c.id</span><br><span class="line">left join goods_brands as b on g.brand_id=b.id;</span><br></pre></td></tr></table></figure><ul><li>如何防止无效信息的插入,就是可以在插入前判断类型或者品牌名称是否存在呢? 可以使用之前讲过的外键来解决</li><li>外键约束:对外键字段的值 在更新和插入时进行和引用的表中字段数据进行对比</li><li>关键字: foreign key,只有 innodb数据库引擎 支持外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给brand_id 添加外键约束成功</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">add</span> <span class="keyword">foreign</span> key (brand_id) <span class="keyword">references</span> goods_brands(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给cate_id 添加外键失败</span></span><br><span class="line"><span class="comment">-- 会出现1452错误</span></span><br><span class="line"><span class="comment">-- 错误原因:已经添加了一个不存在的cate_id值12,因此需要先删除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> goods <span class="keyword">where</span> cate_id <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">add</span> <span class="keyword">foreign</span> key (cate_id) <span class="keyword">references</span> goods_cates(id);</span><br></pre></td></tr></table></figure><h5 id="创建表的时候设置外键"><a href="#创建表的时候设置外键" class="headerlink" title="创建表的时候设置外键"></a>创建表的时候设置外键</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    price <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">    cate_id <span class="type">int</span> unsigned,</span><br><span class="line">    brand_id <span class="type">int</span> unsigned,</span><br><span class="line">    is_show bit <span class="keyword">default</span> <span class="number">1</span>,</span><br><span class="line">    is_saleoff bit <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">foreign</span> key(cate_id) <span class="keyword">references</span> goods_cates(id),</span><br><span class="line">    <span class="keyword">foreign</span> key(brand_id) <span class="keyword">references</span> goods_brands(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查看外键名称</span><br><span class="line">show create table goods;</span><br><span class="line"></span><br><span class="line">alter table goods drop foreign key 外键名称</span><br></pre></td></tr></table></figure><p><strong>外键约束会降低表的更新速率，在读写效率优先的情况下很少使用外键约束</strong></p><hr><h3 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h3><h4 id="1-使用python操作mysql步骤"><a href="#1-使用python操作mysql步骤" class="headerlink" title="1.使用python操作mysql步骤"></a>1.使用python操作mysql步骤</h4><p><img src="/media/images/pic/Snipaste_2018-09-21_00-04-47.png" alt="Snipaste_2018-09-21_00-04-47"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建连接对象</span></span><br><span class="line">conn = connect(参数列表)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">* 参数host：连接的mysql主机，如果本机是&#x27;localhost&#x27;</span></span><br><span class="line"><span class="string">* 参数port：连接的mysql主机的端口，默认是3306</span></span><br><span class="line"><span class="string">* 参数database：数据库的名称</span></span><br><span class="line"><span class="string">* 参数user：连接的用户名</span></span><br><span class="line"><span class="string">* 参数password：连接的密码</span></span><br><span class="line"><span class="string">* 参数charset：通信采用的编码方式，推荐使用utf8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取cursor对象</span></span><br><span class="line">cs = conn.cursor()</span><br><span class="line"><span class="comment"># 执行sql语句 返回影响的行数</span></span><br><span class="line">row_count = cs.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用fetchall  或者 fetchone 方法</span></span><br><span class="line">content = cs.fetchall();</span><br><span class="line"><span class="keyword">for</span> each_data <span class="keyword">in</span> content:</span><br><span class="line">    <span class="built_in">print</span>(each_data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cs.close()</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="面向对象封装交互案例"><a href="#面向对象封装交互案例" class="headerlink" title="面向对象封装交互案例"></a>面向对象封装交互案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JD</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.conn = pymysql.connect(host=<span class="string">&#x27;192.168.1.7&#x27;</span>,port=<span class="number">3306</span>,db = <span class="string">&#x27;jing_dong&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;mysql&#x27;</span>,charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        self.cs = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.cs.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main_fun</span>(<span class="params">self,sql_str,params=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> params == <span class="literal">None</span>:</span><br><span class="line">            self.cs.execute(sql_str)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cs.execute(sql_str,params)</span><br><span class="line">        data = self.cs.fetchall()</span><br><span class="line">        <span class="keyword">for</span> each_data <span class="keyword">in</span> data:</span><br><span class="line">            <span class="built_in">print</span>(each_data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_menu</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;welcom jd_db&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1 显示全部商品信息&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;2 显示商品种类信息&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;3 显示商品品牌信息&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;4 显示某个商品信息&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.show_menu()</span><br><span class="line"></span><br><span class="line">            num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择具体操作选项：&quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">                self.main_fun(<span class="string">&quot;select * from goods&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> num ==<span class="number">2</span>:</span><br><span class="line">                self.main_fun(<span class="string">&quot;select * from goods_cates&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">                self.main_fun(<span class="string">&quot;select * from goods_brands&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> num == <span class="number">4</span>:</span><br><span class="line">                self.main_fun(<span class="string">&quot;select * from goods where name=%s&quot;</span>, [<span class="built_in">input</span>(<span class="string">&quot;请输入你要查找的商品&quot;</span>)])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;输入格式错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    jd = JD()</span><br><span class="line">    jd.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库进阶操作2</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/09.%E6%95%B0%E6%8D%AE%E5%BA%9302%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/09.%E6%95%B0%E6%8D%AE%E5%BA%9302%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数据库进阶操作"><a href="#数据库进阶操作" class="headerlink" title="数据库进阶操作"></a>数据库进阶操作</h3><h4 id="查询强化-for-Example"><a href="#查询强化-for-Example" class="headerlink" title="查询强化 for Example:"></a>查询强化 for Example:</h4><h5 id="1-1-准备环境"><a href="#1-1-准备环境" class="headerlink" title="1.1 准备环境"></a>1.1 准备环境</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line">create database python_test_1 charset=utf8;</span><br><span class="line"></span><br><span class="line"># 使用数据库</span><br><span class="line">use python_test_1;</span><br><span class="line"></span><br><span class="line">-- students表</span><br><span class="line">create python_test_1(</span><br><span class="line">    # id 整型 无符号 主键 自增 不为空</span><br><span class="line">id int unsigned primary key auto_increment not null，</span><br><span class="line">    # 名字 可变字长20字节  默认空字符串</span><br><span class="line">    name varchar(20) default &#x27;&#x27;，</span><br><span class="line">    # 年龄 微整型 无符号  默认为0</span><br><span class="line">age tinyint unsigned default 0,</span><br><span class="line">    # 身高 小数五位数字 小数占两位</span><br><span class="line">    height decimal(5,2),</span><br><span class="line">    # 性别 枚举类型</span><br><span class="line">    gender enum(&#x27;男&#x27;, &#x27;女&#x27;, &#x27;中性&#x27;, &#x27;保密&#x27;) default &#x27;保密&#x27;,</span><br><span class="line">    cls_id int unsigned default 0,</span><br><span class="line">    # 是否删除 比特位 默认为0</span><br><span class="line">    is_delete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- classes表</span><br><span class="line">create table classes(</span><br><span class="line">id int unsigned auto_increment primary key not null,</span><br><span class="line">    name varchar(30) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="1-2准备数据"><a href="#1-2准备数据" class="headerlink" title="1.2准备数据"></a>1.2准备数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 向students表中插入数据</span><br><span class="line">insert into students values</span><br><span class="line">(0,&#x27;小明&#x27;,18,180.00,2,1,0),</span><br><span class="line">(0,&#x27;小月月&#x27;,18,180.00,2,2,1),</span><br><span class="line">(0,&#x27;彭于晏&#x27;,29,185.00,1,1,0),</span><br><span class="line">(0,&#x27;刘德华&#x27;,59,175.00,1,2,1),</span><br><span class="line">(0,&#x27;黄蓉&#x27;,38,160.00,2,1,0),</span><br><span class="line">(0,&#x27;凤姐&#x27;,28,150.00,4,2,1),</span><br><span class="line">(0,&#x27;王祖贤&#x27;,18,172.00,2,1,1),</span><br><span class="line">(0,&#x27;周杰伦&#x27;,36,NULL,1,1,0),</span><br><span class="line">(0,&#x27;程坤&#x27;,27,181.00,1,2,0),</span><br><span class="line">(0,&#x27;刘亦菲&#x27;,25,166.00,2,2,0),</span><br><span class="line">(0,&#x27;金星&#x27;,33,162.00,3,3,1),</span><br><span class="line">(0,&#x27;静香&#x27;,12,180.00,2,4,0),</span><br><span class="line">(0,&#x27;郭靖&#x27;,12,170.00,1,4,0),</span><br><span class="line">(0,&#x27;周杰&#x27;,34,176.00,2,5,0);</span><br><span class="line"></span><br><span class="line">-- 向classes表中插入数据</span><br><span class="line">insert into classes values(0,&#x27;python_01期&#x27;),(0，&#x27;python_02期&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-3验证数据"><a href="#1-3验证数据" class="headerlink" title="1.3验证数据"></a>1.3验证数据</h5><ul><li><p>查询所有的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from students;</span><br><span class="line">select * from classes;</span><br></pre></td></tr></table></figure></li><li><p>查询指定字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,age from students;</span><br></pre></td></tr></table></figure></li></ul><h4 id="as关键字"><a href="#as关键字" class="headerlink" title="as关键字"></a>as关键字</h4><ul><li><p>使用as给字段起别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id as 序号,name as 名字,gender as 性别 from students;</span><br></pre></td></tr></table></figure></li><li><p>可以通过as给表起别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 如果是单表查询 可以省略表名</span><br><span class="line">select id,name,gender from students;</span><br><span class="line"></span><br><span class="line">-- 表名.字段名</span><br><span class="line">select students.id,students.name,students.gender from students;</span><br><span class="line"></span><br><span class="line">-- 可以通过as给表起别名</span><br><span class="line">select s.id,s.name,s.gender from students as s;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>给表起名 在后期学习 自连接的时候，必须要对表起别名</p></blockquote><h4 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h4><blockquote><p>distinct 可以消除重复的行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select distinct 列1，... from 表名;</span><br><span class="line"># 查询班级中学生的性别</span><br><span class="line">select gender from students;</span><br><span class="line"># 需要去重</span><br><span class="line">select distinct gender from students;</span><br></pre></td></tr></table></figure><hr><h3 id="Where-条件"><a href="#Where-条件" class="headerlink" title="Where 条件"></a>Where 条件</h3><blockquote><p>对表中的数据进行条件限制 筛选  结果为true的行 会出现在结果中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- select * from 表名 where 条件;</span><br><span class="line"></span><br><span class="line">select * from students where id=1;</span><br></pre></td></tr></table></figure><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><blockquote><p>=  &gt;  &gt;=   &lt;   &lt;=   !=  &lt;&gt;</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 1. 查询编号大于3的学生</span><br><span class="line">select * from students where id &gt; 3;</span><br><span class="line"></span><br><span class="line"># 2.查询编号不大于4的学生</span><br><span class="line">select * from students where id &lt;= 4;</span><br><span class="line"></span><br><span class="line"># 3.查询姓名不是&quot;黄蓉&quot;的学生</span><br><span class="line">select * from students where name != &quot;黄蓉&quot;;</span><br><span class="line"></span><br><span class="line"># 4.查询没被删除的学生</span><br><span class="line">select *  from students where is_delete=0;</span><br></pre></td></tr></table></figure><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><blockquote><p>and  or  not</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 5.查询编号大于3的女同学</span><br><span class="line">select * from students where id&gt;3 and gender=2;</span><br><span class="line"></span><br><span class="line"># 查询编号小于4或没被删除的学生</span><br><span class="line">select * from students where id&lt;4 or is_delete=0;</span><br></pre></td></tr></table></figure><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><blockquote><p><strong>like</strong>   <strong>%</strong>任意多个字符  <strong>_</strong>任意一个字符</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 7.查询姓黄的学生</span><br><span class="line">select * from students where name like &#x27;黄%&#x27;;</span><br><span class="line"></span><br><span class="line"># 8.查询姓黄并且&quot;名&quot;是一个字的学生</span><br><span class="line">select * from students where name like &quot;黄_&quot;;</span><br><span class="line"></span><br><span class="line"># 9.查询姓黄或叫靖的学生</span><br><span class="line">select * from students where name like &quot;黄%&quot; or name like &#x27;%靖&#x27;;</span><br></pre></td></tr></table></figure><h5 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h5><blockquote><p> <strong>in</strong> 表示一个非连续的范围内</p><p>between ….and … 表示一个连续的范围</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 10.查询编号是1或者3或者8的学生</span><br><span class="line">select * from students where id in (1,3,8);</span><br><span class="line"></span><br><span class="line"># 11：查询编号为3至8的学生</span><br><span class="line">select * from students where id between 3 and 8;</span><br><span class="line"></span><br><span class="line"># 12. 查询编号是3至8的男生</span><br><span class="line">select * from students where (id between 3 and 8) and gender=1;</span><br></pre></td></tr></table></figure><h4 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 13：查询没有填写身高的学生</span><br><span class="line">select * from students where height is null;</span><br><span class="line"></span><br><span class="line"># 14：查询填写了身高的学生</span><br><span class="line">select * from students where height is not null;</span><br><span class="line"></span><br><span class="line"># 15：查询填写了身高的男生</span><br><span class="line">select * from students where height is not null and gender=1;</span><br></pre></td></tr></table></figure><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><blockquote><p>优先级由高到低: （）===&gt; not==&gt;比较运算符==&gt; 逻辑运算符（and先于or）</p></blockquote><hr><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote><p>select * from 表名 order by 列1 asc|desc [,列2 asc|desc,…]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 例1：查询未删除男生信息，按学号降序</span><br><span class="line">select * from students where is_delete=0 and gender=1 order by id desc;</span><br><span class="line"></span><br><span class="line"># 例2：查询未删除学生信息，按名称升序</span><br><span class="line">select * from students where is_delete=0 order by name;</span><br><span class="line"></span><br><span class="line"># 例3：显示所有的学生信息，先按照年龄从大--&gt;小排序，当年龄相同时 按照身高从高--&gt;矮排序</span><br><span class="line">select * from students order by age desc, height desc;</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><blockquote><p>语法： select  * from  表名 limit start=0,count</p><p>start起始位置 默认为0  count 获取的数量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询前3行男生信息</span><br><span class="line">select * from students where gender=1 limit 0,3;</span><br></pre></td></tr></table></figure><h5 id="关于分页的有趣的推导公式"><a href="#关于分页的有趣的推导公式" class="headerlink" title="关于分页的有趣的推导公式"></a>关于分页的有趣的推导公式</h5><blockquote><p>每页显示 m条数据 当前显示第n页  则 start的起始值为(n-1)*m</p><p>count为m</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 获取第n页数据的sql语句</span><br><span class="line">select * from students where is_delete=0 limit (n-1)*m,m;</span><br><span class="line"># 注意 这里的计算公式必须提前得到结果， 不能直接写在这里</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><blockquote><p>聚合函数 aggregation function 又称为 组函数</p></blockquote><h5 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询学生总数</span><br><span class="line">select count(*) from students;</span><br></pre></td></tr></table></figure><h5 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询女生的编号最大值</span><br><span class="line">select max(*) from students where gender=2;</span><br></pre></td></tr></table></figure><h5 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询未删除的学生最小编号</span><br><span class="line">select min(*) from students where is_delete=0;</span><br></pre></td></tr></table></figure><h5 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询男生的总年龄</span><br><span class="line">select sum(age) from students where gender=1;</span><br></pre></td></tr></table></figure><h5 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询未删除女生的编号平均值</span><br><span class="line">select avg(id) from students where gender=2 and is_delete=0;</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><blockquote><p>什么是分组 所谓分组就是将一个数据集划分成若干小区域 然后进行数据处理</p></blockquote><h5 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title="group by 分组"></a>group by 分组</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 按照性别进行分组 显示出性别 分为四组 男  女 中性 保密</span><br><span class="line">select gender from students group by gender;</span><br><span class="line"></span><br><span class="line">+--------+</span><br><span class="line">| gender |</span><br><span class="line">+--------+</span><br><span class="line">| 男     |</span><br><span class="line">| 女     |</span><br><span class="line">| 中性   |</span><br><span class="line">| 保密   |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><h5 id="group-by-group-concat"><a href="#group-by-group-concat" class="headerlink" title="group by + group_concat()"></a>group by + group_concat()</h5><blockquote><p>group_concat(字段名)根据分组结果，使用group_concat()来放置每一个分组中某字段的集合</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select gender,group_concat(name) from students group by gender;</span><br><span class="line">+--------+-----------------------------------------------------------+</span><br><span class="line">| gender | group_concat(name)                                        |</span><br><span class="line">+--------+-----------------------------------------------------------+</span><br><span class="line">| 男     | 彭于晏,刘德华,周杰伦,程坤,郭靖                                 |</span><br><span class="line">| 女     | 小明,小月月,黄蓉,王祖贤,刘亦菲,静香,周杰                        |</span><br><span class="line">| 中性   | 金星                                                       |</span><br><span class="line">| 保密   | 凤姐                                                       |</span><br><span class="line">+--------+-----------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">select gender,group_concat(id) from students group by gender;</span><br><span class="line">+--------+------------------+</span><br><span class="line">| gender | group_concat(id) |</span><br><span class="line">+--------+------------------+</span><br><span class="line">| 男     | 3,4,8,9,14       |</span><br><span class="line">| 女     | 1,2,5,7,10,12,13 |</span><br><span class="line">| 中性   | 11               |</span><br><span class="line">| 保密   | 6                |</span><br><span class="line">+--------+------------------+</span><br></pre></td></tr></table></figure><h5 id="group-by-聚合函数"><a href="#group-by-聚合函数" class="headerlink" title="group by + 聚合函数"></a>group by + 聚合函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">select gender,group_concat(age) from students group by gender;</span><br><span class="line">+--------+----------------------+</span><br><span class="line">| gender | group_concat(age)    |</span><br><span class="line">+--------+----------------------+</span><br><span class="line">| 男     | 29,59,36,27,12       |</span><br><span class="line">| 女     | 18,18,38,18,25,12,34 |</span><br><span class="line">| 中性   | 33                   |</span><br><span class="line">| 保密   | 28                   |</span><br><span class="line">+--------+----------------------+</span><br><span class="line">select gender,avg(age) from students group by gender;</span><br><span class="line">+--------+----------+</span><br><span class="line">| gender | avg(age) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 男     |  32.6000 |</span><br><span class="line">| 女     |  23.2857 |</span><br><span class="line">| 中性   |  33.0000 |</span><br><span class="line">| 保密   |  28.0000 |</span><br><span class="line">+--------+----------+</span><br><span class="line">select gender,count(*) from students group by gender;</span><br><span class="line">+--------+----------+</span><br><span class="line">| gender | count(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 男     |        5 |</span><br><span class="line">| 女     |        7 |</span><br><span class="line">| 中性   |        1 |</span><br><span class="line">| 保密   |        1 |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure><h5 id="group-by-having"><a href="#group-by-having" class="headerlink" title="group by + having"></a>group by + having</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select gender,count(*) from students group by gender having count(*) &gt;2</span><br><span class="line">+--------+----------+</span><br><span class="line">| gender | count(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 男     |        5 |</span><br><span class="line">| 女     |        7 |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure><h5 id="group-by-with-rollup"><a href="#group-by-with-rollup" class="headerlink" title="group by + with rollup"></a>group by + with rollup</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select gender,count(*) from students group by gender having count(*) &gt;2 with rollup;</span><br><span class="line">+--------+----------+</span><br><span class="line">| gender | count(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 男     |        5 </span><br><span class="line">| 女     |        7 |</span><br><span class="line">| 中性   |        1 |</span><br><span class="line">| 保密   |        1 |</span><br><span class="line">| NULL   |       14 |</span><br><span class="line">+--------+----------+</span><br><span class="line">select gender,group_concat(age) from students group by gender with rollup;</span><br><span class="line">| gender | group_concat(age)                         |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| 男     | 29,59,36,27,12                            |</span><br><span class="line">| 女     | 18,18,38,18,25,12,34                      |</span><br><span class="line">| 中性   | 33                                        |</span><br><span class="line">| 保密   | 28                                        |</span><br><span class="line">| NULL   | 29,59,36,27,12,18,18,38,18,25,12,34,33,28 |</span><br><span class="line">+--------+-------------------------------------------+</span><br></pre></td></tr></table></figure><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><blockquote><p>mysql支持三种类型的连接查询：</p><ol><li><p>内连接查询：查询的结果为两个表匹配到的数据</p><p><img src="/media/images/pic/Snipaste_2018-09-18_16-35-43的副本.png" alt="Snipaste_2018-09-18_16-35-43的副本"></p></li><li><p>右连接查询 查询的结果为两个表匹配到的数据和右表特有的数据，对于左表中不存在的数据使用null填充</p><p><img src="/media/images/pic/Snipaste_2018-09-18_19-24-46.png" alt="Snipaste_2018-09-18_19-24-46"></p></li><li><p>左连接查询 查询的结果为两个表匹配到的数据和左表特有的数据，对于右表中不存在的数据使用null填充</p><p><img src="/media/images/pic/Snipaste_2018-09-18_19-25-00.png" alt="Snipaste_2018-09-18_19-25-00"></p></li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 例1：使用内连接查询班级表与学生表</span><br><span class="line">select * from students inner join classes on students.cls_id = classes.id;</span><br><span class="line"></span><br><span class="line">-- 例2：使用左连接查询班级表与学生表</span><br><span class="line">select * from students as s left join classes as c on s.cls_id = c.id;</span><br><span class="line"></span><br><span class="line">--  例3：使用右连接查询班级表与学生表</span><br><span class="line">select * from students as s right join classes as c on s.cls_id=c.id;</span><br></pre></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><blockquote><p>以设计表结构来存储 全国所有的省份和全国所有的市</p></blockquote><p><strong>数据表内的数据间关联查询 称为自连接</strong></p><p><strong>定义表areas，结构如下</strong></p><ul><li>id</li><li>atitle</li><li>pid</li></ul><h5 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h5><ol><li><p>创建areas表的语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table areas (</span><br><span class="line">aid int primary key,</span><br><span class="line">    atitle varchar(20),</span><br><span class="line">    pid int</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>从sql文件中导入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source areas.sql;</span><br></pre></td></tr></table></figure></li></ol><h5 id="查询用法"><a href="#查询用法" class="headerlink" title="查询用法"></a>查询用法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 查询一共多少个省</span><br><span class="line">select count(*) from areas where pid is null;</span><br><span class="line"></span><br><span class="line">-- 例1：查询省的名称为“山西省”的所有城市</span><br><span class="line">select city.* from areas as city</span><br><span class="line">inner join areas as province on city.pid=province.aid</span><br><span class="line">where province.atitle=&#x27;山西省&#x27;;</span><br><span class="line"></span><br><span class="line">-- 例2：查询市的名称为“长治市”的所有区县</span><br><span class="line">select q.* from areas as q inner join areas as c on c.aid = q.pid where c.atitle=&quot;长治市&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 广东省 深圳市 宝安区</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>在一个 select 语句中,嵌入了另外一个 select 语句, 那么被嵌入的 select 语句称之为子查询语句,外部那个select语句则称为主查询.</p><p><strong>分类</strong></p><ul><li>标量子查询: 子查询返回的结果是一个数据(一行一列)</li><li>列子查询: 返回的结果是一列(一列多行)</li><li>行子查询: 返回的结果是一行(一行多列)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询班级大于平均身高的学生</span><br><span class="line">select * from students where height &gt; (select avg(height) from  students);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询还有学生在班的所有班级名字</span><br><span class="line">-- -- 找出学生表中所有的班级 id</span><br><span class="line">-- -- 找出班级表中对应的名字</span><br><span class="line">select name from classes where id in (select cls_id from students);</span><br><span class="line">select name from students where cls_id in (select id from classes);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需求: 查找班级年龄最大,身高最高的学生</span><br><span class="line">行元素: 将多个字段合成一个行元素,在行级子查询中会使用到行元素</span><br><span class="line">select * from students where (height,age) = (select max(height),max(age) from students);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础01</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/08.%E6%95%B0%E6%8D%AE%E5%BA%9301%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/08.%E6%95%B0%E6%8D%AE%E5%BA%9301%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h3><ol><li>数据库四天<ol><li>基本概念</li><li>sql查询命令</li><li>数据库与python交互</li><li>高级概念</li></ol></li></ol><hr><h4 id="1-数据库的概念"><a href="#1-数据库的概念" class="headerlink" title="1.数据库的概念"></a>1.数据库的概念</h4><blockquote><p>数据库就是以一定格式进行组织的数据的集合</p></blockquote><p><strong>数据库是用户计算机上 一些具有特殊格式的数据文件的集合</strong></p><p><img src="/media/images/pic/Snipaste_2018-09-17_09-08-28.png" alt="Snipaste_2018-09-17_09-08-28"></p><blockquote><p><em>数据库中的图片只是存储img.url 信息，不擅长存储图片信息  后期可以使用图片服务器做存储</em></p></blockquote><p><img src="/media/images/pic/Snipaste_2018-09-17_14-47-39.png" alt="Snipaste_2018-09-17_14-47-39"></p><p>类比 excel表格，其实也可以看成一个数据库</p><p><img src="/media/images/pic/Snipaste_2018-09-17_09-32-20.png" alt="Snipaste_2018-09-17_09-32-20"></p><p><strong>数据库有多个数据表组成的，数据表才是真正数据的存储位置</strong></p><ol><li><strong>字段</strong> 存储同一类信息的一列</li><li><strong>记录</strong> 用来存储某一个具体事物的详细信息的一行</li><li>能够标识唯一的一行记录的特殊字段为<strong>主键</strong> （特点：不可重复，不可为空）</li><li><strong>关系型数据库</strong>  数据库中表可以发生响应的关联</li><li><strong>数据库</strong>：数据表的集合</li></ol><h5 id="关系型数据库的作用"><a href="#关系型数据库的作用" class="headerlink" title="关系型数据库的作用"></a>关系型数据库的作用</h5><ol><li>持久化存储</li><li>读写速度极高</li><li>保证数据的有效性</li><li>对程序支持性非常好，容易扩展</li></ol><h5 id="关系型数据库的主要产品"><a href="#关系型数据库的主要产品" class="headerlink" title="关系型数据库的主要产品"></a>关系型数据库的主要产品</h5><ul><li><p>oracle 银行电信等项目</p></li><li><p>sqlite 轻量级数据库</p></li><li><p>ms sql server 在微软的项目中使用</p></li><li><p>mysql  web时代使用最广泛的关系型数据库</p><p>附带网址: <a href="http://www.mysql.com">http://www.mysql.com</a></p></li></ul><h4 id="2-数据库管理系统"><a href="#2-数据库管理系统" class="headerlink" title="2.数据库管理系统"></a>2.数据库管理系统</h4><p><img src="/media/images/pic/Snipaste_2018-09-17_09-29-03.png" alt="Snipaste_2018-09-17_09-29-03"></p><ol><li><p>关系型数据库RDBMS  <strong>本质上使用一张二维表来表示关系</strong></p></li><li><p>sql语句的主要划分：</p><ol><li>DQL：查询语言 用于对数据进行查询  如select</li><li>DML：数据库操作语言 对数据进行增加 修改 删除 如insert， update， delete</li><li>DDL 数据定义语言  进行数据库 表的管理等</li></ol></li><li><p>查找进程 ps -aux | grep mysql</p><p>ajx 不会显示用户名</p></li></ol><h5 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h5><ol><li><p>安装mysql到Linux服务器中 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line"><span class="comment"># 安装客户端</span></span><br><span class="line">sudo apt-get install mysql-client</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>开启服务和停止服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br><span class="line">sudo service mysql stop</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></li><li><p>查看配置文件  vi  mysqld.cnf</p><p>目录路径：/etc/mysql/mysql.conf.d/mysqld.cnf</p></li></ol><p>里面有端口port 以及记录日志错误  datadir数据库目录</p><hr><h4 id="客户端的安装"><a href="#客户端的安装" class="headerlink" title="客户端的安装"></a>客户端的安装</h4><blockquote><p>客户端为开发人员与dba使用，使用socket方式与服务端通信，常用的有图形navicat  以及命令行mysql</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux 下安装navicat</span></span><br><span class="line">tar zxcf navicat112_mysql_cs_x64.tar.gz</span><br><span class="line"><span class="comment"># 解压之后 进入目录 运行如下命令</span></span><br><span class="line">./start_navicat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题1 中文乱码 </span></span><br><span class="line"><span class="comment"># 解决 打开start_navicat 文件</span></span><br><span class="line">将export LANG=<span class="string">&quot;en_US.UTF-8&quot;</span>改为export LANG=<span class="string">&quot;zh-cn.UTF-8&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题2 试用期 删除用户目录下的 .navicat64目录</span></span><br><span class="line">cd ~</span><br><span class="line">rm -rf .navicat64</span><br></pre></td></tr></table></figure><h5 id="命令行客户端"><a href="#命令行客户端" class="headerlink" title="命令行客户端"></a>命令行客户端</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行终端中 输入以下信息</span></span><br><span class="line">sudo apt-get install mysql-client</span><br><span class="line"><span class="comment"># 详细的连接命令可以查看帮助文档</span></span><br><span class="line">mysql --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 最基本的连接命令</span></span><br><span class="line">mysql -uroot -pmysql  <span class="comment"># 连接成功后可进入mysql交互模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过ctrl+d 退出</span></span><br><span class="line">quit 或者exit</span><br></pre></td></tr></table></figure><hr><h3 id="数据的完整性"><a href="#数据的完整性" class="headerlink" title="数据的完整性"></a>数据的完整性</h3><h4 id="1-数据的类型"><a href="#1-数据的类型" class="headerlink" title="1.数据的类型"></a>1.数据的类型</h4><p><strong>整数</strong></p><ul><li><p>int类型 四个字节</p></li><li><p>bit 八分之一个字节</p></li></ul><p><strong>小数</strong></p><ul><li>decimal 小数 decimal(5,2)能存5位 小数为2位</li></ul><p><strong>字符串</strong></p><ul><li><p>char(3) “ab”==&gt; “ab  “</p></li><li><p>varchar(3) “ab” ==&gt; “ab”</p></li><li><p>text 大文本类型 一般字节超过4千 比如技术博客</p></li></ul><p><strong>日期类型</strong> </p><ul><li>date</li><li>time</li><li>datetime</li></ul><p><strong>枚举类型</strong></p><ul><li>enum枚举类型  gender(“男”, “女”)</li></ul><blockquote><p>对于图片视频以及音频的文件，不存储在数据库中， 而是上传到某个服务器上，数据库中保存资源的路径即可</p></blockquote><h4 id="2-数据的约束"><a href="#2-数据的约束" class="headerlink" title="2.数据的约束"></a>2.数据的约束</h4><p><strong>常见约束</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主键 不可重复 唯一标识一行的特殊字段  不可为空  </span></span><br><span class="line">primary key</span><br><span class="line"><span class="comment"># 非空  字段不能为空</span></span><br><span class="line"><span class="keyword">not</span> null</span><br><span class="line"><span class="comment"># 不允许重复 </span></span><br><span class="line">unique</span><br><span class="line"><span class="comment"># 默认</span></span><br><span class="line">default 不填写此字段 （null <span class="number">0</span>也可以）会使用默认值 如果需要写默认值 则必须使用default</span><br><span class="line"><span class="comment"># 对关系字段进行约束  ？？？</span></span><br><span class="line">foreign key </span><br></pre></td></tr></table></figure><h4 id="3-数据类型的附录表"><a href="#3-数据类型的附录表" class="headerlink" title="3.数据类型的附录表"></a>3.数据类型的附录表</h4><p><img src="/media/images/pic/Snipaste_2018-09-17_16-08-40.png" alt="Snipaste_2018-09-17_16-08-40"></p><p><img src="/media/images/pic/Snipaste_2018-09-17_16-08-53.png" alt="Snipaste_2018-09-17_16-08-53"></p><p><img src="/media/images/pic/Snipaste_2018-09-17_16-09-03.png" alt="Snipaste_2018-09-17_16-09-03"></p><blockquote><p>thinking:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 含义：设置一个字段是id  必须是整型 无符号 不能为空 唯一的</span></span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> unsigned <span class="keyword">not</span> null unique </span><br></pre></td></tr></table></figure></blockquote><hr><h4 id="Navicat图形化界面的操作"><a href="#Navicat图形化界面的操作" class="headerlink" title="Navicat图形化界面的操作"></a>Navicat图形化界面的操作</h4><p><strong>pass</strong></p><h4 id="命令行客户端的操作"><a href="#命令行客户端的操作" class="headerlink" title="命令行客户端的操作"></a>命令行客户端的操作</h4><h5 id="数据库的操作-连接数据库-对数据库-表结构-表数据进行操作"><a href="#数据库的操作-连接数据库-对数据库-表结构-表数据进行操作" class="headerlink" title="数据库的操作 (连接数据库  对数据库 表结构 表数据进行操作)"></a>数据库的操作 (连接数据库  对数据库 表结构 表数据进行操作)</h5><p><strong>数据基本操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.连接数据库</span></span><br><span class="line">mysql -uroot -pmysql</span><br><span class="line"><span class="comment"># 2.不显示密码</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 3.退出数据库</span></span><br><span class="line">exit/quit/ctrl + d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/media/images/pic/Snipaste_2018-09-17_16-22-07.png" alt="Snipaste_2018-09-17_16-22-07"></p><p><strong>数据登录之后的查看操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.显示数据库版本</span></span><br><span class="line">select  version();</span><br><span class="line"><span class="comment"># 2.显示时间</span></span><br><span class="line">select  now();</span><br></pre></td></tr></table></figure><p><strong>使用数据库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.使用某数据库 use 数据库名;</span></span><br><span class="line">use python17</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些常用的快捷键</span></span><br><span class="line">ctrl+a 快速定位开头  ctrl+e 回到结尾</span><br><span class="line">ctrl+c + 回车   结束当前语句</span><br><span class="line">ctrl+L  清屏</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库 要指定字符集 charset=utf8;</span></span><br><span class="line">create database  zag charset=utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>查看数据库的操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看当前使用的数据库</span></span><br><span class="line">select database();</span><br><span class="line"><span class="comment"># 2.查看所有的数据库</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment"># 3.查看创建数据库的语句</span></span><br><span class="line">show create database zag;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>删除数据库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除数据库</span></span><br><span class="line"><span class="comment"># drop  database  数据库名</span></span><br></pre></td></tr></table></figure><h4 id="数据表的操作"><a href="#数据表的操作" class="headerlink" title="数据表的操作"></a>数据表的操作</h4><p><strong>查看数据表的操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看当前所有数据表</span></span><br><span class="line">show tables;</span><br><span class="line"><span class="comment"># 2.查看表结构</span></span><br><span class="line">desc 表名</span><br><span class="line"><span class="comment"># 3.查看表的字符集</span></span><br><span class="line">show create table 表名；</span><br><span class="line">ENGINE= InnoDB  (mysql的引擎)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  int(10) 10表示整型表示方式用10bit去表示</span></span><br></pre></td></tr></table></figure><p><strong>创建数据表的语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    <span class="comment"># 整型  无符号  主键    不为空    自动增加</span></span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> unsigned primary key <span class="keyword">not</span> null auto_increment，</span><br><span class="line">    name varchar(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p><strong>创建班级表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table classes (</span><br><span class="line">id int unsigned auto_increment primary key not null,</span><br><span class="line">    name varchar(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>创建学生信息表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 字段名称  数据类型  可选的约束条件</span><br><span class="line">create table students (  </span><br><span class="line">    id int unsigned not null auto_increment primary key,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    age int unsigned,</span><br><span class="line">    high decimal(5, 2)</span><br><span class="line">    gender enum(&#x27;男&#x27;, &#x27;女&#x27;, &#x27;保密&#x27;) default&#x27;保密&#x27;，</span><br><span class="line">    cls_id int </span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p><strong>修改表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 1. 添加字段：</span><br><span class="line">   alter  table 表名 add  列名 类型 约束条件</span><br><span class="line">   alter table  students  add  birthday  datetime</span><br><span class="line">   alter table  classes add jixiangwu  varchar(30)</span><br><span class="line"># 2. 修改字段： 不重命名</span><br><span class="line">   alter table 表名  modify  列名  类名以及约束</span><br><span class="line">   alter table students modify jixiangwu varchar(30)</span><br><span class="line"># 3. 修改字段： 重命令版</span><br><span class="line">   alter  table 表名 change  原名  新名 类型以及约束</span><br><span class="line">   alter table classes change jixiangwu  mascot varchar(20)</span><br><span class="line"># 4. 修改表—---删除字段</span><br><span class="line">   alter  table  表名  drop  列名</span><br><span class="line">   alter table classes drop mascot</span><br><span class="line"># 5.删除表</span><br><span class="line">drop table 表名；</span><br><span class="line"># 6.删除数据库</span><br><span class="line">drop database  数据库；</span><br><span class="line"># 更改数据表的名称</span><br><span class="line">rename table 旧表名 to 新表名；</span><br></pre></td></tr></table></figure><h4 id="增删改查（crud）"><a href="#增删改查（crud）" class="headerlink" title="增删改查（crud）"></a>增删改查（crud）</h4><ol><li><p>增加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(20)      | YES  |     | NULL    |                |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>全列插入,部分插入 ，多行插入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert [into] 表名 values(……)</span><br><span class="line"><span class="comment"># 主键字段 可以用 0  null  default  来占位</span></span><br><span class="line">向classes表中插入 一个班级</span><br><span class="line">insert  into classes value(<span class="number">1</span>,<span class="string">&#x27;python17&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  +--------+-------------------------------------+------+-----+---------+----------------+</span><br><span class="line">| Field  | <span class="type">Type</span>                                | Null | Key | Default | Extra          |</span><br><span class="line">+--------+-------------------------------------+------+-----+---------+----------------+</span><br><span class="line">| <span class="built_in">id</span>     | <span class="built_in">int</span>(<span class="number">10</span>) unsigned                    | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name   | varchar(<span class="number">20</span>)                         | YES  |     | NULL    |                |</span><br><span class="line">| age    | <span class="built_in">int</span>(<span class="number">10</span>) unsigned                    | YES  |     | NULL    |                |</span><br><span class="line">| high   | decimal(<span class="number">5</span>,<span class="number">2</span>)                        | YES  |     | NULL    |                |</span><br><span class="line">| gender | enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;中性&#x27;</span>,<span class="string">&#x27;保密&#x27;</span>)       | YES  |     | 保密    |                |</span><br><span class="line">| cls_id | <span class="built_in">int</span>(<span class="number">11</span>)                             | YES  |     | NULL    |                |</span><br><span class="line">+--------+-------------------------------------+------+-----+---------+----------------+      </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全列插入    ID    name  age  high  gender  cls_id</span></span><br><span class="line">insert into students values(<span class="number">1</span>,<span class="string">&quot;班主任&quot;</span>, <span class="number">18</span>, <span class="number">166.66</span>, <span class="number">2</span>, <span class="number">110</span>);</span><br><span class="line"><span class="comment"># 部分插入  </span></span><br><span class="line">insert into students(name,high,gender) values(<span class="string">&quot;吴彦祖&quot;</span>, <span class="number">188.88</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment"># 多行插入</span></span><br><span class="line">insert into students values(null, <span class="string">&quot;老谢&quot;</span>, <span class="number">28</span>, <span class="number">188.88</span>,<span class="number">1</span>,<span class="number">110</span>),(null,<span class="string">&quot;老马&quot;</span>,<span class="number">17</span>,<span class="number">170.00</span>, default, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>修改数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># update 表名 set 列1=值1，列2=值2 ... where 条件</span><br><span class="line">update students set high=170.00;  #  全部会被修改</span><br><span class="line"># 按条件修改</span><br><span class="line">update students set high=188.88 where id=2;</span><br></pre></td></tr></table></figure></li><li><p>查询基本使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有列</span><br><span class="line">select * from 表名</span><br><span class="line">select * from students;</span><br><span class="line"># 定条件查询</span><br><span class="line">select * from students where id=2;</span><br><span class="line">#查询指定列</span><br><span class="line">select name,gender from students;</span><br><span class="line"># 可以使用as作为列或者指定别名</span><br><span class="line">select name as &quot;姓名&quot;,gender as &quot;性别&quot; from students;</span><br><span class="line"># 字段的顺序</span><br><span class="line">select gender=&quot;性别&quot;,name=&quot;姓名&quot; from students;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 物理删除</span><br><span class="line">delete from 表名 where 条件</span><br><span class="line"># 逻辑删除 用一个字段来表示 这条信息是否已经不能用了</span><br><span class="line">给students添加一个is_del 字段 bit类型</span><br></pre></td></tr></table></figure></li><li><p>数据库备份与恢复（了解）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p zagcool &gt; zagcool.sql;</span><br><span class="line"></span><br><span class="line">mysql -uroot -p 新数据库名  &lt; zagcool.sql</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式以及http服务器</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/07.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8Ahttp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/07.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8Ahttp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>正则表达式</p><pre><code>re高级函数 find  findall  sub  search的作用</code></pre><p>http协议</p><h4 id="一-匹配分组"><a href="#一-匹配分组" class="headerlink" title="一. 匹配分组"></a>一. 匹配分组</h4><ol><li><p>|  或的意思 </p><p>re = /^\d?\d$|^100$/ </p></li><li><p>(ab) 将括号中字符作为一个分组 括号中的内容是一个整体去匹配</p><p>\w{4,20}@(163|qq|126|sina)\.(com|cn|net|org|edu){1,2}</p></li><li><p>提取电话号码或区号</p><p>“010-1234567”</p><p>re = “^(\d{3,4})-(\d{7})$”</p></li></ol><ol><li><p>“&lt;<sup><a href="#fn_>*\" id="reffn_>*\">>*\</a></sup>&gt;”   ???</p></li><li><p>\1 表示引用第一组正则 重复分组</p><p>re.match(“&lt;([\a-zA-Z0-9]+)&gt;.*&lt;/\1&gt;”)</p></li><li><p>给分组起别名 (?P\<name>) ===&gt;(?P=name)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.match(<span class="string">r&#x27;&lt;(\w*)&gt;&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1&gt;&#x27;</span>, <span class="string">&#x27;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;&#x27;</span>)</span><br><span class="line">ret = re.match(<span class="string">r&#x27;&lt;(?P&lt;name1&gt;\w*)&gt;&lt;(?P&lt;name2&gt;\w*)&gt;.*&lt;/?P=name2&gt;&lt;/?P=name1&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>一些方法</p><ol><li><p>match的使用</p><p>从需要匹配的字符串中的开始位置进行匹配 如果匹配成功返回match对象，否则返回None</p></li><li><p>search的使用</p><p>在其中进行查找匹配 只返回第一次匹配的结果</p><p>start() 返回开始第一次匹配成功的位置</p></li><li><p>findall 查找所有</p><p>返回的是列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.findall(<span class="string">r&#x27;\d+&#x27;</span>, <span class="string">&quot;阅读次数9999次，转发次数8888, 评论次数:3次&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">[<span class="string">&quot;9999&quot;</span>, <span class="string">&#x27;8888&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>sub  替换所有</p><p>返回值是替换后的字符串</p><p>用法：re.sub(正则，新的内容，要替换的内容字符串)</p><p><code>re.sub(&quot;&lt;\[^&gt;*]&gt;|&amp;nbsp| |\n&quot;,html_str)</code></p><p>科大讯飞的分词技术 接口有吗</p></li><li><p>split 按照正则进行分割</p><p>把字符串按照正则进行分割，返回值是一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(<span class="string">&quot;:|\s&quot;</span>, <span class="string">&quot;email:info@163.com zhongshan lisi 123&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>贪婪模式和非贪婪模式</p><p>贪婪默认  转为非贪婪 用？号</p><p><code>src=\&quot;(.*?)\&quot;</code></p><p>通过search方法 通过group(1)</p></li><li><p>r的作用：只针对\起作用，让其不再让其有转义作用</p></li></ol></li></ol><h4 id="IP-和域名"><a href="#IP-和域名" class="headerlink" title="IP 和域名"></a>IP 和域名</h4><h5 id="1-域名概念"><a href="#1-域名概念" class="headerlink" title="1.域名概念"></a>1.域名概念</h5><p>Domain Name</p><h5 id="2-为什么要有域名"><a href="#2-为什么要有域名" class="headerlink" title="2.为什么要有域名"></a>2.为什么要有域名</h5><pre><code>域名构成：由字母数字 中划线（-） 长度不超过255个字符</code></pre><h5 id="3-DNS服务器"><a href="#3-DNS服务器" class="headerlink" title="3.DNS服务器"></a>3.DNS服务器</h5><pre><code>本地DNS：是ip地址和域名的映射表</code></pre><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p><img src="/media/images/pic/QQ20180914-154502@2x.png" alt="QQ20180914-154502@2x"></p><h5 id="request协议"><a href="#request协议" class="headerlink" title="- request协议"></a>- request协议</h5><ol><li>请求行<ol><li>GET 请求方式 （此方式可以省略请求体）</li><li>/  请求服务器资源路径</li><li>HTTP/1.1 （http协议以及版本)</li></ol></li><li>请求头</li><li>空行  分割请求头和请求体</li><li>请求体</li></ol><p>Accept-Encoding:浏览器在协议层支持的数据压缩格式 gzip  deflate</p><p>Accept-charset ： 浏览器的支持的字符集</p><p>referer：前一次的加载的路径 判断站内和站外访问</p><p>Accept-Language:支持语言 以及相应权重</p><p>Cookie：浏览器缓存</p><p>user-agent:用户代理 爬虫重点考虑</p><h5 id="response协议"><a href="#response协议" class="headerlink" title="- response协议"></a>- response协议</h5><ol><li>响应行（状态行）<ol><li>协议版本号</li><li>状态码</li><li>状态描述</li></ol></li></ol><p><strong>注意:</strong></p><p>状态码和状态描述是一一对应的！</p><pre><code>状态代码有三种数字组成，第一个数字定义了响应的类别 且有五种可能取值：</code></pre><ul><li>1XX： 指示信息 表示请求已接受 继续处理</li><li>2XX：成功—表示请求已被成功接收 理解</li><li>3XX：重定向—要完成请求必须进行更进一步的操作</li><li>4XX：客户端错误—请求有语法错误或请求无法实现</li><li>5XX：服务器端错误—未能实现合法的请求</li></ul><p><img src="/media/images/pic/QQ20180914-154315@2x.png" alt="QQ20180914-154315@2x"></p><ol><li>响应头<ol><li>server  nginx </li><li>Date  访问文件的响应时间</li><li>last-modified  访问文件的最后一次修改时间</li><li>Content-Length 响应的字节数</li></ol></li><li>空行</li><li>响应主体（响应数据）Response中查看</li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img src="/media/images/pic/QQ20180914-154805@2x.png" alt="QQ20180914-154805@2x"></p><p><img src="/media/images/pic/QQ20180914-154745@2x.png" alt="QQ20180914-154745@2x"></p><p>for example：</p><p><strong>TCP网络助手与浏览器端模拟http协议通信</strong></p><h5 id="长连接与短链接"><a href="#长连接与短链接" class="headerlink" title="长连接与短链接"></a>长连接与短链接</h5><ol><li><p>在HTTP/1.0 默认使用短连接  <strong>浏览器和服务器每进行一次http操作，就建立一次连接，但任务结束就中断连接</strong>，如果客户端浏览器访问的某个html或其他类型的web页中包含其他web资源，如js文件，图像文件，css文件，当浏览器每遇到这样一个web资源，就会建立一个html会话</p></li><li><p>http1.1起 默认使用长连接 使用长连接的http协议，会在响应头有加入这行代码</p><p><code>Connection:keep-alive</code></p><p>每次连接都会有三次握手 每次断开和释放 就需要四次挥手，所以消耗资源和时间较多</p><p><strong>短连接 资源占用少 高并发的时候响应慢</strong></p><p><strong>长连接 建立后的速率高 高并发的时候服务器带宽占用过大，有可能无法建立连接  服务不可用</strong></p></li></ol><h5 id="模拟浏览器实现"><a href="#模拟浏览器实现" class="headerlink" title="模拟浏览器实现"></a>模拟浏览器实现</h5><h4 id="web静态服务器"><a href="#web静态服务器" class="headerlink" title="web静态服务器"></a>web静态服务器</h4><ul><li>返回指定页面</li><li>协程实现多任务服务器</li><li>面向对象封装</li><li>给服务器加上命令行参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器，生成器，协程以及应用</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/06.%E8%BF%AD%E4%BB%A3%E5%99%A8,%E7%94%9F%E6%88%90%E5%99%A8,%E5%8D%8F%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/06.%E8%BF%AD%E4%BB%A3%E5%99%A8,%E7%94%9F%E6%88%90%E5%99%A8,%E5%8D%8F%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><blockquote><p>迭代是访问集合元素的一种方式，迭代器是一个可以记住遍历位置的对象，迭代器只能往前不能后退</p></blockquote><h4 id="1-可迭代对象"><a href="#1-可迭代对象" class="headerlink" title="1.可迭代对象"></a>1.可迭代对象</h4><blockquote><p>向list  tuple  str等类型数据 可以使用for ..in去循环依次拿到数据，我们可以理解这些数据本身内部会有迭代方法 返回一个迭代器对象，供遍历调用（通过next方法去实现）</p></blockquote><p><img src="/media/images/pic/Snipaste_2018-09-23_08-07-24.png" alt="Snipaste_2018-09-23_08-07-24"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用各个迭代对象进行迭代测试</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="string">&#x27;hello&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> &#123;<span class="string">&quot;a&quot;</span>:<span class="number">100</span>,<span class="string">&quot;b&quot;</span>:<span class="number">200</span>&#125;:</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="2-如何判断一个对象是否可以迭代"><a href="#2-如何判断一个对象是否可以迭代" class="headerlink" title="2.如何判断一个对象是否可以迭代"></a>2.如何判断一个对象是否可以迭代</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Tterable</span><br><span class="line"><span class="comment"># 列表 字符串  字典 数字</span></span><br><span class="line"><span class="comment"># 用 isinstance() 判断一个对象是否是iterable对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],Iterable))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>((<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>),Iterable))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&quot;hello&quot;</span>,Iterable))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(&#123;&#125;,Iterable))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">100</span>,Iterable))  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>():</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">c1 = MyClass()</span><br><span class="line">result = <span class="built_in">isinstance</span>(c1, Iterable)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h4 id="可迭代对象-1"><a href="#可迭代对象-1" class="headerlink" title="可迭代对象"></a>可迭代对象</h4><h5 id="1-可迭代对象的本质"><a href="#1-可迭代对象的本质" class="headerlink" title="1.可迭代对象的本质"></a>1.可迭代对象的本质</h5><blockquote><p>在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据</p></blockquote><h5 id="2-iter-函数-与-next-函数"><a href="#2-iter-函数-与-next-函数" class="headerlink" title="2.iter()函数 与 next() 函数"></a>2.iter()函数 与 next() 函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">li_iter = <span class="built_in">iter</span>(li)</span><br><span class="line"><span class="built_in">next</span>(li)</span><br><span class="line"><span class="built_in">next</span>(li)</span><br><span class="line"><span class="built_in">next</span>(li)</span><br><span class="line"><span class="built_in">next</span>(li)  <span class="comment"># StopIteration 抛出异常</span></span><br></pre></td></tr></table></figure><p><img src="/media/images/pic/Snipaste_2018-09-23_10-15-10.png" alt="Snipaste_2018-09-23_10-15-10"></p><h5 id="3-如何判断一个对象是否是迭代器"><a href="#3-如何判断一个对象是否是迭代器" class="headerlink" title="3.如何判断一个对象是否是迭代器"></a>3.如何判断一个对象是否是迭代器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>([],Iterator)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">iter</span>([]),Iterator)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="迭代器应用：自定义列表"><a href="#迭代器应用：自定义列表" class="headerlink" title="迭代器应用：自定义列表"></a>迭代器应用：自定义列表</h4><p><img src="/media/images/pic/Snipaste_2018-09-23_14-44-19.png" alt="Snipaste_2018-09-23_14-44-19"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="comment"># 自定义列表类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>():</span></span><br><span class="line">    <span class="comment"># 定义构造方法  用于初始化实例属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 定义一个实例属性item 并初始化值为空</span></span><br><span class="line">        self.item = <span class="built_in">list</span>()</span><br><span class="line">    <span class="comment"># 添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addItem</span>(<span class="params">self,data</span>):</span></span><br><span class="line">        <span class="comment"># 把数据添加到实例属性中</span></span><br><span class="line">        self.item.append(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 返回迭代器对象</span></span><br><span class="line">        <span class="keyword">return</span> MyListIterator(self.item)</span><br><span class="line"><span class="comment"># 自定义迭代器类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyListIterator</span>():</span></span><br><span class="line">    <span class="comment"># 定义构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,item</span>):</span></span><br><span class="line">        <span class="comment"># 将传入的数据到当前类的实例属性</span></span><br><span class="line">        self.item = item</span><br><span class="line">    <span class="comment"># 初始化迭代器默认下标</span></span><br><span class="line">        self.current_index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 必须含有方法一： __iter__()    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="comment"># 必须含有方法二：__next__()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment"># 判断迭代器是否到了列表末尾</span></span><br><span class="line">        <span class="keyword">if</span> self.current_index &lt; <span class="built_in">len</span>(self.item):</span><br><span class="line">            <span class="comment"># 获取列表元素值</span></span><br><span class="line">            data1 = self.item[self.current_index]</span><br><span class="line">            <span class="comment"># 让列表下标值 +1</span></span><br><span class="line">            self.current_index +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> data1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 抛出异常</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mylist = MyList()</span><br><span class="line">    mylist.addItem(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">    mylist.addItem(<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line">    mylist.addItem(<span class="string">&#x27;王五&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    result = <span class="built_in">isinstance</span>(mylist, Iterable)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    </span><br><span class="line">    mylistInterator = <span class="built_in">iter</span>(mylist)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(mylistInterator))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(mylistInterator))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(mylistInterator))</span><br><span class="line">    <span class="comment"># print(next(mylistInterator))</span></span><br><span class="line">    <span class="comment"># 遍历自定义列表对象</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> mylist:</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><h5 id="for…in…循环的本质"><a href="#for…in…循环的本质" class="headerlink" title="for…in…循环的本质"></a>for…in…循环的本质</h5><blockquote><p>for item in Iterable循环的本质 是先通过iter() 获取可迭代对象Iterable的迭代器</p></blockquote><p><strong>原理</strong>:</p><ol><li>通过for循环获取迭代器</li><li>通过迭代器的next方法获取每一个数据</li><li>遇到StopIteration的异常后结束循环—处理异常</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        self.num = num</span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">        self.current_index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_index &lt; self.num:</span><br><span class="line">            result = self.a</span><br><span class="line">            self.a, self.b = self.b, self.a + self.b</span><br><span class="line">            self.current_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">fib = Fibonacci(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fibIterator = iter(fib)</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fib:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 除了for循环可接收可迭代对象  list  和 tuple也可以</span></span><br><span class="line">mylist = <span class="built_in">list</span>(Fibonacci(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line">mytuple = <span class="built_in">tuple</span>(Fibonacci(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(mytuple)</span><br></pre></td></tr></table></figure><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><blockquote><p>可以理解 生成器是迭代器的一种简洁的实现方式</p></blockquote><p><strong>创建生成器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l = [x*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="comment"># [0,2,4,6,8]</span></span><br><span class="line">l = (x*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x76f6v4fdb0&gt;  生成器</span></span><br><span class="line"><span class="comment"># 可以使用next方法手动获取每一个数据</span></span><br><span class="line"><span class="built_in">next</span>(l)</span><br><span class="line"><span class="built_in">next</span>(l)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 也可以通过list或者tuple来获取迭代器 进而内部遍历实现获取每一个数据</span></span><br><span class="line"><span class="built_in">list</span>(l)</span><br><span class="line"><span class="built_in">tuple</span>(l)</span><br></pre></td></tr></table></figure><h5 id="创建生成器的方法2"><a href="#创建生成器的方法2" class="headerlink" title="创建生成器的方法2"></a>创建生成器的方法2</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    current_index = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> current_index &lt; n:</span><br><span class="line">        result = a</span><br><span class="line">        a,b = b,a</span><br><span class="line">        current_index += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=======2=========&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> result</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;==========3======&#x27;</span>)</span><br><span class="line">fib = fibonacci(<span class="number">5</span>)</span><br><span class="line">value = <span class="built_in">next</span>(fib)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line">value = <span class="built_in">next</span>(fib)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"><span class="comment"># 使用yield关键字的函数不再是函数，而是生成器</span></span><br><span class="line"><span class="comment"># yield关键字有两点作用：</span></span><br><span class="line"><span class="comment"># 1. 保存当前的运行状态 然后暂停执行 即将生成器函数挂起</span></span><br><span class="line"><span class="comment"># 2. 将yield关键字后面的表达式的值作为返回值返回 此时可以理解为起到了return的作用</span></span><br></pre></td></tr></table></figure><h5 id="生成器中使用return问题"><a href="#生成器中使用return问题" class="headerlink" title="生成器中使用return问题"></a>生成器中使用return问题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    num1 = <span class="number">1</span></span><br><span class="line">    num2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; n:</span><br><span class="line">        result = num1</span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> result</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line">f = fib(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误信息&quot;</span>, err)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">return 用于终止生成器  返回异常信息</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>send唤醒</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    current_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_index &lt; n:</span><br><span class="line">        result = a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        current_index += <span class="number">1</span></span><br><span class="line">        params = <span class="keyword">yield</span> result</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;params&quot;</span>, params)</span><br><span class="line">        <span class="keyword">if</span> params == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;程序中断&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = fibonacci(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line">value = f.send(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line">value = f.send(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line">value = f.send(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">send方法可以让生成器对象传入数据到内部 </span></span><br><span class="line"><span class="string">send方法具有和next 方法一样的唤醒生成器继续执行的功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><blockquote><p>称为 微线程  线程和进程是由程序触发系统接口 最后执行者是系统  而协程操作则是由程序猿控制的</p></blockquote><p><strong>协程的底层是借助生成器来实现的，但对于更复杂的耗时识别 需要经过高级封装</strong></p><p>协程存在的意义：线程通过cpu调度来实现线程切换，需要耗时，而协程则在一个线程内 实现多任务解阻塞 并且不受全局锁的影响</p><p>协程适用场景：当程序中存在大量的不需要cpu操作时，适用于协程</p><blockquote><p>线程间切换 不但是保存和恢复cpu上下文，还有处理和恢复线程cache数据，所以线程切换还是非常好性能的</p><p>协程 仅仅是切换cpu的上下文即可 单位时间内切换数百万次，系统都没问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;.....work1....&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;....work2....&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">w1 = work1()</span><br><span class="line">w2 = work2()</span><br></pre></td></tr></table></figure><h4 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h4><blockquote><p>greenlet是python的一个c扩展 旨在提供可自行调度的微线程即协程</p></blockquote><p><strong>安装</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install greenlet</span><br></pre></td></tr></table></figure><p><strong>greenlet</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;..test1..&quot;</span>)</span><br><span class="line">        gr2.switch()  <span class="comment"># 切换到test2执行</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;..test2..&quot;</span>)</span><br><span class="line">        gr1.switch()  <span class="comment"># 切换到test1执行</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line"><span class="comment"># 切换到test1中运行</span></span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure><h4 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h4><blockquote><p>可以看到 greenlet虽然可以实现多任务之间的切换 但需要手动设置切换来进行解阻塞，非常麻烦</p><p>更加强大的自动切换任务的模块 gevent</p></blockquote><p><strong>安装</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install gevent   <span class="comment"># 也可以在pycharm中配置</span></span><br></pre></td></tr></table></figure><p><strong>使用gevent</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent,time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;..test1..&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;..test2..&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 创建协程 并指派任务</span></span><br><span class="line">g1 = gevent.spwan(test1)</span><br><span class="line">g2 = gevent.spwan(test2)</span><br><span class="line"><span class="comment"># 等待协程结束之后 在结束主线程</span></span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>但是我们发现 程序并没有发现耗时操作 </p><p>需要使用 gevent.sleep(0.5)  替换time.sleep(0.5)</p><p>秉着对修改关闭 对扩展开放的原则  我们使用打补丁的方式 实现兼容</p></blockquote><p><strong>给程序打补丁</strong></p><blockquote><p>猴子补丁作用：</p><ol><li>运行时替换方法 属性</li><li>在不修改第三方代码的情况下增加原来不支持的功能</li><li>在运行时为内存中的对象增加patch而不是在磁盘的源代码中增加</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加如下代码</span></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">mokey.patch_all()</span><br></pre></td></tr></table></figure><h5 id="查看当前执行任务的协程"><a href="#查看当前执行任务的协程" class="headerlink" title="查看当前执行任务的协程"></a>查看当前执行任务的协程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gevent.getcurrent()</span><br></pre></td></tr></table></figure><hr><h4 id="进程，线程，协程对比"><a href="#进程，线程，协程对比" class="headerlink" title="进程，线程，协程对比"></a>进程，线程，协程对比</h4><p><strong>进程</strong>：是系统进行资源调度和分配的一个独立单位，每个进程有自己的独立内存空间，进程可以调用多核cpu实现多任务，进程间可以通过消息队列来通信，进程间切换，资源消耗较大，但比较稳定和安全</p><p><strong>线程</strong>：是cpu调度和分派的基本单位，基本不占用系统资源，线程之间可以共享内存，线程切换资源开销较少，没有真正意义上实现并行，而只是并发，同一时间内只能使用一个线程来执行，通过cpu时间片轮转机制（单核单线程cpu），或者多cpu之间轮询</p><p><strong>协程</strong>:是一种用户态的轻量级线程  只是在cpu内部进行一个上下文切换，几乎不占用系统资源，切换非常快</p><p><img src="/media/images/pic/Snipaste_2018-09-25_16-55-14.png" alt="Snipaste_2018-09-25_16-55-14"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进程是系统资源分配的独立单位</span><br><span class="line">线程是cpu调度和分派的基本单位</span><br><span class="line">多进程，多线程根据cpu核数不一样 可能是并行的，但是写成诗在一个线程中 所以是并发???</span><br></pre></td></tr></table></figure><h4 id="并发下载器"><a href="#并发下载器" class="headerlink" title="并发下载器"></a>并发下载器</h4><p><strong>下载多张图片</strong></p><p><img src="/media/images/pic/Snipaste_2018-09-25_20-10-56.png" alt="Snipaste_2018-09-25_20-10-56"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment"># 导入猴子补丁</span></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="comment"># 调用patch_all方法 识别耗时操作</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_img</span>(<span class="params">img_url, img_name</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 抓取图片地址</span></span><br><span class="line">        response  = urllib.request.urlopen(img_url)</span><br><span class="line">        <span class="comment"># 打开图片文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                img_data = response.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> img_data:</span><br><span class="line">                    f.write(img_data)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件%s下载失败 %s&#x27;</span>% (img_name, <span class="built_in">str</span>(e))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件%s下载成功&#x27;</span>%img_name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">img_url1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    img_url2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    img_url3 = <span class="string">&#x27;&#x27;</span> </span><br><span class="line">    </span><br><span class="line">    gevent.joinall([</span><br><span class="line">        gevent.spawn(download_img, img_url1,<span class="string">&#x27;1.jpg&#x27;</span>),</span><br><span class="line">        gevent.spawn(download_img, img_url2,<span class="string">&#x27;2.jpg&#x27;</span>),</span><br><span class="line">        gevent.spawn(download_img, img_url3,<span class="string">&#x27;3.jpg&#x27;</span>) </span><br><span class="line">    ])</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程通信，进程池以及迭代器</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/05.%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%EF%BC%8C%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%BB%A5%E5%8F%8A%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/05.%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%EF%BC%8C%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%BB%A5%E5%8F%8A%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线程和进程的对比"><a href="#线程和进程的对比" class="headerlink" title="线程和进程的对比"></a>线程和进程的对比</h3><ul><li><p>功能：</p><ul><li>进程，能完成多任务，比如一台电脑上能够同时运行多个qq</li><li>线程，能够完成多任务，比如一个qq中的多个聊天窗口</li></ul><p><img src="/media/images/pic/QQ20180913-202154@2x.png" alt="QQ20180913-202154@2x"></p></li><li><p>定义的不同</p><ul><li>进程是<strong>系统进行资源分配和调度</strong>的一个独立单位</li><li>线程是进程的一个实体，是<strong>cpu调度和分派的基本单位</strong>，它比进程更小，线程基本上不拥有系统资源，它可以与在同一进程中的其他线程共享进程所拥有的全部资源</li></ul></li><li><p>区别</p><ul><li>一个程序至少有一个进程，一个进程至少有一个线程</li><li>线程的划分尺度小于进程（资源比进程少），使得多线程程序的并发性高</li></ul><p><img src="/media/images/pic/QQ20180913-202713@2x.png" alt="QQ20180913-202713@2x"></p><blockquote><p>进程与 线程的选择取决于以下几点：</p><ol><li>频繁创建销毁的优先使用线程，进程创建和销毁的代价很大</li><li>线程切换速度快，所以需要大量计算时用线程，还有耗时操作使用线程可提高程序响应</li><li>多机分布用进程，多核分布用线程 对cpu的使用效率上线程更占优</li><li>并行操作使用线程， c/s 架构的服务器端并发线程响应用户请求</li><li>更稳定和安全 选择进程， 需要速度选择线程</li></ol></blockquote></li></ul><h3 id="消息队列—基本操作"><a href="#消息队列—基本操作" class="headerlink" title="消息队列—基本操作"></a>消息队列—基本操作</h3><blockquote><p>进程间通信，可以通过消息队列来实现</p></blockquote><h5 id="1-Queue介绍"><a href="#1-Queue介绍" class="headerlink" title="1.Queue介绍"></a>1.Queue介绍</h5><p><strong>创建并简单使用队列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入多进程模块</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建消息队列</span></span><br><span class="line"><span class="comment"># 参数为最大接收的消息数量  返回消息队列对象  不指定参数 则默认最大 无上限</span></span><br><span class="line">queue = multiprocessing.Queue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向消息队列中放入内容</span></span><br><span class="line">queue.put(<span class="number">1</span>)  <span class="comment"># 可以放置任何数据类型</span></span><br><span class="line">queue.put(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">queue.put([<span class="number">13</span>, <span class="number">2</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># queue.put(23)  # 当队列已满，无法继续放入新的值，如果再次放入，程序会进行等待状态（等待队列取出值后再放入）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># queue.put_nowait(24)  # # 当队列已满，无法继续放入新的值,如果再次放入，程序不会等待，直接报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印队列对象</span></span><br><span class="line"><span class="built_in">print</span>(queue)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个消息的值</span></span><br><span class="line">value = queue.get()</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"><span class="comment"># 获取第2个消息的值</span></span><br><span class="line">value = queue.get()</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第3个消息的值</span></span><br><span class="line">value = queue.get()</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第4个消息的值</span></span><br><span class="line">value = queue.get()  <span class="comment"># 当队列已经空了，无法再取值，如果再取值，默认会进入等待状态（等待队列再放入元素，再取）</span></span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># value = queue.get_nowait()  # 当队列已经空了，无法再取值，get_nowait() 表示不等待，直接报错</span></span><br><span class="line"><span class="comment"># print(value)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(queue)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h5 id="2消息队列中的常见判断"><a href="#2消息队列中的常见判断" class="headerlink" title="2消息队列中的常见判断"></a>2消息队列中的常见判断</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = multiprocessing.Queue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    q.put(<span class="number">3</span>)</span><br><span class="line">    q.put(<span class="number">9</span>)</span><br><span class="line">    <span class="comment"># q.put_nowait(5)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(q.qsize()) # 这个方法在mac系统上无效 会报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断 消息队列中的消息是否已满 如果满则返回True  否则返回False</span></span><br><span class="line">    <span class="keyword">if</span> q.full():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已满&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未满&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># q.get()</span></span><br><span class="line">    <span class="comment"># q.get()</span></span><br><span class="line">    <span class="comment"># q.get_nowait()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 坑 当不执行get方法的时候，判断empty是否为空 显示已空 此时需要让程序休眠一会儿</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> q.empty():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已空&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未空&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-进程间通信思路"><a href="#3-进程间通信思路" class="headerlink" title="3.进程间通信思路"></a>3.进程间通信思路</h5><p><img src="/media/images/pic/QQ20180913-222859@2x.png" alt="QQ20180913-222859@2x"></p><blockquote><p>在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_work</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> queue.full():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;队列已满&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        queue.put_nowait(i)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_work</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> queue.empty():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;队列已空&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        result = queue.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在读取&quot;</span>,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建一个消息队列</span></span><br><span class="line">    queue = multiprocessing.Queue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建两个进程</span></span><br><span class="line">    p1 = multiprocessing.Process(target=write_work, args=(queue, ))</span><br><span class="line">    p1.start()</span><br><span class="line">    <span class="comment"># 先让p1的进程走完任务</span></span><br><span class="line">    p1.join()</span><br><span class="line">    p2 = multiprocessing.Process(target=read_work, args=(queue, ))</span><br><span class="line">    p2.start()</span><br></pre></td></tr></table></figure><h4 id="进程池的概述Pool"><a href="#进程池的概述Pool" class="headerlink" title="进程池的概述Pool"></a>进程池的概述Pool</h4><h5 id="1-进程池"><a href="#1-进程池" class="headerlink" title="1.进程池"></a>1.进程池</h5><blockquote><p>当需要创建的子进程较多时，手动创建进程工作量巨大，可以利用多进程的Pool方法创建进程池</p></blockquote><p><img src="/media/images/pic/QQ20180913-233944@2x.png" alt="QQ20180913-233944@2x"></p><blockquote><p>进程池可以设定一个最大进程数，当达到最大进程数之后，再创建程序执行该请求，则会进入等待，直到池中有进程结束，才能接受新的任务</p></blockquote><h5 id="2-进程池的实现方式"><a href="#2-进程池的实现方式" class="headerlink" title="2.进程池的实现方式"></a>2.进程池的实现方式</h5><ol><li><p>同步方式：pool.apply()</p><p><img src="/media/images/pic/QQ20180913-234537@2x.png" alt="QQ20180913-234537@2x"></p></li><li><p>异步方式pool.apply_async(copy_work)</p><p><img src="/media/images/pic/QQ20180913-234553@2x.png" alt="QQ20180913-234553@2x"></p><p>异步非阻塞方式为并行执行，阻塞方式必须进程依次执行</p></li></ol><h5 id="3-核心方法"><a href="#3-核心方法" class="headerlink" title="3.核心方法"></a>3.核心方法</h5><p>multiprocessing.Pool()</p><h5 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_work</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;copying...&#x27;</span>, multiprocessing.current_process().pid)</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pool.apply(copy_work)</span></span><br><span class="line">        pool.apply_async(copy_work)</span><br><span class="line">    <span class="comment"># 关闭进程池 使其不再接收新的任务</span></span><br><span class="line">    pool.close()</span><br><span class="line">    <span class="comment"># 异步方式的情况下 让主进程等待子进程全部结束之后再结束</span></span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure><h5 id="4-进程池中的Queue"><a href="#4-进程池中的Queue" class="headerlink" title="4.进程池中的Queue"></a>4.进程池中的Queue</h5><blockquote><p>再进程池中 创建消息队列 进行进程池中的进程间通信 </p><p>使用multiprocessing.Manager().Queue()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> queue.full():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;消息队列已满&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        queue.put(i)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> queue.empty():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;消息队列已空&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        value = queue.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在取值&quot;</span>, value)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">2</span>)</span><br><span class="line">    queue = multiprocessing.Manager().Queue(<span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># pool.apply(write, args=(queue,))</span></span><br><span class="line">    <span class="comment"># pool.apply(read, args=(queue,))</span></span><br><span class="line">    <span class="comment"># pool.close()</span></span><br><span class="line"></span><br><span class="line">    result = pool.apply_async(write, args=(queue, ))</span><br><span class="line">    <span class="comment"># 进程池中的进程如果执行异步任务  需要一个任务执行之后 再执行另一个任务 此时获取当前异步执行任务对象 然后执行wait方法</span></span><br><span class="line">    result.wait()</span><br><span class="line">    pool.apply_async(read, args=(queue, ))</span><br><span class="line">    <span class="comment"># 将进程池关闭 不再接收新的任务</span></span><br><span class="line">    pool.close()</span><br><span class="line">    <span class="comment"># 异步执行任务的时候需要让主进程 等待子进程结束之后 再结束</span></span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/media/images/pic/QQ20180914-001233@2x.png" alt="QQ20180914-001233@2x"></p><h4 id="文件拷贝器"><a href="#文件拷贝器" class="headerlink" title="文件拷贝器"></a>文件拷贝器</h4><h5 id="1-案例介绍"><a href="#1-案例介绍" class="headerlink" title="1.案例介绍"></a>1.案例介绍</h5><p><img src="/media/images/pic/QQ20180914-080054@2x.png" alt="QQ20180914-080054@2x"></p><h5 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h5><blockquote><p>案例的目标：</p><p>源文件———&gt; 目标文件</p><p>./test———&gt; /Users/ZaG/Desktop/test</p><ol><li>定义好源文件和目标文件路径</li><li>拷贝多个文件 的工作函数</li><li>通过创建进程池 设定三个进程 实现异步拷贝</li><li>注意关闭进程池以及join方法的使用</li><li>这里没有进程池里面的进程间通信，也没有异步任务的先后执行排列问题</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件下载器，tcp，udp详解，线程和进程</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/04.%E4%B8%8B%E8%BD%BD%E5%99%A8%EF%BC%8Ctcp%EF%BC%8Cudp%E8%AF%A6%E8%A7%A3%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/04.%E4%B8%8B%E8%BD%BD%E5%99%A8%EF%BC%8Ctcp%EF%BC%8Cudp%E8%AF%A6%E8%A7%A3%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="案例：文件下载器"><a href="#案例：文件下载器" class="headerlink" title="案例：文件下载器"></a>案例：文件下载器</h4><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><ol><li><p>客户端</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实现思路：</span><br><span class="line"><span class="number">1.</span>导入模块</span><br><span class="line"><span class="number">2.</span>创建套接字</span><br><span class="line"><span class="number">3.</span>建立和服务器的连接</span><br><span class="line"><span class="number">4.</span>接收用户输入的文件名</span><br><span class="line"><span class="number">5.</span>发送文件名到服务器</span><br><span class="line"><span class="number">6.</span>创建文件，准备接收服务器返回的文件数据</span><br><span class="line"><span class="number">7.</span>保存文件数据</span><br><span class="line"><span class="number">8.</span>关闭套接字</span><br></pre></td></tr></table></figure></li><li><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">实现思路</span><br><span class="line"><span class="number">1.</span>导入模块</span><br><span class="line"><span class="number">2.</span>创建套接字</span><br><span class="line"><span class="number">3.</span>绑定地址和端口</span><br><span class="line"><span class="number">4.</span>开始监听，设置套接字为被动监听模式</span><br><span class="line"><span class="number">5.</span>等待客户端连接 （如果有客户连接 会创建新的套接字）</span><br><span class="line"><span class="number">6.</span>接收客户端发来的文件名</span><br><span class="line"><span class="number">7.</span>根据文件名进行读取文件数据</span><br><span class="line"><span class="number">8.</span>将读取的文件数据发送给客户端（循环）</span><br><span class="line"><span class="number">9.</span>关闭和客户端的连接</span><br><span class="line"><span class="number">10.</span>关闭服务器</span><br></pre></td></tr></table></figure></li></ol><h5 id="案例：文件下载器-1"><a href="#案例：文件下载器-1" class="headerlink" title="案例：文件下载器"></a>案例：文件下载器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="comment"># 导入套接字</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建套接字</span></span><br><span class="line">tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 设置地址重用</span></span><br><span class="line">tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 绑定端口</span></span><br><span class="line">tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务器侦听状态</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收多客户端连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    new_tcp_client_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;【新客户端来了】&quot;</span>, ip_port)</span><br><span class="line"></span><br><span class="line">    recv_data = new_tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file_name = recv_data.decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        file_name = recv_data.decode(encoding=<span class="string">&quot;gbk&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发来的文件名是:&quot;</span>, file_name)</span><br><span class="line">    <span class="comment"># 根据文件名 打开对应的文件</span></span><br><span class="line">    <span class="comment"># 使用try  except</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                con = f.read(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> con:</span><br><span class="line">                    new_tcp_client_socket.send(con)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;客户端已经断开&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        new_tcp_client_socket.send(<span class="string">&#x27;err：文件找不到&#x27;</span>.encode())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_tcp_client_socket.send(<span class="string">&#x27;suc：文件下载完&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line">    new_tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器可以不用关闭</span></span><br><span class="line"><span class="comment"># tcp_server_socket.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============</span></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec_fun</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = data.decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        data = data.decode(encoding=<span class="string">&quot;gbk&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">tcp_client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">tcp_client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">tcp_client_socket.connect((<span class="string">&quot;192.168.162.163&quot;</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">file_name = <span class="built_in">input</span>(<span class="string">&quot;请输入您要下载的文件名&quot;</span>)</span><br><span class="line">tcp_client_socket.send(file_name.encode())</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&quot;/Users/ZaG/Desktop/test/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path + file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">        data = dec_fun(recv_data)</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        <span class="keyword">if</span> data[:<span class="number">3</span>] == <span class="string">&quot;err&quot;</span> <span class="keyword">or</span> data[:<span class="number">3</span>] == <span class="string">&quot;suc&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> data:</span><br><span class="line">            f.write(data.encode())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure><h5 id="tcp3次握手"><a href="#tcp3次握手" class="headerlink" title="tcp3次握手"></a>tcp3次握手</h5><blockquote><p>标志位 SYN 连接请求 ACK 确认 FIN 关闭连接</p><p>序号： seq：报文序号   ack 确认号</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tcp三次握手 就是建立tcp连接的过程，在socket编程中，由客户端执行connect来触发</span><br><span class="line">第一次握手：</span><br><span class="line">客户端发送syn连接请求SYN=<span class="number">1</span>  随机序号seq=j  随机客户端进入syn_sent状态 等待server确认</span><br><span class="line">(SYN=<span class="number">1</span>,seq=j)</span><br><span class="line">第二次握手：</span><br><span class="line">服务端 接收到数据包之后， 在SYN=<span class="number">1</span>后添加确认ACK=<span class="number">1</span>，发送确认号为ack=j+<span class="number">1</span>  随机产生seq序号seq=k   进行传输</span><br><span class="line">(SYN=<span class="number">1</span>,ACk=<span class="number">1</span>,ack=j+<span class="number">1</span>,seq=k )</span><br><span class="line">第三次握手：</span><br><span class="line">客户端收到数据包之后， 检查ack等于j+<span class="number">1</span> ACK为<span class="number">1</span> </span><br><span class="line">    将ACK=<span class="number">1</span>确认 以及确认号ack=k+<span class="number">1</span></span><br><span class="line">    (ACK=<span class="number">1</span>,ack=k+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="tcp四次挥手"><a href="#tcp四次挥手" class="headerlink" title="tcp四次挥手"></a>tcp四次挥手</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">client --------------------server</span><br><span class="line">FIN=<span class="number">1</span>，seq=u ---&gt; 关闭连接请求 和随机序号</span><br><span class="line">    确认ACK=<span class="number">1</span>，报文序号确认ack=u+<span class="number">1</span> 随机seq&lt;---ACK=<span class="number">1</span> seq=v ack=u+<span class="number">1</span></span><br><span class="line">    &lt;----- FIN=<span class="number">1</span>，ACK=<span class="number">1</span>， seq=w  ack=u+<span class="number">1</span> </span><br><span class="line">    等待2MSL时间）    收到确认 ACK=<span class="number">1</span>，seq=u+<span class="number">1</span>,ack=w+<span class="number">1</span>-----&gt;</span><br><span class="line">    注意：等待网络延迟产生的被动方超时重传的ACK报文</span><br></pre></td></tr></table></figure><h4 id="wireshark抓包工具"><a href="#wireshark抓包工具" class="headerlink" title="wireshark抓包工具"></a>wireshark抓包工具</h4><h4 id="多任务介绍"><a href="#多任务介绍" class="headerlink" title="多任务介绍"></a>多任务介绍</h4><blockquote><p>多任务处理是指用户可以在同一时间内运行多个应用程序，每个应用程序被称作一个任务  window是支持多任务的操作系统</p></blockquote><p><strong>并发</strong></p><blockquote><p>指的是任务数多于cpu核数，通过操作系统的各种任务调度算法，实现多个任务一起执行</p></blockquote><p><strong>并行</strong></p><blockquote><p>指的是任务数小于等于cpu核心数  任务真正的一起执行</p></blockquote><h5 id="使用threading模块"><a href="#使用threading模块" class="headerlink" title="使用threading模块"></a>使用threading模块</h5><p><strong>单线程执行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saySorry</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我错了&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>：</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        saySorry()</span><br></pre></td></tr></table></figure><p><strong>多线程执行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saySorry</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;亲爱的，我错了&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t1 = threading.Thread(target=saySorry)</span><br><span class="line">        t1.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是主线程&#x27;</span>)</span><br><span class="line"><span class="comment"># 1.多线程并发操作 花费时间更少</span></span><br><span class="line"><span class="comment"># 2.当调用start() 才会真正的创建线程，并开始执行</span></span><br><span class="line"><span class="comment"># 3.每个线程都有一个唯一标识符</span></span><br><span class="line"><span class="comment"># 4.主线程 mainThread 主程序入口 </span></span><br><span class="line"><span class="comment"># 5.子线程 Thread-x 使用threading.Thread()创建</span></span><br><span class="line"><span class="comment"># 6.线程数量：主线程+子线程数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在唱歌...%d&quot;</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在跳舞....%d&#x27;</span>%i)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;.....开始....%s&#x27;</span>%ctime())</span><br><span class="line">    </span><br><span class="line">    t1 = threading.Thread(target=sing)</span><br><span class="line">    t2 = threading.Thread(target=dance)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;.....结束....%s&#x27;</span>%ctime())</span><br></pre></td></tr></table></figure><h5 id="线程数量"><a href="#线程数量" class="headerlink" title="线程数量"></a>线程数量</h5><p><code>threading.enumerate()</code></p><h5 id="线程名称"><a href="#线程名称" class="headerlink" title="线程名称"></a>线程名称</h5><p><code>threading.current_thread()</code></p><h5 id="线程参数以及顺序"><a href="#线程参数以及顺序" class="headerlink" title="线程参数以及顺序"></a>线程参数以及顺序</h5><blockquote><p>多线程的同一时间的执行顺序取决于cpu时间片轮转的调度算法，我们可以认为是随机的</p></blockquote><h5 id="线程传递参数"><a href="#线程传递参数" class="headerlink" title="线程传递参数"></a>线程传递参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1  使用args</span></span><br><span class="line">t1 = threading.Thread(target=sing, args=(<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>))</span><br><span class="line"><span class="comment"># 方法2  使用kwargs</span></span><br><span class="line">t1 = threading.Thread(target=sing,kwargs, kwargs=&#123;<span class="string">&quot;a&quot;</span>:<span class="number">10</span>, <span class="string">&quot;b&quot;</span>: <span class="number">100</span>, <span class="string">&quot;c&quot;</span>: <span class="number">1000</span>&#125;)</span><br><span class="line"><span class="comment"># 方法3 使用混合方法</span></span><br><span class="line">t1 = threading.Thread(target=sing, args=(<span class="number">10</span>,), kwargs=&#123;<span class="string">&quot;c&quot;</span>:<span class="number">1000</span>, <span class="string">&quot;b&quot;</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在执行...&quot;</span>, i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    t1 = threading.Thread(target=work1)</span><br><span class="line">    t1 = setDaemon(<span class="literal">True</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Game Over&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    exit()  <span class="comment"># 退出无效 有别的子线程继续执行 </span></span><br><span class="line">    <span class="comment"># 想让主线程结束的时候 没有执行完成的子线程一起结束 这就是线程守护</span></span><br></pre></td></tr></table></figure><h5 id="设置线程守护"><a href="#设置线程守护" class="headerlink" title="设置线程守护"></a>设置线程守护</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置为守护线程 （如果主线程结束了 也随之结束）</span></span><br><span class="line">线程.setDaemon(<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="自定义线程类"><a href="#自定义线程类" class="headerlink" title="自定义线程类"></a>自定义线程类</h5><blockquote><p>通过自定义封装的线程类 可以实现功能扩展 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 继承threading.Thread</span></span><br><span class="line"><span class="comment"># 2. 重写run方法</span></span><br><span class="line"><span class="comment"># 3. 通过实例线程对象 启动线程</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="comment"># 定义构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.num = num</span><br><span class="line">    <span class="comment"># 重写父类的run 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在执行run方法:&quot;</span>, self.num)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    mythread = MyThread(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    mythread.start()</span><br></pre></td></tr></table></figure><blockquote><p>python中threading.Thread类有一个run方法，用于定义线程的功能函数，可以在自己的线程类中覆盖该方法，实现功能扩展，当线程获得启动执行时，start就会调用run方法</p></blockquote><h4 id="多线程—共享全局变量"><a href="#多线程—共享全局变量" class="headerlink" title="多线程—共享全局变量"></a>多线程—共享全局变量</h4><h5 id="1-多个线程方法中可以共用全局变量"><a href="#1-多个线程方法中可以共用全局变量" class="headerlink" title="1.多个线程方法中可以共用全局变量"></a>1.多个线程方法中可以共用全局变量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>(<span class="params">nums</span>):</span></span><br><span class="line">    nums.append(<span class="number">44</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----in work1---&quot;</span>, nums)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>(<span class="params">nums</span>):</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---in work2---&quot;</span>, nums)</span><br><span class="line">g_nums = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line">t1 = Thread(target=work1, args=(g_nums,))</span><br><span class="line">t1.start()</span><br><span class="line">t2 = Thread(target=work2, args=(g_nums,))</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在一个进程内的所有的线程共享全局变量 很方便在多个线程间共享数据</span></span><br><span class="line"><span class="comment"># 缺点是 线程是对全局变量随意更改，可以造成多线程之间对全局变量的混乱（即线程非安全）</span></span><br></pre></td></tr></table></figure><h5 id="多线程共享全局变量带来的问题"><a href="#多线程共享全局变量带来的问题" class="headerlink" title="多线程共享全局变量带来的问题"></a>多线程共享全局变量带来的问题</h5><blockquote><p>如果多个线程同时对同一全局变量操作，会出现资源竞争问题，从而数据结果会不正确</p></blockquote><h5 id="解决方法一-join"><a href="#解决方法一-join" class="headerlink" title="解决方法一 join()"></a>解决方法一 join()</h5><blockquote><p>join方法：一个线程在执行过程中 要调用另外一个线程，并且等到其完成以后才能接着执行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t1 = threading.Thread(target=test, args=(<span class="number">10000</span>, ))</span><br><span class="line">t1.start()</span><br><span class="line"><span class="comment"># t1执行完成之后在执行t2线程</span></span><br><span class="line">t1.join() </span><br></pre></td></tr></table></figure><p><strong>同步</strong>: 多任务， 多个任务之间执行的时候 要求有先后顺序，只有一个主线</p><p><strong>异步</strong>: 多个任务之间执行没有先后顺序，可以同时运行，执行的先后顺序不会有什么影响，存在的多条运行主线</p><p><img src="/media/images/pic/QQ20180909-165908@2x.png" alt="QQ20180909-165908@2x"></p><p>A线程获得了g_num 的使用权 并且加上了锁机制，此时B C线程无法使用g_nums ， B  C线程 必须等到A线程不再使用g_nums 并且解锁后，才能使用g_nums</p><p><strong>互斥锁</strong></p><p>当多个线程几乎同时修改某一个共享数据 需要同步控制</p><p>最简单的线程同步控制 互斥锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建锁</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="comment"># 锁定</span></span><br><span class="line">mutex.acquire()</span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">mutex.release()</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>好处：确保了某段关键代码只能由一个线程从头到尾完整的执行</p><p>坏处：阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大的下降了</p><p>由于可以存在多个锁，不同的线程持有多个锁，试图获取对象持有的锁时，可能会造成死锁</p></blockquote><h4 id="案例：多任务版udp聊天器"><a href="#案例：多任务版udp聊天器" class="headerlink" title="案例：多任务版udp聊天器"></a>案例：多任务版udp聊天器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec_fun</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = data.decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        data = data.decode(encoding=<span class="string">&quot;gbk&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_fun</span>(<span class="params">server</span>):</span></span><br><span class="line"></span><br><span class="line">    ip = <span class="built_in">input</span>(<span class="string">&quot;请输入您要发的ip地址：&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;192.168.162.61&quot;</span></span><br><span class="line"></span><br><span class="line">    port = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您要发的端口：&quot;</span>)) <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您要发的端口：&quot;</span>)) <span class="keyword">else</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    content = <span class="built_in">input</span>(<span class="string">&quot;请输入您要发的信息：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你选择的是&#123;&#125;,端口:&#123;&#125;,内容为:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(ip, port, content))</span><br><span class="line">    content = <span class="string">&quot;\n&quot;</span> + content</span><br><span class="line">    server.sendto(content.encode(),(ip, port))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_fun</span>(<span class="params">server</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        recv_data, ip_port = server.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_data:</span><br><span class="line">            data = dec_fun(recv_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;【新客户端发信息来了】&#x27;</span>, ip_port, <span class="string">&#x27;消息是:&#x27;</span>, data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;客户端可能中断&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    udp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    udp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">    udp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=recv_fun, args=(udp_server_socket,))</span><br><span class="line">    t1.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">6</span>, <span class="string">&#x27;1 发送消息&#x27;</span>, <span class="string">&quot;*&quot;</span> * <span class="number">6</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">6</span>, <span class="string">&#x27;2 退出系统&#x27;</span>, <span class="string">&quot;*&quot;</span> * <span class="number">6</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">20</span>)</span><br><span class="line">        nums = <span class="built_in">input</span>(<span class="string">&quot;请输入您的选择:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> nums == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            send_fun(udp_server_socket)</span><br><span class="line">        <span class="keyword">elif</span> nums == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;已经退出系统&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;错误输入&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="udp广播"><a href="#udp广播" class="headerlink" title="udp广播"></a>udp广播</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">udp_boradcast_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">udp_boradcast_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">udp_boradcast_socket.sendto(<span class="string">&quot;I&#x27;m ZaG&quot;</span>.encode(),(<span class="string">&quot;255.255.255.255&quot;</span>,<span class="number">3009</span>))</span><br><span class="line"></span><br><span class="line">udp_boradcast_socket.close()</span><br></pre></td></tr></table></figure><h4 id="进程以及状态"><a href="#进程以及状态" class="headerlink" title="进程以及状态"></a>进程以及状态</h4><h5 id="1-进程概念"><a href="#1-进程概念" class="headerlink" title="1.进程概念"></a>1.进程概念</h5><blockquote><p>进程是资源分配的最小单位  程序隔离的边界</p></blockquote><p><strong>程序是固定不变的，而进程会根据运行需要，让操作系统动态分配各种资源</strong></p><p><img src="/img/QQ20180913-010318@2x.png" alt=""></p><p>cpu时间片轮转，不同时间切换执行不同进程，但是进程比较耗时，就引进轻量级进程，一个进程包含多个线程</p><h5 id="2-进程的状态"><a href="#2-进程的状态" class="headerlink" title="2.进程的状态"></a>2.进程的状态</h5><p>就绪态：运行的条件都已经满足，正在等cpu执行</p><p>执行态：cpu正在执行其功能</p><p>等待态：等待某些条件满足，例如一个程序sleep 此时处理等待态</p><h5 id="3-创建子进程"><a href="#3-创建子进程" class="headerlink" title="3.创建子进程"></a>3.创建子进程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;work1---&#x27;</span>, i)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p1 = multiprocessing.Process(group=<span class="literal">None</span>, target=work)</span><br><span class="line">    p1.start()</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是主进程&#x27;</span>, i)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><strong>实例对象的常用方法</strong></p><p>start(): 启动子进程</p><p>is_alive():判断进程子进程是否还在活着</p><p>join(timeout): 是否等待子进程执行结束，或等待多少秒</p><p>terminate(): 不管任务是否完成，立即终止子进程</p><h5 id="进程名称，-pid"><a href="#进程名称，-pid" class="headerlink" title="进程名称， pid"></a>进程名称， pid</h5><p><strong>进程名称获取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiprocessing.current_process()</span><br></pre></td></tr></table></figure><p><strong>进程pid</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 使用multiprocessing.current_process().pid</span></span><br><span class="line">multiprocessing.current_process().pid</span><br><span class="line"><span class="comment"># 2 使用import os 模块的getpid()</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getpid()</span><br></pre></td></tr></table></figure><p><strong>获取父id</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getppid() 获取父进程<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p><strong>进程参数，全局变量问题</strong></p><p>和线程传递参数基本一致</p><p><strong>进程间不共享全局变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line">num =<span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;work num= %d&quot;</span>%num)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;work2 num=%s&quot;</span>%num)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = multiprocessing.Process(group=<span class="literal">None</span>, target=work,name=<span class="string">&quot;MyProcess&quot;</span>)</span><br><span class="line">    p1.start()</span><br><span class="line">    </span><br><span class="line">    p2 = multiprocessing.Process(group=<span class="literal">None</span>, target=work,name=<span class="string">&quot;MyProcess2&quot;</span>)</span><br><span class="line">    p2.start()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 结果： work num =101  work2 num =100</span></span><br></pre></td></tr></table></figure><h5 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_process</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;子进程运行中&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p1 = multiprocessing.Process(group=<span class="literal">None</span>, target=sub_process, name=<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">    <span class="comment"># 第一种方法</span></span><br><span class="line">    p1.daemon = <span class="literal">True</span></span><br><span class="line">    p1.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;OVER&quot;</span>)</span><br><span class="line">    <span class="comment"># 第二种方法</span></span><br><span class="line">    p1.terminate()</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见ftp，ssh搭建，网络基础知识，tcp，udp，socket编程</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/03.%E5%B8%B8%E8%A7%81ftp,ssh%E6%90%AD%E5%BB%BA,%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86,tcp,udp,socket%E7%BC%96%E7%A8%8B/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/03.%E5%B8%B8%E8%A7%81ftp,ssh%E6%90%AD%E5%BB%BA,%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86,tcp,udp,socket%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Linux-指令以及网络编程"><a href="#Linux-指令以及网络编程" class="headerlink" title="Linux 指令以及网络编程"></a>Linux 指令以及网络编程</h3><h4 id="1-ubuntu软件安装与卸载"><a href="#1-ubuntu软件安装与卸载" class="headerlink" title="1.ubuntu软件安装与卸载"></a>1.ubuntu软件安装与卸载</h4><ol><li><p>make install 源代码安装包  也称：tarball</p><p>优点：软件根据实际的机器硬件进行配置和编译，性能最好，最稳定</p><p>缺点：需要使用源代码编译 安装 比较麻烦</p><blockquote><ol><li>./configure  #这个步骤是建立makefile文件</li><li>makeclean  消除一下 上次编译过的目标文件之类的，不是必须 但保险起见做一下</li><li>make  # 根据makefile当中的默认工作进行编译行为，主要进行gcc 将源码编译成可执行目标文件，并放置在当前目录下</li><li>make install  一般是最后的安装步骤， make会依据makefile关于install的选项，将上个步骤所编译完成的数据安装到默认的目录中</li></ol></blockquote></li><li><p>dpkg安装deb包</p><p>优点：安装包直接运行安装，相对tarball简单些</p><p>缺点：存在包依赖问题， 安装时需要手动下载很多安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i package.deb</span><br></pre></td></tr></table></figure></li><li><p>apt-get方式</p><p>优点：只需一条指令 简单方便</p><p>缺点：必须有软件源（联网或者搭建软件源）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一般格式为：</span></span><br><span class="line">sudo apt-get install xxxx</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-Ubuntu软件配置镜像源"><a href="#2-Ubuntu软件配置镜像源" class="headerlink" title="2.Ubuntu软件配置镜像源"></a>2.Ubuntu软件配置镜像源</h4><blockquote><p>配置清华大学开源软件镜像源</p></blockquote><ol><li><p>在此网站<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a> 复制镜像源代码</p></li><li><p>备份Ubuntu默认的源地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</span><br></pre></td></tr></table></figure></li><li><p>更新服务器列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure></li><li><p>更新源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>测试并安装软件 ？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade:升级软件</span><br><span class="line">apt-get install software_name :安装软件</span><br><span class="line">apt-get --purge remove  software_name :卸载软件及其配置</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制解锁命令</span></span><br><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo rm /var/lib/dpkg/lock</span><br><span class="line">apt-get autoremove software_name:卸载软件及其依赖的安装包</span><br></pre></td></tr></table></figure></li></ol><h4 id="常用服务器ftp，ssh"><a href="#常用服务器ftp，ssh" class="headerlink" title="常用服务器ftp，ssh"></a>常用服务器ftp，ssh</h4><h5 id="1-Linux常用服务器构建-ftp服务器"><a href="#1-Linux常用服务器构建-ftp服务器" class="headerlink" title="1.Linux常用服务器构建-ftp服务器"></a>1.Linux常用服务器构建-ftp服务器</h5><blockquote><p>ftp： File Transfer  Protocol 文件传输协议</p></blockquote><p>1.1 安装vsftpd服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd -y</span><br></pre></td></tr></table></figure><p>1.2 检查是否启用21端口以及ftp协议是否生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntl | more</span><br><span class="line">ps -ef | grep ftp</span><br></pre></td></tr></table></figure><p>1.3 配置vsftpd.conf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/vsftpd.conf</span><br><span class="line">anonymous_enable=NO 不用修改</span><br><span class="line">local_enable=YES 不用修改</span><br><span class="line">write_enable=YES 启用</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定上传下载目录</span></span><br><span class="line">local_root=/home/python/ftp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置允许登录ftp服务器的用户</span></span><br><span class="line">chroot_list_enable=YES 启用</span><br><span class="line"><span class="meta">#</span><span class="bash"> (default follows)</span></span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list 启用</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建vsftpd.chroot_list文件 加入用户名python</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在ftp文件夹中 建立share文件夹</span></span><br><span class="line">mkdir share</span><br><span class="line"><span class="meta">#</span><span class="bash"> 减去ftp目录文件夹的拥有者u的权限w</span></span><br><span class="line">chmod 555 ftp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启ftp服务</span></span><br><span class="line">sudo /etc/init.d/vsftpd restart</span><br></pre></td></tr></table></figure><p>1.4 卸载vsftpd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge vsftpd</span><br><span class="line"><span class="meta">#</span><span class="bash"> --purge 彻底删除软件和相关文件</span></span><br></pre></td></tr></table></figure><h5 id="2-Linux常用服务器构建-ssh-和scp"><a href="#2-Linux常用服务器构建-ssh-和scp" class="headerlink" title="2.Linux常用服务器构建- ssh 和scp"></a>2.Linux常用服务器构建- ssh 和scp</h5><blockquote><p>ssh:secure shell缩写 建立在应用层和传输层基础上的安全协议</p></blockquote><ol><li><p>安装ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></li><li><p>远程登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@ip地址</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意 如果访问出现错误 则查看是否存在~/.ssh/known_ssh 尝试删除</span></span><br></pre></td></tr></table></figure></li><li><p><strong>scp</strong></p><ol><li><p>本地向远程拷贝文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r ./test python@192.168.162.76:/home/python/test</span><br><span class="line">scp ./test/aa.py python@192.168.1622.88:/home/python/test/bb.py</span><br></pre></td></tr></table></figure></li><li><p>远程拷贝到本地 则相反</p></li></ol></li></ol><h4 id="编辑器vim"><a href="#编辑器vim" class="headerlink" title="编辑器vim"></a>编辑器vim</h4><h5 id="1-vi简介"><a href="#1-vi简介" class="headerlink" title="1.vi简介"></a>1.vi简介</h5><blockquote><p>Visual interface 简称 文件操作程序</p></blockquote><p><strong>三种操作模式</strong></p><ul><li>命令模式</li><li>输入模式</li><li>末行模式</li></ul><h4 id="Ubuntu下安装pycharm"><a href="#Ubuntu下安装pycharm" class="headerlink" title="Ubuntu下安装pycharm"></a>Ubuntu下安装pycharm</h4><h4 id="网络通信概述"><a href="#网络通信概述" class="headerlink" title="网络通信概述"></a>网络通信概述</h4><h5 id="1-网络概念"><a href="#1-网络概念" class="headerlink" title="1.网络概念"></a>1.网络概念</h5><blockquote><p>一些相互连接的 ，以共享资源为目的的计算机的集合 使用网络能够方便数据共享和传递</p></blockquote><h5 id="2-IP地址"><a href="#2-IP地址" class="headerlink" title="2.IP地址"></a>2.IP地址</h5><blockquote><p>ip地址是指互联网协议地址 网际协议地址Internet Protocol Address</p></blockquote><p>作用：用来标记一台电脑 在网络中的主机唯一标识</p><p>分类： A类（1.0.0.1—126.255.255.254） </p><pre><code>     B类 （128.1.0.1--191.255.255.254）          C类 （192.0.1.1--223.255.255.254）         D类 用于多点广播     E类  保留地址 用于科研与实验开发用</code></pre><p>私有ip：用于局域网的ip地址</p><p>10.0.0.0—10.255.255.255 A类</p><p>172.16.0.0—172.31.255.255 B类</p><p>192.168.0.0—192.168.255.255 C类</p><p><strong>IP地址：127.0.0.1—127.255.255.255 用于本地回环测试</strong></p><p>特殊域名：localhost</p><h5 id="ipv4-和-ipv6"><a href="#ipv4-和-ipv6" class="headerlink" title="ipv4 和 ipv6"></a>ipv4 和 ipv6</h5><p>点分十进制  2^32个ip</p><p>冒号分十六进制 2^128 个ip</p><h5 id="3-Linux下的两个常用命令"><a href="#3-Linux下的两个常用命令" class="headerlink" title="3.Linux下的两个常用命令"></a>3.Linux下的两个常用命令</h5><p>ping 和ifconfig</p><h5 id="4-端口"><a href="#4-端口" class="headerlink" title="4.端口"></a>4.端口</h5><blockquote><p>设备与外界通讯交流的出口，端口可分为虚拟端口和物理端口，其中虚拟端口是指计算机内部或交换机路由器中的端口 如80 21 23端口</p></blockquote><p>端口号0—65535  分为知名端口 和动态端口</p><p>FTP：23 </p><p>SSH：22</p><p>Telnet：23</p><p>smtp：25</p><p>dns:53</p><p>http:80</p><p>pop3:110</p><p>https:443</p><p>查看端口使用情况：netstat  -an</p><p>查看端口被哪个程序占用 lsof -i :21  加sudo</p><p>net stat -ntl 查看服务器socket接口</p><h4 id="网络传输方式"><a href="#网络传输方式" class="headerlink" title="网络传输方式"></a>网络传输方式</h4><p>1.面向无连接型</p><pre><code>udp 用户数据报协议不要求建立和断开连接 发送端可以任何时候自由发送数据</code></pre><p>2.面向有连接型</p><pre><code>tcp 传输控制协议 面向连接 可靠的 基于字节流的传输通信协议在发送数据前需要与目标主机建立一条连接通信线路</code></pre><h4 id="Socket通信"><a href="#Socket通信" class="headerlink" title="Socket通信"></a>Socket通信</h4><p>1.创建套接字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入socket模块</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># udp</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.close() </span><br><span class="line"><span class="comment"># tcp</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>2.发送数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># udp</span></span><br><span class="line">s.sendto(<span class="string">&quot;你好&quot;</span>.encode(), (<span class="string">&quot;发送的ip地址&quot;</span>, 目标端口))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.接收数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#udp</span></span><br><span class="line">s.recvfrom(缓冲区大小)</span><br><span class="line">(recv_data, ip_port) = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># 其中ip_port是一个元组</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.发送端与接收端 端口绑定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addr = (<span class="string">&quot;192.168.162.122&quot;</span>, <span class="number">12345</span>) <span class="comment"># IP地址不写 则代表本机任意网卡ip</span></span><br><span class="line">udp_socket.bind(addr)</span><br></pre></td></tr></table></figure><h4 id="编码和解码"><a href="#编码和解码" class="headerlink" title="编码和解码"></a>编码和解码</h4><p>str.encode() ==&gt; bytes</p><p>bytes.decode()==&gt;str</p><blockquote><p>两个方法 都支持 参数  encoding=”utf-8”/“gbk” errors = “strict”/“ignore”</p></blockquote><h4 id="udp聊天案例"><a href="#udp聊天案例" class="headerlink" title="udp聊天案例"></a>udp聊天案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 聊天主要实现功能</span></span><br><span class="line"><span class="comment"># 1 发送信息</span></span><br><span class="line"><span class="comment"># 2 接收信息</span></span><br><span class="line"><span class="comment"># 3 退出系统</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span>(<span class="params">udp_socket</span>):</span></span><br><span class="line">    ipaddr = <span class="built_in">input</span>(<span class="string">&quot;请输入目标ip地址:&quot;</span>) | <span class="string">&quot;192.168.162.53&quot;</span></span><br><span class="line">    port = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入目标端口:&quot;</span>)) | <span class="number">8080</span></span><br><span class="line">    con = <span class="built_in">input</span>(<span class="string">&quot;请输入内容&quot;</span>)</span><br><span class="line">    udp_socket.sendto(con.encode(),(ipaddr, port))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_msg</span>(<span class="params">udp_socket</span>):</span></span><br><span class="line">    recv_data,ip_port = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    re_text = recv_data.decode()</span><br><span class="line">    ip,port = ip_port</span><br><span class="line">    <span class="built_in">print</span>(re_text)</span><br><span class="line">    <span class="built_in">print</span>(ip, port)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建套接字</span></span><br><span class="line">    udp_socket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">    <span class="comment"># 绑定端口</span></span><br><span class="line">    udp_socket.bind((<span class="string">&quot;192.168.162.122&quot;</span>, <span class="number">12345</span>))</span><br><span class="line">    <span class="comment"># 显示主界面 循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">6</span>,<span class="string">&quot;1.发送信息&quot;</span>,<span class="string">&quot;*&quot;</span>*<span class="number">6</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">6</span>,<span class="string">&quot;2.接收信息&quot;</span>,<span class="string">&quot;*&quot;</span>*<span class="number">6</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">6</span>,<span class="string">&quot;3.退出系统&quot;</span>,<span class="string">&quot;*&quot;</span>*<span class="number">6</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">20</span>)</span><br><span class="line">        <span class="comment"># 选择功能</span></span><br><span class="line">        num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择功能:&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发送功能调用&quot;</span>)</span><br><span class="line">            send_msg(udp_socket)</span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;接收功能调用&quot;</span>)</span><br><span class="line">            recv_msg(udp_socket)</span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;退出系统&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">     <span class="comment"># 关闭socket</span></span><br><span class="line">     udp_socket.close()     </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="TCP简介"><a href="#TCP简介" class="headerlink" title="TCP简介"></a>TCP简介</h4><blockquote><p>tcp协议 传输控制协议 是一种面向连接的 可靠的 基于字节流的传输通讯协议  </p></blockquote><p>创建连接 数据传送 终止连接 三个步骤</p><p>TCP特点：</p><p>1 面向连接</p><p>2 可靠传输</p><pre><code>tcp采用发送应答机制超时重传错误校验流量控制和阻塞管理</code></pre><p>TCP与UDP的不同点</p><pre><code>面向连接有序数据传输重发丢失的数据包舍弃重复的数据包无差错的数据传输阻塞/流量控制</code></pre><p>通信流程：</p><p>client客户端：socket对象—-&gt; connect—-&gt;send(recv)—&gt;close</p><p>server服务端:socket对象—-&gt;bind—-&gt;listen—-&gt;accept——&gt;recv(send)—&gt;close</p><p>tcp客户端实现步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入socket模块</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 2.创建socket套接字</span></span><br><span class="line">tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment"># 3.建立tcp连接（和服务器端建立连接）</span></span><br><span class="line">tcp_client_socket.connect((<span class="string">&quot;192.168.162.35&quot;</span>, <span class="number">8080</span>))</span><br><span class="line"><span class="comment"># 4.开始发送数据（到服务器）</span></span><br><span class="line">tcp_client_socket.send(<span class="string">&quot;字符串数据&quot;</span>.encode())</span><br><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line">recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;接收到的数据是%s&quot;</span>%recv_data.decode())</span><br><span class="line"><span class="comment"># 5.关闭套接字</span></span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure><p>tcp服务端实现步骤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 1. socket套接字创建</span></span><br><span class="line">tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment"># 2.bind绑定ip和root</span></span><br><span class="line">tcp_server_socket.bind((<span class="string">&quot;192.168.162.65&quot;</span>, <span class="number">8000</span>))</span><br><span class="line"><span class="comment"># 3.listen启用服务端侦听状态</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"><span class="comment"># 4.accept等待客户端接入 返回当前连接的套接字以及连如的ip和端口</span></span><br><span class="line">client_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line"><span class="comment"># 5.recv/send 收发数据</span></span><br><span class="line">recv_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;接收到的数据是%s&quot;</span>%recv_data.decode())</span><br><span class="line">client_socket.send(<span class="string">&quot;好的收到&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接的客户端套接字</span></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><h5 id="tcp增强版-多客户端-多信息"><a href="#tcp增强版-多客户端-多信息" class="headerlink" title="tcp增强版  多客户端 多信息"></a>tcp增强版  多客户端 多信息</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcp 服务器 允许多客户端 多条信息 接收  但无法实现同时客户端接入</span></span><br><span class="line"><span class="comment"># 导入socket 套接字</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建sokcet套接字</span></span><br><span class="line">tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 地址重用</span></span><br><span class="line">tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 绑定端口</span></span><br><span class="line">tcp_server_socket.bind((<span class="string">&#x27;192.168.162.163&#x27;</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启侦听</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启循环 接收多台客户端连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 接收客户端连接 返回 客户端套接字对象 以及端口和ip</span></span><br><span class="line">    tcp_client_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[新客户端来了]&quot;</span>, ip_port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 得到返回的结果为二进制数据</span></span><br><span class="line">        recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> recv_data:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data_con = recv_data.decode()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;错误输出:&quot;</span>, err)</span><br><span class="line">                data_con = recv_data.decode(encoding=<span class="string">&quot;gbk&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;信息内容为:&quot;</span>, data_con)</span><br><span class="line">            tcp_client_socket.send(<span class="string">&#x27;好的收到&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;数据读取完毕，客户端可能断开&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp_server_socket.close()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="备注—-SOCKET设置"><a href="#备注—-SOCKET设置" class="headerlink" title="备注—-SOCKET设置"></a>备注—-SOCKET设置</h4><h5 id="1-创建socket套接字"><a href="#1-创建socket套接字" class="headerlink" title="1.创建socket套接字"></a>1.创建socket套接字</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span> ： domain</span><br><span class="line">AF_INET Ipv4 网络协议</span><br><span class="line">AF_INET6 Ipv6网络协议</span><br><span class="line">参数<span class="number">2</span>: 通信的协议类型</span><br><span class="line">SOCK_STREAM TCP协议</span><br><span class="line">OOB 在所有数据传送前必须使用connect来建立连接</span><br><span class="line">SOCK_DGRAM 使用不连续不可靠的数据包连接 UDP协议</span><br><span class="line">SOCK_SEQPACKET:提供连续可靠的数据包连接</span><br><span class="line">SOCK_RAW 提供原始网络协议存取</span><br><span class="line">SOCK_PACKET 与网络驱动程序直接通信</span><br><span class="line">参数<span class="number">3</span> protocol 协议编号 一般设置为<span class="number">0</span> 或者忽略</span><br></pre></td></tr></table></figure><h5 id="2-socket-setsockopt-level-optname-value"><a href="#2-socket-setsockopt-level-optname-value" class="headerlink" title="2.socket.setsockopt(level, optname, value)"></a>2.socket.setsockopt(level, optname, value)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">optname:</span><br><span class="line">    SO_REUSEADDR 打开或关闭地址复用</span><br><span class="line">    SO_DONTROUTE 打开或者关闭路由查找功能</span><br><span class="line">    SO_BROADCAST 允许或者禁止发送广播数据</span><br><span class="line">    SO_SNDBUF 设置发送缓冲区的大小</span><br><span class="line">    SO_RCVBUF 设置接收缓冲区的大小</span><br><span class="line">    SO_RCVTIMEO 设置接收超时时间</span><br><span class="line">    SO_SNDTIMEO 设置发送超时时间</span><br></pre></td></tr></table></figure><h5 id="tcp可靠-udp不可靠的原因"><a href="#tcp可靠-udp不可靠的原因" class="headerlink" title="tcp可靠  udp不可靠的原因"></a>tcp可靠  udp不可靠的原因</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcp 在socket内核中有 接收和发送缓冲区 tcp的全双工模式以及tcp的滑动的窗口便是依赖于这两个独立的buffer  防止缓冲区溢出，滑动窗口自动关闭，保证数据不丢失</span></span><br><span class="line"><span class="comment"># udp 只有一个接收缓冲区 没有发送缓冲区，原则上只要有数据 就会发送 不论对方数据接收缓冲区是否溢出 所以可能会造成数据丢失</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="tcp注意点"><a href="#tcp注意点" class="headerlink" title="tcp注意点"></a>tcp注意点</h5><ol><li>tcp服务器端 一般需要绑定端口和ip， tcp客户端主动连接，不需要 </li><li>tcp服务器中通过listen 启用侦听状态 变为被动接受连接</li><li>当tcp客户端连接入，会产生专为此客户端服务的套接字，标记这个客户端</li><li>关闭listen 之后 后续的客户端无法连接入  而之前的建立的客户端可以正常通信</li><li>关闭accpet返回的套接字意味着该客户端已经服务完毕</li><li>当客户端的套接字调用close后，服务器端recv解堵塞，返回长度为0的数据，因此通过此长度判断客户端是否已经下线</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见linux指令以及文件操作指令</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/02.%E5%B8%B8%E8%A7%81linux%E6%8C%87%E4%BB%A4%E4%BB%A5%E5%8F%8A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/02.%E5%B8%B8%E8%A7%81linux%E6%8C%87%E4%BB%A4%E4%BB%A5%E5%8F%8A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="day02-常见指令"><a href="#day02-常见指令" class="headerlink" title="day02-常见指令"></a>day02-常见指令</h3><h5 id="1-cal日历"><a href="#1-cal日历" class="headerlink" title="1. cal日历"></a>1. cal日历</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cal<span class="comment"># 显示当月的日历</span></span><br><span class="line">cal -<span class="number">3</span>  <span class="comment"># 显示3个月的日历</span></span><br><span class="line">cal -y  <span class="comment"># 显示全年日历</span></span><br><span class="line">cal -j  <span class="comment"># 显示全年第几天</span></span><br></pre></td></tr></table></figure><h5 id="2-date"><a href="#2-date" class="headerlink" title="2.date"></a>2.date</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">date 显示日期</span><br><span class="line">date <span class="string">&quot;+%Y年%m月%d日 %H时%M分%S秒&quot;</span></span><br><span class="line">date <span class="string">&quot;+%F %T&quot;</span>  <span class="comment"># 2018-09-03 09:01:16</span></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">date <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span></span><br></pre></td></tr></table></figure><h5 id="3-history-历史"><a href="#3-history-历史" class="headerlink" title="3.history 历史"></a>3.history 历史</h5><blockquote><p>显示指定数目的指令命令 读取历史命令中的目录到历史命令缓冲区和将历史命令缓冲区命令写入命令文件（家目录home下的隐藏文件 .bash_histroy中）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">history <span class="number">100</span>  <span class="comment"># 显示历史100条指令</span></span><br><span class="line"><span class="comment"># !指定编号</span></span><br><span class="line">！<span class="number">205</span></span><br></pre></td></tr></table></figure><h4 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h4><h5 id="1-cat查看或合并文件内容"><a href="#1-cat查看或合并文件内容" class="headerlink" title="1.cat查看或合并文件内容"></a>1.cat查看或合并文件内容</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="number">1.</span>txt  <span class="comment"># 在命令中查看内容</span></span><br><span class="line">cat -n <span class="number">1.</span>txt  <span class="comment"># 显示中添加行号</span></span><br><span class="line">cat -b <span class="number">1.</span>txt  <span class="comment"># 显示行号 但空行没有编号</span></span><br><span class="line">cat -s <span class="number">1.</span>txt  <span class="comment"># 合并多行空行 为一行空行</span></span><br><span class="line">cat -sb <span class="number">1.</span>txt  <span class="comment"># 显示行号，空行没有编号 并且多行空格合并为一个空行</span></span><br><span class="line"></span><br><span class="line">cat -sb /etc/services</span><br></pre></td></tr></table></figure><h5 id="2-more分屏查看文件内容"><a href="#2-more分屏查看文件内容" class="headerlink" title="2.more分屏查看文件内容"></a>2.more分屏查看文件内容</h5><blockquote><p>以全屏幕的方式 分页显示文本文件的内容</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">more <span class="number">2.</span>txt</span><br><span class="line">more /etc/services  <span class="comment"># 通过空格翻页 回车 行增加 ctrl+f 往前一页 ctrl+b  后退一页  q 退出</span></span><br><span class="line"><span class="comment"># 类似于 man ls 查看相关说明文档</span></span><br><span class="line">more -p <span class="number">1.</span>txt 清空之前的内容（清屏）</span><br><span class="line">more -s <span class="number">1.</span>txt 合并多行空行为一行空行</span><br><span class="line">more +<span class="number">5</span> /etc/services 从文件的第五行开始显示内容</span><br></pre></td></tr></table></figure><h3 id="常用命令-数据流，管道"><a href="#常用命令-数据流，管道" class="headerlink" title="常用命令-数据流，管道"></a>常用命令-数据流，管道</h3><blockquote><p>> - 数据流重定向  |  - 管道命令</p></blockquote><h5 id="1-数据流及输出重定向命令-：-gt"><a href="#1-数据流及输出重定向命令-：-gt" class="headerlink" title="1.数据流及输出重定向命令 ： &gt;"></a>1.数据流及输出重定向命令 ： &gt;</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello world&quot; &gt; helloworld.txt</span><br><span class="line"></span><br><span class="line">ls -l &gt; ls.txt  # 输出重定向</span><br><span class="line"></span><br><span class="line">echo &quot;hello&quot; &gt;&gt; hello.txt  输出追加重定向</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-管道"><a href="#2-管道" class="headerlink" title="2. 管道 |"></a>2. 管道 |</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l / | more</span><br><span class="line"></span><br><span class="line">touch 10.txt | gedit 10.txt  # 左侧需要输出</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用命令-建立连接"><a href="#常用命令-建立连接" class="headerlink" title="常用命令 - 建立连接"></a>常用命令 - 建立连接</h4><h5 id="1-建立链接文件：-In"><a href="#1-建立链接文件：-In" class="headerlink" title="1.建立链接文件： In"></a>1.建立链接文件： In</h5><blockquote><p>类似于window下的快捷方式  分为软链接 和 硬链接</p></blockquote><pre><code>1.1 软链接：快捷方式 不占用磁盘空间 源文件删除则软链接失效</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ln -s 源文件 链接文件</span></span><br><span class="line">ln -s 1.txt softlink1_1.txt  (l标识符l 为链接文件)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以创建多个软链接</span></span><br><span class="line">ln -s 1.txt softlink2_1.txt</span><br><span class="line">ln -s 1.txt softlink3_1.txt</span><br></pre></td></tr></table></figure><pre><code>1.2 硬链接：文件的一个名字或者多个名字</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ln 源文件 链接文件</span></span><br><span class="line">ln 2.txt hardlink1_2.txt</span><br><span class="line">ln 2.txt hardlink2_2.txt</span><br></pre></td></tr></table></figure><blockquote><ol><li>软链接可以跨文件系统  硬链接不可以</li><li>软链接可以给一个不存在的文件做快捷方式 硬链接不可以</li><li>软链接可以给文件目录做快捷方式  硬链接不可以</li></ol></blockquote><h4 id="常用命令-文件搜索"><a href="#常用命令-文件搜索" class="headerlink" title="常用命令-文件搜索"></a>常用命令-文件搜索</h4><h5 id="1-文本搜索：grep"><a href="#1-文本搜索：grep" class="headerlink" title="1.文本搜索：grep"></a>1.文本搜索：grep</h5><blockquote><p>linux系统中grep命令时一种强大的文本搜索工具，grep允许对文本文件进行模式查找</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt</span><br><span class="line">grep &quot;worker&quot; test.txt  # worker wang  worker su</span><br><span class="line"></span><br><span class="line">grep &quot;worker&quot; test.txt -i  # 忽略大小写</span><br><span class="line"></span><br><span class="line">grep &quot;worker&quot; test.txt -in  # 加上行号</span><br><span class="line"></span><br><span class="line">grep &quot;worker&quot; test.txt -v  # 取反</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> grep可以使用正则表达式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ^w</span> </span><br></pre></td></tr></table></figure><h5 id="2-查找文件：-find"><a href="#2-查找文件：-find" class="headerlink" title="2.查找文件： find"></a>2.查找文件： find</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name ls.txt</span><br><span class="line">find / -name &#x27;^a\s*(.txt)$&#x27;  # 根目录全局搜索</span><br><span class="line">find ./ -size +5M   # 目前搜索只能以M为单位  小于 -</span><br><span class="line">find ./ -size +10M -size -30M  # 按照大小范围搜索</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用命令-归档和压缩"><a href="#常用命令-归档和压缩" class="headerlink" title="常用命令 - 归档和压缩"></a>常用命令 - 归档和压缩</h4><h5 id="1-归档和压缩的概念"><a href="#1-归档和压缩的概念" class="headerlink" title="1.归档和压缩的概念"></a>1.归档和压缩的概念</h5><ul><li>tar - 归档指令</li><li>gzip - 压缩指令</li></ul><blockquote><p>归档： 将多个文件打包成一个文件 便于保存和传输</p><p>压缩：对文件进行体积压缩</p></blockquote><h5 id="2-归档管理-tar"><a href="#2-归档管理-tar" class="headerlink" title="2.归档管理 tar"></a>2.归档管理 tar</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-c 生成档案文件 创建打包文件</span><br><span class="line">-w 列出归档解档的详细过程  显示进度</span><br><span class="line">-x 解开档案文件</span><br><span class="line">-f 指定档案文件名称</span><br><span class="line">-t 列出档案中包含的文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf 1-2.tar 1.txt 2.txt   # 归档</span><br><span class="line"></span><br><span class="line">tar -xvf 1-2.tar  # 解档</span><br></pre></td></tr></table></figure><h5 id="3-文件压缩解压：gzip"><a href="#3-文件压缩解压：gzip" class="headerlink" title="3.文件压缩解压：gzip"></a>3.文件压缩解压：gzip</h5><blockquote><p>tar与gzip结合使用实现打包压缩 最终扩展名为xxx.tar.gz文件     </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gzip 1-2.tar   # 对tar归档文件进行压缩 成为1-2.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gzip -d 1-2.tar.gz  # 解压</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 归档和压缩一起进行  提升效率</span></span><br><span class="line">tar -zcvf  1-2.tar.gz 1.txt 2.txt</span><br><span class="line"></span><br><span class="line">tar -zxvf  1-2.tar.gz</span><br></pre></td></tr></table></figure><h4 id="常用命令-归档和压缩-2"><a href="#常用命令-归档和压缩-2" class="headerlink" title="常用命令- 归档和压缩(2)"></a>常用命令- 归档和压缩(2)</h4><blockquote><p>bzip2  </p><p>zip、 unzip</p></blockquote><h5 id="1-文件压缩解压-bzip2"><a href="#1-文件压缩解压-bzip2" class="headerlink" title="1.文件压缩解压 bzip2"></a>1.文件压缩解压 bzip2</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bzip2 1-2.tar   # 1-2.tar.bz2</span><br><span class="line"></span><br><span class="line">bzip2 -d 1-2.tar.bz2 </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 联合使用</span></span><br><span class="line">tar -jcvf 1-2.tar.bz2 1.txt 2.txt</span><br><span class="line"></span><br><span class="line">tar -jxvf 1-2.tar.bz2</span><br></pre></td></tr></table></figure><h5 id="2-文件压缩解压：zip-unzip"><a href="#2-文件压缩解压：zip-unzip" class="headerlink" title="2.文件压缩解压：zip / unzip"></a>2.文件压缩解压：zip / unzip</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip -r a.zip a   # 压缩a目录  a.zip</span><br><span class="line"></span><br><span class="line">unzip a.zip</span><br></pre></td></tr></table></figure><blockquote><p>gzip 常用 压缩体积小</p></blockquote><h4 id="常用命令-文件权限介绍"><a href="#常用命令-文件权限介绍" class="headerlink" title="常用命令-文件权限介绍"></a>常用命令-文件权限介绍</h4><blockquote><p>which - 查看命令位置</p></blockquote><h5 id="1-查看命令位置-which"><a href="#1-查看命令位置-which" class="headerlink" title="1.查看命令位置 which"></a>1.查看命令位置 which</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">which ls</span><br><span class="line">which python3</span><br><span class="line"></span><br><span class="line">cd /bin</span><br></pre></td></tr></table></figure><h5 id="2-文件权限"><a href="#2-文件权限" class="headerlink" title="2.文件权限"></a>2.文件权限</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rwx r-x r--</span><br><span class="line">u    g   o      all 所有用户</span><br><span class="line">文件所属用户的权限  文件所属组的权限  其他用户的权限</span><br></pre></td></tr></table></figure><p><strong>chmod</strong> - 修改文件权限  </p><ol><li><p>字母法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod u +x 1.txt   # 给当前用户增加一个可执行权限</span><br><span class="line">chmod o +w 1.txt   # 给其他用户增加一个可写权限</span><br><span class="line">chmod g=rwx 1.txt  # 给当前组 设定权限</span><br><span class="line">chmod a-x 1.txt   # 给所有的用户撤销可执行权限</span><br><span class="line"></span><br><span class="line">chmod a= 1.txt  # 给所有的用户全部撤销权限</span><br></pre></td></tr></table></figure></li><li><p>数字法：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- r  4</span><br><span class="line">- w  2</span><br><span class="line">- x  1</span><br><span class="line">- -  0</span><br><span class="line">chmod 744 目录 或者 文件   （如果将目录的权限传递给子目录和文件 后面加 -R）</span><br></pre></td></tr></table></figure><h4 id="常用命令-用户管理"><a href="#常用命令-用户管理" class="headerlink" title="常用命令 - 用户管理"></a>常用命令 - 用户管理</h4><h5 id="1-切换到管理员账号"><a href="#1-切换到管理员账号" class="headerlink" title="1.切换到管理员账号"></a>1.切换到管理员账号</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu下切换到root的简单命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $表示普通用户  <span class="comment"># root用户</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo 临时提升到管理员权限</span></span><br><span class="line"></span><br><span class="line">sudo -s  # 切换到管理员权限 需要输入当前用户权限</span><br><span class="line"></span><br><span class="line">su root  # 需要输入root的密码</span><br><span class="line">su teacher # 切换到指定用户</span><br></pre></td></tr></table></figure><h5 id="2-设置用户密码：password"><a href="#2-设置用户密码：password" class="headerlink" title="2.设置用户密码：password"></a>2.设置用户密码：password</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">passwd  更改当前的用户密码  有强度限制</span><br><span class="line"></span><br><span class="line">sudo -s  # 切换到管理员</span><br><span class="line">passwd teacher  设置用户密码 不考虑强度</span><br></pre></td></tr></table></figure><h5 id="3-退出用户登陆exit"><a href="#3-退出用户登陆exit" class="headerlink" title="3.退出用户登陆exit"></a>3.退出用户登陆exit</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br><span class="line">exit   # 退出当前用户  逐级往前一个用户账号</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">whoami  # 查看当前用户</span><br><span class="line"></span><br><span class="line">who  </span><br><span class="line">who -q</span><br><span class="line">who -u</span><br><span class="line"></span><br><span class="line">ssh teacher@192.168.162.61</span><br></pre></td></tr></table></figure><h4 id="常用命令-关机-，重启"><a href="#常用命令-关机-，重启" class="headerlink" title="常用命令-关机 ，重启"></a>常用命令-关机 ，重启</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h 13:00</span><br><span class="line">reboot </span><br><span class="line">shutdown -r now</span><br><span class="line">shutdown -h now</span><br><span class="line">shutdown -h +10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统简介以及基础指令</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/01.%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/01.%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h2><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><h5 id="1-操作系统（Operating-System）"><a href="#1-操作系统（Operating-System）" class="headerlink" title="1.操作系统（Operating System）"></a>1.操作系统（Operating System）</h5><blockquote><p>是管理和控制计算机硬件与软件资源的计算机程序</p></blockquote><p><img src="/media/images/pic/QQ20180904-230814@2x.png" alt="QQ20180904-230814@2x"></p><p><strong>操作系统的不同应用领域</strong></p><ul><li><p>桌面os —-windows  macos  linux</p></li><li><p>服务器os  windows  Linux  unix</p></li><li><p>嵌入式os  linux   wince</p><p><img src="/media/images/pic/QQ20180904-230353@2x.png" alt="QQ20180904-230353@2x"></p></li><li><p>移动设备os   iOS  android</p></li></ul><h5 id="2-操作系统的作用"><a href="#2-操作系统的作用" class="headerlink" title="2.操作系统的作用"></a>2.操作系统的作用</h5><blockquote><ol><li>对下控制硬件运行，对上为应用程序提供支持</li><li>是现代计算机系统中最基本和最重要的系统软件</li><li>是配置在计算机硬件上的第一层软件 是对硬件系统的首次扩展</li></ol></blockquote><h5 id="3-Linux系统的发展史"><a href="#3-Linux系统的发展史" class="headerlink" title="3.Linux系统的发展史"></a>3.Linux系统的发展史</h5><p><strong>Unix</strong></p><blockquote><p>1970 年 美国贝尔实验室的ken Thompson 用B语言写了第一个unix操作系统</p><p>1972年 Dennis M.Ritchie 丹尼斯·里奇  开发出了C语言</p></blockquote><p><strong>Minix</strong></p><blockquote><p>塔能鲍姆 发明了小型UNIX 称为MINIX</p></blockquote><p><strong>Linux</strong></p><blockquote><p>1991年 林纳斯 开发了linux内核</p><p>内核（kernel）是系统的心脏 是运行程序和管理向磁盘和打印机等硬件设备的核心程序</p><p>内核版本分为 稳定版 和开发版</p></blockquote><p>内核源码网址：<a href="http://www.kernel.org">http://www.kernel.org</a></p><p><strong>发行版本</strong>也被叫做GNU ，通常包括桌面环境 办公套件 媒体播放器数据库等应用</p><p>linux发行版 = linux内核 + 一套软件 + 使用手册</p><p><strong>常见发行版本 </strong>:Ubuntu  Redhat  CentOS 等</p><p><img src="/media/images/pic/QQ20180904-230335@2x.png" alt="QQ20180904-230335@2x"></p><h4 id="Linux系统应用领域"><a href="#Linux系统应用领域" class="headerlink" title="Linux系统应用领域"></a>Linux系统应用领域</h4><ul><li><p>Linux 免费 稳定 高效特点 在服务器领域应用广泛</p></li><li><p>嵌入式领域：Linux运行稳定 对网络的良好支持 低成本 内核可以按需裁剪 最小达几百kB 适合嵌入式开发</p><blockquote><p>主要应用：机顶盒 数字电视 网络电话 程控交换机 手机等</p></blockquote></li><li><p>个人桌面领域：应用较少 操作复杂 一直被windows所压制</p><p>产生了Ubuntu Fedora等优秀桌面系统 </p></li></ul><h4 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h4><h5 id="1-单用户操作系统和多用户操作系统"><a href="#1-单用户操作系统和多用户操作系统" class="headerlink" title="1.单用户操作系统和多用户操作系统"></a>1.单用户操作系统和多用户操作系统</h5><ul><li><p>单用户操作系统   指的是一台计算机在同一时间只能由一个用户使用</p><p>windowXp之前的系统都是单用户的</p></li><li><p>多用户操作系统  指一台计算机在同一时间可以由多个用户使用</p><p>Unix 和Linux 设计初衷就是多用户操作系统</p></li></ul><h5 id="2-windows-和-Linux文件系统的区别"><a href="#2-windows-和-Linux文件系统的区别" class="headerlink" title="2. windows 和 Linux文件系统的区别"></a>2. windows 和 Linux文件系统的区别</h5><ul><li>windows 下 是一个个的驱动器盘符 每个驱动器都有自己的根目录结构，形成多个树并列</li><li>Linux下 没有驱动器 只有一个根目录/   所有的文件都在它下面</li></ul><p><strong>用户（主/家）目录</strong></p><p>位于 /home/user</p><blockquote><p>teacher@teacher - VirtualBox：~$ （～表示用户在自己的家目录）</p></blockquote><p><strong>常用目录</strong></p><ul><li>/:根目录</li><li>/bin， /usr/bin  可执行二进制文件的目录 如常用的命令ls  tar  mv  cat 等</li><li>/boot  放置linux系统启动时用到一些文件 如Linux的内核文件： /boot/vmlinuz   系统引导管理器: /boot/grub</li><li>/dev 系统设备文件  常用的是挂在光驱 mount/dev/cdrom /mnt</li><li>/etc: 系统配置文件存放的目录  重要配置文件有<ul><li>/etc/inittab</li><li>/etc/fstab</li><li>/etc/init.d</li><li>/etc/init.d</li><li>/etc/X11</li><li>/etc/sysconfig</li><li>/etc/xinetd.d </li></ul></li><li>/home: 系统默认的用户家目录 新增用户存放在此</li><li>/lib, /usr/lib, /usr/local/lib: 系统使用的函数库的目录</li></ul><h4 id="Linux-终端命令格式"><a href="#Linux-终端命令格式" class="headerlink" title="Linux 终端命令格式"></a>Linux 终端命令格式</h4><blockquote><p>终端Termial通常是一个软件控制台  </p></blockquote><p>ctrl + alt + t  快捷键打开方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command [-options] [parameter]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 说明</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">command</span>: 命令名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [-options]: 可用来对命令进行控制 也可以省略</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [parameter]: 传给命令的参数  可以是零个  一个 或者多个</span></span><br></pre></td></tr></table></figure><p><strong>—help</strong></p><p><code>command --help</code></p><p>说明：显示 command命令的帮助信息</p><p><strong>man</strong></p><p><code>man command</code></p><p>说明:查阅command 命令的使用手册</p><div class="table-container"><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>下一屏</td></tr><tr><td>Enter键</td><td>一行一行查看</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>/word</td><td>搜索word字符串</td></tr></tbody></table></div><h4 id="常用命令-显示文件和目录"><a href="#常用命令-显示文件和目录" class="headerlink" title="常用命令-显示文件和目录"></a>常用命令-显示文件和目录</h4><ul><li>pwd -显示当前路径</li><li>tree - 树状列出目录内容</li><li>ls -  列表查看目录中的文件或文件夹<ul><li>-a 显示目录下的子目录或文件 包括隐藏文件</li><li>-h  配合-l 友好方式展示 (最直接是以文件大小K，M显示)</li><li>-l  以列表方式显示文件的详细信息</li></ul></li><li><img src="/media/images/pic/QQ20180904-225935@2x.png" alt="QQ20180904-225935@2x"></li></ul><h4 id="常用命令-切换工作目录"><a href="#常用命令-切换工作目录" class="headerlink" title="常用命令-切换工作目录"></a>常用命令-切换工作目录</h4><p><img src="/media/images/pic/QQ20180904-230603@2x.png" alt="QQ20180904-230603@2x"></p><h4 id="常用命令—创建文件和文件夹"><a href="#常用命令—创建文件和文件夹" class="headerlink" title="常用命令—创建文件和文件夹"></a>常用命令—创建文件和文件夹</h4><ul><li><p>mkdir 创建目录</p><ul><li><p>-p  递归创建目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nkdir a/b/c/d -p</span><br></pre></td></tr></table></figure></li></ul></li><li><p>touch 创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch hello.txt</span><br></pre></td></tr></table></figure></li><li><p>gedit  编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  打开单个文件</span> </span><br><span class="line">gedit 1.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开多个文件</span></span><br><span class="line">gedit 1.txt 2.txt</span><br></pre></td></tr></table></figure></li></ul><h4 id="常用命令-删除文件和文件夹"><a href="#常用命令-删除文件和文件夹" class="headerlink" title="常用命令-删除文件和文件夹"></a>常用命令-删除文件和文件夹</h4><ul><li>删除文件 rm<ul><li>-i  以交互式方式执行 有提示</li><li>-f  强制删除 忽略不存在的文件 无需提示</li><li>-r  递归删除目录下的内容  删除文件夹时必须加此参数</li></ul></li></ul><h4 id="常用命令-拷贝copy"><a href="#常用命令-拷贝copy" class="headerlink" title="常用命令 - 拷贝copy"></a>常用命令 - 拷贝copy</h4><ul><li>拷贝： cp<ul><li>-f  已经存在的目标文件 不提示</li><li>-i  交互式复制 覆盖目标文件之前有提示</li><li>-r 拷贝目录到 到另一个地方 且目标文件必须是目录名</li><li>-v  显示拷贝进度</li></ul></li></ul><h4 id="常用命令—移动文件和文件夹"><a href="#常用命令—移动文件和文件夹" class="headerlink" title="常用命令—移动文件和文件夹"></a>常用命令—移动文件和文件夹</h4><ul><li>mv  移动 或重命名<ul><li>-f 禁止交互式操作 覆盖无提示</li><li>-i 确认交互方式</li><li>-v 显示移动进度</li></ul></li></ul><h4 id="常用命令-其他"><a href="#常用命令-其他" class="headerlink" title="常用命令-其他"></a>常用命令-其他</h4><ol><li>clear 清屏</li><li>tab 自动补全 （输入如果有歧义 则不显示  再次按下tab 则提示有哪些）</li><li>小技巧：<ol><li>放大缩小窗口字体</li><li>上下光标切换命</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第9节-异常处理/模块与包</title>
      <link href="/blog/python%E6%95%99%E7%A8%8B/09.%E5%BC%82%E5%B8%B8%E4%BB%A5%E5%8F%8A%E5%8C%85%E5%92%8C%E6%A8%A1%E5%9D%97/"/>
      <url>/blog/python%E6%95%99%E7%A8%8B/09.%E5%BC%82%E5%B8%B8%E4%BB%A5%E5%8F%8A%E5%8C%85%E5%92%8C%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h4 id="1-异常的概念"><a href="#1-异常的概念" class="headerlink" title="1. 异常的概念"></a>1. 异常的概念</h4><blockquote><p>异常就是在程序执行过程中，发生  并影响程序的正常执行 在python中无法正常处理的程序就发生一个异常  一个异常就是一个错误， 当脚本发生异常时候，我们要捕获处理它 否则程序将终止程序</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)  <span class="comment"># 当文件不存在的时候 会发生报错 </span></span><br><span class="line">con = f.read()</span><br><span class="line"><span class="built_in">print</span>(con)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;后续程序&#x27;</span>)  <span class="comment"># 后续程序无法运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用try……except……捕获异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    con = f.read()</span><br><span class="line">    <span class="built_in">print</span>(con)</span><br><span class="line"><span class="keyword">except</span>:  <span class="comment"># 此处默认捕获各种类型的异常</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序出现了异常&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">尝试运行try语句中的代码 如果代码出现异常 则捕获报错 而是交给except去捕获并处理异常  这是一个异常容错机制 类似于javascript中的try……catch语句</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>    </span><br><span class="line"><span class="comment"># 作用：有效避免了程序报错退出  增强了代码的稳定性</span></span><br></pre></td></tr></table></figure><h4 id="2-常见错误"><a href="#2-常见错误" class="headerlink" title="2.常见错误"></a>2.常见错误</h4><div class="table-container"><table><thead><tr><th>错误类型</th><th>解释</th></tr></thead><tbody><tr><td>NameError</td><td>未声明/初始化错误</td></tr><tr><td>Exception</td><td>常规错误基类</td></tr><tr><td>FileNotFountError</td><td>文件不存在</td></tr></tbody></table></div><h4 id="3-完整的异常容错机制"><a href="#3-完整的异常容错机制" class="headerlink" title="3.完整的异常容错机制"></a>3.完整的异常容错机制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    尝试运行的程序</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    如果出现错误 则进入<span class="keyword">except</span>语句中 进行捕获处理</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    如果没有异常 则进入<span class="keyword">else</span>语句中执行相应的代码</span><br><span class="line"><span class="keyword">finally</span>：</span><br><span class="line">无论是否出现异常 都会执行这里的代码</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    con = f.read()</span><br><span class="line">    <span class="built_in">print</span>(con)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;有异常，异常时%s&quot;</span>%err)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;如果没有错误 则执行这里的代码&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最终执行这里了&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 嵌套语句</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       <span class="built_in">print</span>(aa)</span><br><span class="line">    <span class="keyword">except</span> NameError <span class="keyword">as</span> error:</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line"> <span class="keyword">except</span> Exception <span class="keyword">as</span> Error: <span class="comment"># 所有错误的基类</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;再次捕获错误%s&quot;</span>%Error)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># try有嵌套的情况 会将异常进行传递</span></span><br></pre></td></tr></table></figure><h4 id="4-自定义异常的使用方法"><a href="#4-自定义异常的使用方法" class="headerlink" title="4.自定义异常的使用方法"></a>4.自定义异常的使用方法</h4><blockquote><p>rasie 使用该语句 可以自动触发异常（抛出异常）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomException</span>(<span class="params">Excetion</span>):</span>  <span class="comment"># 自定义一个异常</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>：</span><br><span class="line">tel = <span class="built_in">input</span>(<span class="string">&quot;请输入手机号&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tel) ! =<span class="number">11</span>  <span class="keyword">or</span> <span class="keyword">not</span> (tel.isdigit()):</span><br><span class="line">        rasie CustomException(<span class="string">&quot;The prompt is not a tel number&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> CustomException <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;异常: %s&#x27;</span>%error)</span><br></pre></td></tr></table></figure><h3 id="Python-模块"><a href="#Python-模块" class="headerlink" title="Python 模块"></a>Python 模块</h3><h5 id="模块的概念"><a href="#模块的概念" class="headerlink" title="模块的概念"></a>模块的概念</h5><p>python模块是一个python文件 任何以.py结尾的 都可以作为模块导入</p><p>模块内容可以是全局变量 函数  类  和可以执行的代码、</p><h5 id="引入模块的不同方式"><a href="#引入模块的不同方式" class="headerlink" title="引入模块的不同方式"></a>引入模块的不同方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 文件名</span><br><span class="line"><span class="comment"># 任何.py文件都可以作为模块导入</span></span><br><span class="line"><span class="comment"># 导入模块的方式1 </span></span><br><span class="line"><span class="comment"># import module</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块的第二种方式是</span></span><br><span class="line"><span class="keyword">from</span> 文件名  <span class="keyword">import</span> 名字</span><br><span class="line"><span class="comment"># 局部导入 从模块中导入指定部分到当前的空间中</span></span><br><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> fun1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from……import * 语句</span></span><br><span class="line"><span class="comment"># 把每一个模块所有的内容都导入到当前的空间</span></span><br><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> *</span><br><span class="line">fun1()</span><br><span class="line"><span class="built_in">print</span>(count)</span><br><span class="line"><span class="built_in">print</span>(Dog())</span><br></pre></td></tr></table></figure><h5 id="导入模块时-all-的作用"><a href="#导入模块时-all-的作用" class="headerlink" title="导入模块时_all_的作用"></a>导入模块时_<em>all_</em>的作用</h5><blockquote><p>主要用来控制模块 from XX import * 导入的内容</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A 模块中</span></span><br><span class="line"><span class="keyword">from</span> B <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(count)</span><br><span class="line">dog1 = Dog()</span><br><span class="line">fun1()</span><br><span class="line"><span class="comment"># B 模块中</span></span><br><span class="line">__all__ = [<span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;Dog&#x27;</span>, <span class="string">&#x27;fun1&#x27;</span>]</span><br><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h5 id="name"><a href="#name" class="headerlink" title="_name_"></a>_<em>name_</em></h5><blockquote><p>_<em>name_</em> 就是标识模块的名字的一个系统变量</p></blockquote><p><strong>主动执行文件时， __<em>name\</em>_ 是 __main__</strong></p><p><strong>作为模块被导入时  _<em>name_</em> 是文件名</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A模块中</span></span><br><span class="line"><span class="keyword">import</span> B <span class="keyword">as</span> b</span><br><span class="line"><span class="built_in">print</span>(__name__) <span class="comment"># __main__</span></span><br><span class="line"><span class="built_in">print</span>(b.__name__) <span class="comment"># B</span></span><br><span class="line"><span class="comment"># B模块中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>import  sys   sys.path 获得python解释器查询模块的目录</p></blockquote><h5 id="理解python包的概念"><a href="#理解python包的概念" class="headerlink" title="理解python包的概念"></a>理解python包的概念</h5><blockquote><p>包:  在项目中的子文件夹  </p><p>作用: 对同类功能的模块进行目录的整合</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块的时候</span></span><br><span class="line"><span class="keyword">import</span> msg.send</span><br><span class="line"><span class="comment"># 包名.文件名.函数</span></span><br><span class="line">msg.send.msg_send_fun()</span><br><span class="line"><span class="comment"># 在包中的子文件夹中的文件 也得加上包名  即使是同级</span></span><br></pre></td></tr></table></figure><h5 id="了解-init-py-文件的作用"><a href="#了解-init-py-文件的作用" class="headerlink" title="了解__init__.py 文件的作用"></a>了解__init__.py 文件的作用</h5><blockquote><p>在python2 解释器中  如果创建包的时候 如果没有__init__.py文件就会报错</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第8节-面向对象2</title>
      <link href="/blog/python%E6%95%99%E7%A8%8B/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/"/>
      <url>/blog/python%E6%95%99%E7%A8%8B/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第二个魔法方法"><a href="#第二个魔法方法" class="headerlink" title="第二个魔法方法"></a>第二个魔法方法</h2><p><strong><strong>str</strong>(self)魔法方法</strong></p><blockquote><p>如果直接print打印对象 就会看到创建出来的对象在内存中的地址</p><p><strong>str</strong>使用print(对象)输出对象的时候，自动调用该方法 </p><p>该方法通常会返回一个返回值 类型为字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> 返回值</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;描述信息&quot;</span></span><br><span class="line">one = Dog()</span><br><span class="line"><span class="built_in">print</span>(one)</span><br></pre></td></tr></table></figure><p><strong><strong>del</strong>(self)魔法方法</strong></p><p>_<strong>_de</strong>l__(self):</p><blockquote><p>当对象在销毁前 自动调用该方法 （析构方法）</p><p>析构方法作用：做一些额外的工作 比如 垃圾回收（释放变量） 关闭文件或文件夹</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&quot;悟空&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s快死了,没有血量&quot;</span>%self.name)</span><br><span class="line">one = Game()</span><br><span class="line"><span class="keyword">del</span> one  <span class="comment"># 删除该实例对象 触发del自动调用</span></span><br><span class="line"></span><br><span class="line">注意：函数内部的实例化 <span class="keyword">del</span>的生存周期就在函数执行期间  执行完毕 局部变量就会释放</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__int__</span>(<span class="params">self</span>) 创建对象的时候自动调用</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__str__</span>(<span class="params">self</span>) 输出一个对象<span class="title">print</span>（对象）</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__del__</span>(<span class="params">self</span>) 对象被销毁  自动调用该方法</span></span><br></pre></td></tr></table></figure><h5 id="案例-搬家具"><a href="#案例-搬家具" class="headerlink" title="案例 搬家具"></a>案例 搬家具</h5><p>搬家具规则：</p><p>1.家具分不同的类型，并占用不同的面积</p><p>2.输出家具信息时，显示家具的类型和家具占用的面积 ——————————————————————————————————————————————————————</p><p>3.房子有自己的地址和占用的面积</p><p>4.房子可以添加家具，如果房子的剩余面积可以容纳家具，则提示家具添加成功；否则提示添加失败</p><p>5.输出房子信息时，可以显示房子的地址、占地面积、剩余面积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span>(<span class="params">self, <span class="built_in">type</span>, area</span>):</span></span><br><span class="line">        self.<span class="built_in">type</span> = <span class="built_in">type</span></span><br><span class="line">        self.area = area</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;家具的类型%s 家具的占用面积%0.1f&quot;</span>%(self.<span class="built_in">type</span>, self.area)</span><br><span class="line">bed = Item(<span class="string">&quot;双人床&quot;</span>, <span class="number">4.9</span>)</span><br><span class="line"><span class="built_in">print</span>(bed)</span><br><span class="line">sofa = Item(<span class="string">&quot;沙发&quot;</span>, <span class="number">6.7</span>)</span><br><span class="line"><span class="built_in">print</span>(sofa)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, address, areas</span>):</span></span><br><span class="line">        self.address = address</span><br><span class="line">        self.areas = areas</span><br><span class="line">        self.free_area = areas</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_item</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.free_area - item.area &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;添加成功&quot;</span>)</span><br><span class="line">            self.free_area -= item.area</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;添加失败&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;房屋的地址%s 房屋的面积%.1f, 房屋的剩余面积%.1f&quot;</span>%(self.address, self.areas, self.free_area)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line">bed = Item(<span class="string">&quot;双人床&quot;</span>, <span class="number">4.9</span>)</span><br><span class="line">sofa = Item(<span class="string">&quot;沙发&quot;</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(bed)</span><br><span class="line"><span class="built_in">print</span>(sofa)</span><br><span class="line">home = Home(<span class="string">&quot;顺义&quot;</span>, <span class="number">60</span>) <span class="comment"># 房屋对象</span></span><br><span class="line">home.add_item(bed)</span><br><span class="line">home.add_item(sofa)</span><br></pre></td></tr></table></figure><h5 id="我的搬家具代码"><a href="#我的搬家具代码" class="headerlink" title="我的搬家具代码"></a>我的搬家具代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveFurniture</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 设置一些家具的数据 以及家的信息数据</span></span><br><span class="line">    self.furn = &#123;<span class="string">&quot;沙发&quot;</span>: <span class="number">5</span>, <span class="string">&quot;床&quot;</span>: <span class="number">10</span>, <span class="string">&quot;椅子&quot;</span>: <span class="number">2</span>, <span class="string">&quot;桌子&quot;</span>: <span class="number">4</span>, <span class="string">&quot;柜子&quot;</span>: <span class="number">6</span>&#125;</span><br><span class="line">    self.home = &#123;<span class="string">&quot;address&quot;</span>: <span class="string">&quot;北京市顺义区&quot;</span>, <span class="string">&quot;area&quot;</span>: <span class="number">0</span>, <span class="string">&#x27;rest_area&#x27;</span>: <span class="number">0</span>&#125; </span><br><span class="line">    <span class="comment"># 设置一个开关 判断是否找到对应的家具</span></span><br><span class="line">    self.<span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self, area, furniture</span>):</span></span><br><span class="line">        self.home.area = self.home.rest_home = area</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> self.furn.items():</span><br><span class="line">        <span class="keyword">if</span> k == furniture:</span><br><span class="line">                <span class="keyword">if</span> self.home.rest_home - v &gt;= <span class="number">0</span>:</span><br><span class="line">                    self.home.rest_home -= v</span><br><span class="line">                    </span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;添加成功&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;剩余面积不足，无法添加家具&quot;</span>)</span><br><span class="line">                self.<span class="built_in">bool</span> = <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">        </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.<span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;没有你对应的家具&quot;</span></span><br><span class="line">        title = <span class="string">&quot;添加的家具类型\t\t占用的面积\n&quot;</span></span><br><span class="line">        furn_str = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> self.furn.items():</span><br><span class="line">            furn_str += <span class="string">&quot;%-16s\t\t%d&quot;</span>%(k,v)</span><br><span class="line">        msg2 = <span class="string">&#x27;房子的地址为%s  房子的占地面积为 %d  房子的剩余面积为%d\n&#x27;</span>%(self.home.address, self.home.area, self.home.rest_area)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&quot;*&quot;</span> * <span class="number">20</span> + <span class="string">&quot;\n&quot;</span>, title + str_msg, msg2)</span><br><span class="line">        </span><br><span class="line">S = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入家占地面积：&quot;</span>))      </span><br><span class="line">f = MoveFurniture(S, <span class="built_in">input</span>(<span class="string">&quot;请输入要添加的家具:&quot;</span>))</span><br></pre></td></tr></table></figure><h5 id="烤地瓜案例"><a href="#烤地瓜案例" class="headerlink" title="烤地瓜案例"></a>烤地瓜案例</h5><p>烤地瓜规则：</p><p>1.地瓜有自己的状态，默认是生的，地瓜可以进行烧烤</p><p>2.地瓜有自己烧烤的总时间，由每次烧烤的时间累加得出</p><p>3.地瓜烧烤时，需要提供本次烧烤的时间</p><p>4.地瓜烧烤时，地瓜状态随着烧烤总时间的变化而改变：</p><pre><code>[0, 3) 生的、[3, 6) 半生不熟、[6, 8) 熟了、&gt;=8 烤糊了</code></pre><ol><li>输出地瓜信息时，可以显示地瓜的状态和烧烤的总时间</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.state = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        self.total_time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cook_time</span>(<span class="params">self, time</span>):</span></span><br><span class="line">        self.total_time += time</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.total_time &gt;= <span class="number">0</span> <span class="keyword">and</span> self.total_time &lt; <span class="number">3</span>:</span><br><span class="line">            self.state = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.total_time &gt;= <span class="number">3</span> <span class="keyword">and</span> self.total_time &lt; <span class="number">6</span>:</span><br><span class="line">            self.state = <span class="string">&#x27;半生不熟&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.total_time &gt;= <span class="number">6</span> <span class="keyword">and</span> self.total_time &lt; <span class="number">8</span>:</span><br><span class="line">            self.state = <span class="string">&#x27;熟了&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.total_time &gt;= <span class="number">8</span>:</span><br><span class="line">            self.state = <span class="string">&#x27;烤糊了&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;地瓜状态%s 当前的烧烤总时间为%d&#x27;</span> % (self.state, self.total_time)</span><br><span class="line"></span><br><span class="line">sp1 = SweetPotato()</span><br><span class="line"></span><br><span class="line">sp1.cook_time(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(sp1)</span><br><span class="line">sp1.cook_time(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(sp1)</span><br><span class="line">sp1.cook_time(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(sp1)</span><br><span class="line">sp1.cook_time(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(sp1)</span><br></pre></td></tr></table></figure><h3 id="面向对象的三个特性"><a href="#面向对象的三个特性" class="headerlink" title="面向对象的三个特性"></a>面向对象的三个特性</h3><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><ol><li><p>将属性和方法封装成一个整体 然后通过实例化一个对象来处理</p></li><li><p>将功能代码进行打包 对外提供功能接口 无需关系内部实现</p></li></ol><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>单继承</p><p>子类继承父类的属性和方法</p><p><code>class 子类（父类）</code></p><blockquote><p>继承的作用：减少冗余代码 </p><p>为什么要继承？ 功能的升级和扩展 对原有的功能进行完善（重写）</p><p>功能的扩展 原来没有的功能进行添加</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;吃的方法&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;喝啤酒&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xtq</span>(<span class="params">Dog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;飞&quot;</span>)</span><br><span class="line">xtq = Xtq()</span><br><span class="line">xtq.eat()</span><br><span class="line">xtq.drink()  <span class="comment"># 继承父类</span></span><br><span class="line">xtq.fly()   <span class="comment"># 自己的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;妈妈喜欢吃榴莲&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爸爸喝酒&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Mother, Father</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 多继承中 如果父类中出现相同方法 则第一个继承的父类中方法优先级高</span></span><br></pre></td></tr></table></figure><h5 id="支持多层继承"><a href="#支持多层继承" class="headerlink" title="支持多层继承"></a>支持多层继承</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandpa</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">money</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1万元&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>(<span class="params">Grandpa</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hourse</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一套房子&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Father</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">one = Child()</span><br></pre></td></tr></table></figure><h5 id="查看类的继承链"><a href="#查看类的继承链" class="headerlink" title="查看类的继承链"></a>查看类的继承链</h5><p><code>格式 类名.__mro__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个动物类 ，有给方法汪汪叫</span></span><br><span class="line"><span class="comment"># 定义一个子类 Dog，继承了动物类 ,添加一个方法可以吃骨头</span></span><br><span class="line"><span class="comment"># 定义一个子类Xtq，继承了Dog类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">object</span></span>):</span>  <span class="comment"># object  基类   所有类的老祖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dark</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;叫&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;吃骨头&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xtq</span>(<span class="params">Dog</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">xtq = Xtq()</span><br><span class="line">xtq.eat()  <span class="comment"># Dog父类</span></span><br><span class="line">xtq.dark()  <span class="comment"># Animal 父类</span></span><br><span class="line"><span class="comment"># 好看继承连  类名.__mro__</span></span><br><span class="line"><span class="built_in">print</span>(Xtq.__mro__)</span><br><span class="line"><span class="comment"># (&lt;class&#x27;__main__.Xtq&#x27;&gt;,&lt;class&#x27;__main__.Dog&#x27;&gt;,&lt;class&#x27;__main__.Animal&#x27;&gt;,&lt;class&#x27;object&#x27;&gt;)</span></span><br></pre></td></tr></table></figure><h5 id="魔法方法-init-，都会被子类所继承"><a href="#魔法方法-init-，都会被子类所继承" class="headerlink" title="魔法方法_init_，都会被子类所继承"></a>魔法方法_<em>init_</em>，都会被子类所继承</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学生姓名 %s 年龄:%d&quot;</span>%(self.name, self.age)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastStudent</span>(<span class="params">Student</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">s1 = ItcastStudent()</span><br><span class="line"><span class="built_in">print</span>(s1) </span><br><span class="line">        </span><br></pre></td></tr></table></figure><h5 id="父类方法的重写"><a href="#父类方法的重写" class="headerlink" title="父类方法的重写"></a>父类方法的重写</h5><blockquote><p>当父类和子类方法名都相同的情况下 默认是有子类的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;吃肉&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;吃草&quot;</span>)</span><br><span class="line">        </span><br><span class="line">tz = Rabbit()</span><br><span class="line">tz.eat()</span><br></pre></td></tr></table></figure><h5 id="调用被重写的父类方法"><a href="#调用被重写的父类方法" class="headerlink" title="调用被重写的父类方法"></a>调用被重写的父类方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学生姓名 %s 年龄:%d&quot;</span> % (self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&#x27;aa&#x27;</span>,<span class="number">33</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastStudent</span>(<span class="params">Student</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line"></span><br><span class="line">        self.aaa = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">        <span class="comment"># Student.__init__(self,name,age)</span></span><br><span class="line">        <span class="comment"># super().__init__(name,age)</span></span><br><span class="line">        <span class="built_in">super</span>(ItcastStudent,self).__init__(name,age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = ItcastStudent(<span class="string">&#x27;zag&#x27;</span>, <span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">子类重写了父类方法，仍然想执行父类中的方法</span></span><br><span class="line"><span class="string">父类名.方法名（self）</span></span><br><span class="line"><span class="string">super(类名 ,self).方法名()  super函数会查询继承连中指定类的下一个类</span></span><br><span class="line"><span class="string">super().方法名()    当前类的下一个类的方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 注意 如果 同时调用子类和父类重写的方法  被子类重写的优先</span></span><br></pre></td></tr></table></figure><h4 id="案例：模拟软件安装"><a href="#案例：模拟软件安装" class="headerlink" title="案例：模拟软件安装"></a>案例：模拟软件安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, version, desc</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.version = version</span><br><span class="line">        self.desc = desc</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">install</span>(<span class="params">self, path=<span class="string">&quot;C://window/program/user&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;安装的软件为%s 版本是%s 描述信息：&#x27;</span>%(self.name, self.version, self.desc))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;安装路径%s&#x27;</span>%path)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Qq</span>(<span class="params">App</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">qq = Qq(<span class="string">&quot;qq电脑版&quot;</span>, <span class="string">&#x27;v12.6.3&#x27;</span>, <span class="string">&quot;聊天神器&quot;</span>)</span><br><span class="line">qq.install()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pycharm</span>(<span class="params">App</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install</span>(<span class="params">self,path</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().install(path)</span><br><span class="line">pycharm = Pycharm()</span><br><span class="line">pycharm.install()</span><br></pre></td></tr></table></figure><h3 id="多态的特性"><a href="#多态的特性" class="headerlink" title="多态的特性"></a>多态的特性</h3><blockquote><p>多态概念是应用于java和C#这一强类型语言中 而python崇尚<strong>鸭子类型</strong></p></blockquote><p>多态 不同的子类的对象调用相同的父类的方法 参数不同的执行效果可以增加外部的调用的灵活性</p><p><strong><em>多态是以继承和重写代码方法为前提</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wolf</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;追击敌人&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;追击毒品&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_with</span>(<span class="params">self,animal</span>):</span></span><br><span class="line">        animal.work()</span><br><span class="line">p = People()</span><br><span class="line">p.work_with(Wolf())</span><br><span class="line">p.work_with(Dog())</span><br></pre></td></tr></table></figure><h3 id="实例属性和方法"><a href="#实例属性和方法" class="headerlink" title="实例属性和方法"></a>实例属性和方法</h3><p>self.属性名 = 属性值  实例属性  通常在类的初始化init方法中添加</p><p>def 方法名(self):  对象的方法在类中定义 通常创建一个对象 在内存中开辟一块空间</p><h3 id="类属性和类方法"><a href="#类属性和类方法" class="headerlink" title="类属性和类方法"></a>类属性和类方法</h3><ul><li>类属性就是类对象所拥有的属性  它被该类的所有的实例对象所共有</li><li>类属性可以使用类对象或者实例对象访问</li><li>类属性和类方法可以被所有的对象共享，内存中只存储一份</li><li>通常<strong>类名.方法名()</strong>来调用  <strong>类名.属性名</strong>获取</li><li>类方法可以操作类属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    类属性 = 值</span><br><span class="line"><span class="comment"># 访问类的属性</span></span><br><span class="line">类名.属性</span><br></pre></td></tr></table></figure><blockquote><p>注意： 如果类属性和实例属性重名 那么通过实例对象访问的时候 优先获取实例属性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类方法</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名(<span class="params">cls</span>)</span></span><br><span class="line"><span class="function"># 调用类的方法</span></span><br><span class="line"><span class="function">类名.方法名()</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  案例  统计访问网站的pv值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSitePv</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        count -= <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;欢迎进入 itcast 官网&#x27;</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_count</span>(<span class="params">cls</span>):</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;当前网站的pv为%d&#x27;</span>%cls.count)</span><br><span class="line">pv  = WebSitePv()</span><br><span class="line">WebSitePv.get_count()</span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><blockquote><p>不用传递任何参数的时候 就可以使用静态方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义静态方法格式</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名()</span></span><br><span class="line"><span class="function"># <span class="title">for</span> <span class="title">example</span></span></span><br><span class="line"><span class="function">@<span class="title">staticmethod</span></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">show</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">40</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dog is our good friend&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">类名.方法名()</span><br></pre></td></tr></table></figure><h4 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h4><blockquote><p>__属性   私有属性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 私有的属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__age = <span class="number">10</span></span><br><span class="line">one = Dog()</span><br><span class="line"><span class="built_in">print</span>(one.__age) <span class="comment"># 私有属性在类外不能直接被访问</span></span><br></pre></td></tr></table></figure><p><strong>私有属性的作用</strong></p><ul><li>为了避免属性被设置为脏数据  更好的保护属性安全 一般处理方式为添加一个方法</li></ul><p>在方法内部先判断数据的有效性 再赋值属性</p><ul><li>将属性定义为私有属性 避免对象在外部直接操作</li></ul><h4 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h4><blockquote><p>__方法名  私有方法只能在内部使用</p></blockquote><p>私有属性和方法的设计目的是：</p><ul><li>保护数据或操作的安全性</li><li>向使用者隐藏核心的开发细节</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 私有的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;个人隐私 切勿暴露&#x27;</span>）</span><br><span class="line">              </span><br><span class="line">one = Person()</span><br><span class="line">one.__show()  <span class="comment"># 无法调用</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第7节-面向对象1</title>
      <link href="/blog/python%E6%95%99%E7%A8%8B/07.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A11/"/>
      <url>/blog/python%E6%95%99%E7%A8%8B/07.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><hr><p>递归创建目录 data/msg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">&#x27;data/msg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>删除目录文件夹和里面的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">shutile.rmtree(data) <span class="comment"># 删除data文件夹以及里面的内容</span></span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h4 id="面向对象和面向过程区别"><a href="#面向对象和面向过程区别" class="headerlink" title="面向对象和面向过程区别"></a>面向对象和面向过程区别</h4><p>面向过程</p><ul><li>面向过程 是一种编程思想</li><li>面向过程是以过程（步骤）为中心的编程思想</li><li>过程就是平常所说的方法步骤，也是人类的一种习惯 把一个大的问题分解若干小问题，按照顺序依次解决</li></ul><blockquote><p>问题：代码易冗余 结构过于紧密 耦合度高 不利于团队开发</p></blockquote><p>面向对象</p><ul><li>面向对象也是一种编程思想</li><li>面向对象是以事务对象为中心的编程思想</li><li>每个步骤，都可以看成是一个对象 用对象完成任务</li><li>面向过程着重于<strong>做什么</strong> 面向对象着重于<strong>谁来做？</strong></li></ul><blockquote><p>面向对象编程其实就是对面向过程的代码进行的高度封装</p></blockquote><h4 id="类的概念"><a href="#类的概念" class="headerlink" title="类的概念"></a>类的概念</h4><p>人以类聚 物以群分</p><p>具有相似的内部状态和运动规律的实体的集合（或统称为抽象）</p><p>具有相同属性和行为事物的统称</p><ul><li><p>类就是类别、分类、归类、理论、概念、无形的东西(看不见、摸不着)。如：学生类、</p></li><li><p>类是由相同属性(特征)和方法(行为、动作)的对象构成的一个集合。</p></li><li><p>类还可以看成”图纸”、对象可以看成”楼房”；</p><p><img src="/media/images/pic/图纸.png" alt="图纸"></p></li></ul><h4 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h4><ul><li>对象是现实中的每一个实体 都可以看成一个对象</li><li>对象也是由属性和方法构成</li><li>在计算机中 必须先有类  再有对象</li><li>每一个对象 都应该归属于哪个类  对象不能单独存在</li></ul><h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h4><p>类是总结事物特征的 抽象概念 而对象是具体存在的某个实物</p><p><img src="/media/images/pic/模型.png" alt="模型"></p><p><strong>类就是创建对象的模版</strong></p><p><strong>先有类，才有对象</strong></p><p>类的三个部分</p><ol><li>类的名称 </li><li>类的属性</li><li>类的方法</li></ol><h4 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    方法列表</span><br><span class="line">注意：类名 命名规则 按照 大驼峰 UserName</span><br></pre></td></tr></table></figure><h4 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名：</span></span><br><span class="line"><span class="class"><span class="title">def</span> 方法名（<span class="title">self</span>）:</span></span><br><span class="line">        代码</span><br></pre></td></tr></table></figure><blockquote><p><strong>python语法要求 方法必须定义在类中 如果某个行为只有一个对象拥有，也需要为该对象 单独设计一个类</strong></p></blockquote><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">引用对象的变量名 = 类名()</span><br></pre></td></tr></table></figure><h4 id="调用对象的方法"><a href="#调用对象的方法" class="headerlink" title="调用对象的方法"></a>调用对象的方法</h4><p>格式<code>对象的变量名.方法名()</code></p><h4 id="self的意义"><a href="#self的意义" class="headerlink" title="self的意义"></a>self的意义</h4><p>关键字 self 主要用于对象方法中 表示<strong>调用该方法的对象</strong></p><p>某一个对象调用其方法时 python解释器会把这个对象作为第一个参数传递给方法，所以开发者只需要在定义方法时 预留第一个参数为self即可</p><h4 id="在类的内部定义对象的属性"><a href="#在类的内部定义对象的属性" class="headerlink" title="在类的内部定义对象的属性"></a>在类的内部定义对象的属性</h4><p>魔法方法 <strong><strong>init</strong></strong>()方法的使用 通常进行对象的初始化工作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, score</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我的名字叫%s&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的年龄是%d&quot;</span> % self.age)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_MaxScore</span>(<span class="params">self</span>):</span></span><br><span class="line">        num = <span class="built_in">max</span>(self.score)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的成绩中最高分数是%d&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">aa = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">24</span>, [<span class="number">88</span>, <span class="number">76</span>, <span class="number">95</span>])</span><br><span class="line">bb = Student(<span class="string">&#x27;小花&#x27;</span>, <span class="number">22</span>, [<span class="number">79</span>, <span class="number">94</span>, <span class="number">68</span>])</span><br><span class="line"></span><br><span class="line">aa.get_name()</span><br><span class="line">aa.get_age()</span><br><span class="line">aa.get_MaxScore()</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">bb.get_name()</span><br><span class="line">bb.get_age()</span><br><span class="line">bb.get_MaxScore()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第6节-文件系统操作</title>
      <link href="/blog/python%E6%95%99%E7%A8%8B/06.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/python%E6%95%99%E7%A8%8B/06.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><blockquote><p>什么是文件：计算机文件是以计算机硬盘为载体存储在计算机上的信息集合 文件可以是文本，图片，视频等</p></blockquote><p><img src="/media/images/pic/cpu_mem.png" alt="cpu_mem"></p><h5 id="文件的作用"><a href="#文件的作用" class="headerlink" title="文件的作用"></a>文件的作用</h5><blockquote><p>可以永久保存下来 断电不丢失 程序执行完数据不会被强制释放</p></blockquote><p>如果想用word编写一份简历 应该有哪些流程？</p><ol><li>打开word软件 新建一个文本文档</li><li>写入个人简历信息</li><li>关闭word文档</li></ol><p>同样 操作文件的整体过程是很类似的</p><ol><li>打开文件 或者建立一个文件</li><li>读写数据</li><li>关闭文件</li></ol><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法： 变量 = open(文件名,访问模式)</span></span><br><span class="line"><span class="comment"># 文件名 打开的文件</span></span><br><span class="line"><span class="comment"># 访问模式 对文件进行 读取 还是 写入 还是追加</span></span><br><span class="line"><span class="comment"># python中 使用open函数</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>访问模式</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td>r</td><td style="text-align:center">以只读方式打开文件，文件指针放在文件开头，这是默认模式</td></tr><tr><td>w</td><td style="text-align:center">以写入方式打开，如果文件已存在则将其覆盖，如果文件不存在，则创建新文件</td></tr><tr><td>a</td><td style="text-align:center">以追加的方式打开文件，如果文件存在，则指针放在文件末尾，新内容会追加到已有内容之后，如果文件不存在，创建新的文件写入</td></tr><tr><td>r+</td><td style="text-align:center">打开一个文件用于读写，文件指针将会放在文件的开头</td></tr><tr><td>w+</td><td style="text-align:center">打开一个文件用于读写，该文件存在则会覆盖原来内容，如果不存在，则会创建一个新的文件</td></tr><tr><td>a+</td><td style="text-align:center">以追加的模式进行读写，如果存在该文件，指针放在文件的末尾，文件打开时是追加模式，如果文件不存在，创建新文件用于读写</td></tr><tr><td>rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读写，文件指针放在开头</td></tr><tr><td>wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读写，如果该文件已经存在则将其覆盖，如果文件不存在，则创建新文件</td></tr><tr><td>ab+</td><td style="text-align:center">以二进制格式打开一个文件 用于追加 如果该文件已经存在 文件指针放在结尾，如果文件不存在，创建新文件用于写入</td></tr></tbody></table></div><h5 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h5><blockquote><p>格式 close()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个文件 文件名 test.txt</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># 关闭这个文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f.<span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h5 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h5><p>f.read()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件 r 读取数据 read</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;123.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment"># 读取文件 f.read() 将文件所有的内容一次性读取 如果内容非常多，内存就会出现峰值</span></span><br><span class="line">content = f.read()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># f.read(num) num设置读取的字节 如果没有传入num 则全部读取</span></span><br></pre></td></tr></table></figure><p>f.readline() 每次读取一行 </p><p>f.readlines() 读取每一行然后以列表的形式返回</p><p>f.writelines() 以列表的形式 将每一行文本 写入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lists = [</span><br><span class="line">    <span class="string">&#x27;一望二三里&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;烟村四五家&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;亭台六七座&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;八九十枝花&#x27;</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tangshi.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lists = [i + <span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> lists]</span><br><span class="line">    f.writelines(lists)</span><br><span class="line">    f.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tangshi.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># con = f.readlines()</span></span><br><span class="line">    <span class="comment"># print(con)</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        con = f.readline(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(con) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(con)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>应用1 制作文件备份</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 123.提醒他 123副本.txt</span></span><br><span class="line">file = <span class="string">&#x27;123.txt&#x27;</span></span><br><span class="line">oldf = <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">content = oldf.read()</span><br><span class="line"><span class="comment"># 创建一个新的文件 并写入内容</span></span><br><span class="line">newf = <span class="built_in">open</span>(<span class="string">&#x27;123副本.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">newf.write(content)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">oldf.close()</span><br><span class="line">newf.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;tests.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">con = f.read(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(con)</span><br><span class="line">p1 = f.tell() <span class="comment"># 查看当前文件的指针光标的位置</span></span><br><span class="line"><span class="built_in">print</span>(p1)</span><br><span class="line">con2 = f.read(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(con)</span><br></pre></td></tr></table></figure><h5 id="定位到某一个位置"><a href="#定位到某一个位置" class="headerlink" title="定位到某一个位置"></a>定位到某一个位置</h5><p>seek(offset,from) 有2个参数</p><p>from方向：</p><ol><li>表示文件的开头</li><li>表示当前的位置</li><li>表示文件的末尾</li></ol><blockquote><p>只有二进制格式的方式 才可以从1和2的位置往前定位 此时offset为负数</p></blockquote><hr><h2 id="文件的相关操作-os模块"><a href="#文件的相关操作-os模块" class="headerlink" title="文件的相关操作 (os模块)"></a>文件的相关操作 (os模块)</h2><h5 id="os模块完成对文件的重命名"><a href="#os模块完成对文件的重命名" class="headerlink" title="os模块完成对文件的重命名"></a>os模块完成对文件的重命名</h5><ol><li><p>文件的重命名操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rename(<span class="string">&#x27;aa.txt&#x27;</span>, <span class="string">&#x27;bb.txt&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>删除一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove(文件名)</span><br></pre></td></tr></table></figure></li><li><p>创建文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="comment"># 如果文件夹存在 则会报错 文件夹不能重复</span></span><br></pre></td></tr></table></figure></li><li><p>获取当前的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure></li><li><p>获取目录列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.listdir()</span><br></pre></td></tr></table></figure></li><li><p>更改当前路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>删除一个文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line"><span class="comment"># 文件夹不存在 则会报错 非空文件夹不能删除</span></span><br></pre></td></tr></table></figure></li></ol><p>扩展：判断文件是否存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">bool</span> = os.path.exist(<span class="string">&#x27;文件&#x27;</span>) 如果存在 是<span class="literal">True</span>  否则  <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>eval()函数</strong></p><blockquote><p>eval()官方文档中给出的功能解释是 将字符串string对象转化为有效的表达式参与运算并返回结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;[3,4,5,6]&#x27;</span></span><br><span class="line"></span><br><span class="line">lists = <span class="built_in">eval</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lists)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str2 = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;tom&quot;, &quot;age&quot;:36&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(str2))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第5节-函数及应用</title>
      <link href="/blog/python%E6%95%99%E7%A8%8B/05.%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/blog/python%E6%95%99%E7%A8%8B/05.%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="一-函数的快速体验"><a href="#一-函数的快速体验" class="headerlink" title="一.函数的快速体验"></a>一.函数的快速体验</h4><ol><li>打印星星案例 封装成一个函数 </li><li>函数的调用</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 星星案例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">      j = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">          j += <span class="number">1</span></span><br><span class="line">      <span class="built_in">print</span>()</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><h4 id="二-函数的基本使用"><a href="#二-函数的基本使用" class="headerlink" title="二.函数的基本使用"></a>二.函数的基本使用</h4><blockquote><p>函数就是将一段独立功能代码块 封装起来 形成一个独立实体</p></blockquote><h5 id="函数的优点"><a href="#函数的优点" class="headerlink" title="函数的优点"></a>函数的优点</h5><pre><code>***提高工作效率，减少代码的冗余 提高重用性***</code></pre><h5 id="函数的基本定义格式"><a href="#函数的基本定义格式" class="headerlink" title="函数的基本定义格式"></a>函数的基本定义格式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名():</span></span><br><span class="line">    函数体（函数封装的代码）</span><br><span class="line">    ……</span><br><span class="line"><span class="comment"># def  是define缩写</span></span><br><span class="line"><span class="comment"># 案例 洗衣服洗衣的过程 定义成一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">washing</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;进水&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;洗衣服&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;放水&quot;</span>)</span><br><span class="line"> washing() <span class="comment"># 调用函数  定义函数不会主动执行</span></span><br></pre></td></tr></table></figure><h5 id="函数的执行过程"><a href="#函数的执行过程" class="headerlink" title="函数的执行过程"></a>函数的执行过程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">washing</span>():</span>  <span class="comment"># 第一步</span></span><br><span class="line">   <span class="comment"># 第三步 进入函数体内部</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;注水&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;洗衣服&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;放水&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;脱水&quot;</span>)</span><br><span class="line">washing() <span class="comment"># 第二步</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">30</span>) <span class="comment"># 第四步</span></span><br></pre></td></tr></table></figure><h5 id="给函数添加注释"><a href="#给函数添加注释" class="headerlink" title="给函数添加注释"></a>给函数添加注释</h5><p><code>给函数添加注释 &quot;&quot;&quot;添加注释的内容&quot;&quot;&quot;</code></p><p><img src="/media/images/pic/comment.png" alt="comment"></p><h4 id="三-带有参数的函数定义的格式"><a href="#三-带有参数的函数定义的格式" class="headerlink" title="三.带有参数的函数定义的格式"></a>三.带有参数的函数定义的格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def 函数名(形参1， 形参2……)  # 形参相当于局部变量</span><br><span class="line">函数的代码</span><br></pre></td></tr></table></figure><p>能够理解什么是实参和什么是形参</p><ul><li>形参的作用：接收实参传递的数据，把数据传递给函数的内部</li><li>实参： 调用函数是使用的数据是实参 直接值</li><li>形参：实参的占位，中转站 接收实参传递过来的数据</li></ul><p><img src="/media/images/pic/param.png" alt="param"></p><h5 id="形参的作用域"><a href="#形参的作用域" class="headerlink" title="形参的作用域"></a>形参的作用域</h5><pre><code>在函数的内部使用，在函数的外部不能使用该形参将真实的数据传递给函数的内部，为真实的数据占位作用范围，就是函数内部形参的作用域是在函数的内部</code></pre><h5 id="函数默认参数的使用"><a href="#函数默认参数的使用" class="headerlink" title="函数默认参数的使用"></a>函数默认参数的使用</h5><ul><li><p>使用实参的值  不使用默认的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_fun</span>(<span class="params">a=<span class="number">5</span>, b=<span class="number">12</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b) <span class="comment"># 15</span></span><br><span class="line">sum_fun(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>形参 前面有默认值 后面也有默认值  否则报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_fun</span>(<span class="params">a=<span class="number">3</span>, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line">sum_fun(<span class="number">12</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h5><ul><li><strong>给实参指定对应的形参</strong></li><li>关键字参数是给实参加</li><li>默认的参数是给形参加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">name, sex, job</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;姓名是%s 性别是%s 年龄是: %d&quot;</span> %(name, sex, age))</span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">info(age=<span class="number">12</span>,name=<span class="string">&quot;张三丰&quot;</span>, sex=<span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意： <em>通常情况下，设置了一个关键字参数，给所有的实参都设置关键字参数</em></p></blockquote><h5 id="函数的可变的（不定长参数）的使用"><a href="#函数的可变的（不定长参数）的使用" class="headerlink" title="函数的可变的（不定长参数）的使用"></a>函数的可变的（不定长参数）的使用</h5><ul><li><p>元组型的可变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_fun</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)  <span class="comment"># (3,4)  (6,7,8,9)</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">sum</span> += i</span><br><span class="line">sum_fun(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">sum_fun(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br></pre></td></tr></table></figure></li><li><p>字典型的可变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">aa, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(aa)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"><span class="comment"># 前面有普通的任意数量的实参，后面是任意数量 关键字参数</span></span><br><span class="line">fun(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,a=<span class="number">10</span>,b=<span class="number">30</span>,c=<span class="number">60</span>)</span><br><span class="line">fun(<span class="number">8</span>,<span class="number">9</span>,d=<span class="number">2</span>,f=<span class="number">98</span>)</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="四-获取函数的返回值"><a href="#四-获取函数的返回值" class="headerlink" title="四.获取函数的返回值"></a>四.获取函数的返回值</h4><blockquote><p>函数的返回值 通过一个变量来接收</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    money = a + b + c</span><br><span class="line">    <span class="keyword">return</span> money</span><br><span class="line">salary = fun(<span class="number">16000</span>, <span class="number">1800</span>, <span class="number">500</span>)</span><br><span class="line"><span class="keyword">if</span> &gt;= <span class="number">15000</span>:</span><br><span class="line">    salary *= <span class="number">0.9</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(salary)</span><br></pre></td></tr></table></figure><h5 id="函数中可以返回多个值"><a href="#函数中可以返回多个值" class="headerlink" title="函数中可以返回多个值"></a>函数中可以返回多个值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = a + b</span><br><span class="line">    sub = a - b</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>,sub</span><br><span class="line">n1,n2 = fun(<span class="number">4</span>,<span class="number">2</span>) <span class="comment"># 返回返回值为元组形式的多个值 并进行解包</span></span><br></pre></td></tr></table></figure><ul><li>总结<ul><li>函数中返回值可以有多个</li><li>函数返回值 需要在函数调用的时候 通过变量接收</li><li>函数中遇到返回值 返回对应的数据 函数终止执行</li><li>函数中如果没有返回值 则直接返回None</li></ul></li></ul><h5 id="函数的四种类型"><a href="#函数的四种类型" class="headerlink" title="函数的四种类型"></a>函数的四种类型</h5><ol><li>无参数 无返回值</li><li>无参数 有返回值</li><li>有参数 无返回值</li><li>有参数 有返回值</li></ol><h5 id="函数嵌套调用"><a href="#函数嵌套调用" class="headerlink" title="函数嵌套调用"></a>函数嵌套调用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个打印不同样式的函数 并且实现打印任意行 实现函数嵌套</span></span><br><span class="line"><span class="comment"># 一个打印不同样式的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line</span>(<span class="params">style, n</span>):</span></span><br><span class="line"><span class="built_in">print</span>(style * n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">much_line</span>(<span class="params">style, n</span>):</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">print_line(style, n)</span><br><span class="line">much_line(<span class="string">&quot;*&quot;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="六-全部变量和局部变量的特点"><a href="#六-全部变量和局部变量的特点" class="headerlink" title="六.全部变量和局部变量的特点"></a>六.全部变量和局部变量的特点</h4><blockquote><p>全部变量 是定义在函数外部 作用于整个文件的变量</p><p>局部变量 是定义在函数内部 作用于函数内部的变量</p></blockquote><p><strong>在函数的内部可以直接使用全部变量 但无法修改全部变量的值 如果需要修改 则使用global进行声明</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isRun</span>(<span class="params">y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> y % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> y % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> y % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> isRun(<span class="number">2018</span>)</span><br></pre></td></tr></table></figure><h4 id="七-匿名函数"><a href="#七-匿名函数" class="headerlink" title="七.匿名函数"></a>七.匿名函数</h4><blockquote><p>def 函数名()  普通的函数</p><p>匿名函数：以表达式的形式来定义函数 只能做些简单的处理</p><p>用lambda 关键字创建的函数  可以省略用def 声明的函数的标准步骤</p></blockquote><p>匿名函数的定义格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lambda 形参1， 形参2， 形参数3……：返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> a,b:a+b</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">f = (<span class="keyword">lambda</span> a,b:a+b)(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><h4 id="八-递归函数"><a href="#八-递归函数" class="headerlink" title="八.递归函数"></a>八.递归函数</h4><blockquote><p>递归函数 了解三个要素  1.函数调用自身的编程技巧 2递归无限需要给一个出口 3以及递归的计算公式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例1 阶乘递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursion</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * recursion(n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2 斐波那契数列 递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n-<span class="number">1</span>) + Fibonacci(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h5 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表中输入1-100之间的所有的数</span></span><br><span class="line">lists = [i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="comment"># 练习  包含10个666</span></span><br><span class="line">lists = [<span class="number">666</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="comment"># 练习 列表中包含1-10种偶数的平方</span></span><br><span class="line">list1 = [n**<span class="number">2</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 如果 字符串长度大于5 放入列表 过滤</span></span><br><span class="line">name_list = [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>]</span><br><span class="line">lists = [n <span class="keyword">for</span> n <span class="keyword">in</span> name_list <span class="keyword">if</span> <span class="built_in">len</span>(n)&gt;<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h5 id="引用（了解）"><a href="#引用（了解）" class="headerlink" title="引用（了解）"></a>引用（了解）</h5><p>python中可以使用id函数查看引用的是否为同一个内存空间 如果返回值相同 说明引用相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">10</span> * <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment"># 比较两个变量的值是否相等 相等</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)) <span class="comment"># 查看a变量的内存地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b)) <span class="comment"># 查看b变量的内存地址  两者相同  </span></span><br><span class="line"><span class="comment"># ====================</span></span><br><span class="line"><span class="comment"># python 3.6.2 不一样    版本   python 3.7  id 的地址是一样的  大缓存池</span></span><br><span class="line"><span class="comment"># 小于等于 256  缓存池</span></span><br><span class="line">a = <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line">b = <span class="number">10</span>*<span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="comment"># ======================</span></span><br><span class="line"><span class="comment"># python 有缓存机制  ,小于  20个  可以进行缓存</span></span><br><span class="line">strs= <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(strs))</span><br><span class="line">strs=<span class="string">&quot;hell&quot;</span>+<span class="string">&quot;o&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(strs))</span><br><span class="line"><span class="comment"># 大于20位</span></span><br><span class="line">strs= <span class="string">&quot;hellopythonhelloitcast&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(strs))</span><br><span class="line">strs=<span class="string">&quot;hellopython&quot;</span>+<span class="string">&quot;helloitcast&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(strs))</span><br><span class="line"></span><br><span class="line">dict1 = &#123;&#125;</span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line"><span class="comment"># 通过is 语法来判断 两者是否值和地址都相等  如果是 则返回True 否则False</span></span><br><span class="line"><span class="keyword">if</span> dict1 <span class="keyword">is</span> dict2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;no&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="可变类型和不可变类型"><a href="#可变类型和不可变类型" class="headerlink" title="可变类型和不可变类型"></a>可变类型和不可变类型</h5><blockquote><p>可变类型： 可以在存储空间中修改内容  数值类型 int bool  float  字符串 str  tuple</p><p>不可变类型 该数据不可以在存储空间中修改内容   list   dict</p></blockquote><hr><h3 id="九-Python模块"><a href="#九-Python模块" class="headerlink" title="九.Python模块"></a>九.Python模块</h3><p><strong>python模块（module）是一个python文件，任何以.py结尾的，都可以作为模块导入</strong></p><p>模块的内容可以是<strong>全局变量，函数</strong></p><p>～～模块是python程序架构的一个核心概念～～</p><ul><li><p><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要 <strong>导入 import</strong> 这个模块</p></li><li><p>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 <strong>模块</strong></p></li><li><p>在模块中定义的 <strong>全局变量</strong> 、 <strong>函数</strong> 都是模块能够提供给外界直接使用的工具</p></li><li><img src="/media/images/pic/module.png" alt="module"></li></ul><hr><h3 id="名片管理系统"><a href="#名片管理系统" class="headerlink" title="名片管理系统"></a>名片管理系统</h3><ol><li><p>新建名片</p></li><li><p>显示名片</p></li><li>查询名片</li></ol><hr><h3 id="函数的高级应用"><a href="#函数的高级应用" class="headerlink" title="函数的高级应用"></a>函数的高级应用</h3><h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用生成器产生连续偶数序列并输出三次 测试并运行结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_even</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第%d步&quot;</span>%i)</span><br><span class="line">        <span class="keyword">yield</span> i*<span class="number">2</span></span><br><span class="line">g = generator_even()</span><br><span class="line"><span class="built_in">print</span>(g.__next__())  <span class="comment"># 此处连续执行三次 结果可见 并非每次从头开始</span></span><br><span class="line"><span class="built_in">print</span>(g.__next__())  <span class="comment"># 而是从上次执行yield语句处继续执行</span></span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br></pre></td></tr></table></figure><h5 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用装饰器为前述add函数添加输出原始数据功能并进行返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_f</span>(<span class="params">x,y</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;参数1为%d,参数2为%d&quot;</span>%(x,y))</span><br><span class="line">        <span class="keyword">return</span> f(x,y)</span><br><span class="line">    <span class="keyword">return</span> new_f</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 运行结果是 参数1为2  参数2为3</span></span><br><span class="line"><span class="comment">#   5</span></span><br></pre></td></tr></table></figure><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">d = outer(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(d(<span class="number">20</span>)) <span class="comment"># 25</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第4节-字符串</title>
      <link href="/blog/python%E6%95%99%E7%A8%8B/04.%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/blog/python%E6%95%99%E7%A8%8B/04.%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h4 id="Python中字符串定义的格式"><a href="#Python中字符串定义的格式" class="headerlink" title="Python中字符串定义的格式"></a>Python中字符串定义的格式</h4><ul><li>在python中用单引号括起来的字符串</li><li>在python中双引号括起来的字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;hello meimei&quot;</span></span><br><span class="line">str2 = <span class="string">&#x27;hello 帅哥&#x27;</span></span><br><span class="line">str3 = <span class="string">&quot;&quot;&quot;python&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="通过下标获取字符串中的某个值"><a href="#通过下标获取字符串中的某个值" class="headerlink" title="通过下标获取字符串中的某个值"></a>通过下标获取字符串中的某个值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">2</span>]) <span class="comment"># l</span></span><br><span class="line"><span class="comment"># 可以使用for循环遍历出字符串中的字符</span></span><br><span class="line"><span class="keyword">for</span> every <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="built_in">print</span>(every)</span><br></pre></td></tr></table></figure><h4 id="字符串的常规操作"><a href="#字符串的常规操作" class="headerlink" title="字符串的常规操作"></a>字符串的常规操作</h4><h5 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h5><div class="table-container"><table><thead><tr><th>string.isdecimal()</th><th>如果 string ,都是数字 返回 True</th></tr></thead><tbody><tr><td><strong>String.isalpha() </strong></td><td><strong>如果 string ,都是字母汉字 , 返回 True  </strong></td></tr></tbody></table></div><p>练习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;hello meimei&quot;</span></span><br><span class="line">result = <span class="built_in">str</span>.isalpha()  <span class="comment"># 判断字符串中是否都是字母 False 有空格 非字母</span></span><br><span class="line">str1 = <span class="string">&#x27;12345a&#x27;</span></span><br><span class="line">result = <span class="built_in">str</span>.isdecimal() <span class="comment"># 判断是不是都是数字 False</span></span><br></pre></td></tr></table></figure><h5 id="字符串的输出"><a href="#字符串的输出" class="headerlink" title="字符串的输出"></a>字符串的输出</h5><p>demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;itheima&quot;</span></span><br><span class="line">job = <span class="string">&quot;fe&quot;</span></span><br><span class="line">address = <span class="string">&quot;北京市&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;姓名: %s \n工作: %s \n地址: %s&#x27;</span>%(name, job, address))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------</span></span><br><span class="line"><span class="comment"># 姓名: itheima </span></span><br><span class="line"><span class="comment"># 工作: fe </span></span><br><span class="line"><span class="comment"># 地址: 北京市</span></span><br><span class="line"><span class="comment"># ------------------------------</span></span><br></pre></td></tr></table></figure><h4 id="字符串中的下标和切片概念"><a href="#字符串中的下标和切片概念" class="headerlink" title="字符串中的下标和切片概念"></a>字符串中的下标和切片概念</h4><blockquote><p>列表与元组的下标索引概念好理解 那么字符串的下标可以理解为字符的数组中去索引字符</p></blockquote><p>如果有字符串:<code>name = &#39;abcdef&#39;</code>，在内存中的实际存储如下:</p><p><img src="/media/images/pic/str.png" alt="img"></p><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><blockquote><p>概念 是指对操作的对象截取其中一部分的操作  列表 元组 以及字符串都支持切片</p></blockquote><p><strong>切片的语法:  [起始：结束：步长]</strong></p><p><strong><em>～注意：选取的区间从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身)，步长表示选取间隔。～</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;abcdef&quot;</span></span><br><span class="line">name[<span class="number">0</span>:<span class="number">3</span>] <span class="comment"># &quot;abc&quot;</span></span><br><span class="line">name[<span class="number">3</span>:<span class="number">5</span>] <span class="comment"># &quot;de&quot;</span></span><br><span class="line">name[:<span class="number">2</span>] <span class="comment"># &quot;ab&quot;</span></span><br><span class="line">name[<span class="number">3</span>:] <span class="comment"># &quot;def&quot;</span></span><br><span class="line">name[:] <span class="comment"># &quot;abcdef&quot;</span></span><br><span class="line">name[<span class="number">1</span>:-<span class="number">1</span>] <span class="comment">#&quot;bcde&quot;</span></span><br><span class="line">name[::<span class="number">2</span>] <span class="comment"># &quot;ace&quot;</span></span><br><span class="line">name[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>] <span class="comment"># &quot;bd&quot;</span></span><br><span class="line">name[::-<span class="number">2</span>] <span class="comment"># &quot;fdb&quot;</span></span><br><span class="line">name[<span class="number">5</span>:<span class="number">1</span>:-<span class="number">2</span>] <span class="comment"># &quot;fd&quot;</span></span><br></pre></td></tr></table></figure><p>面试题 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速反转字符串</span></span><br><span class="line">s = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">s = s[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h3 id="字符串的常见操作"><a href="#字符串的常见操作" class="headerlink" title="字符串的常见操作"></a>字符串的常见操作</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a><1>find</h4><blockquote><p>mystr = ‘hello world itcast and itcastcpp’</p><p>检测str是否包含在mystr中  存在则返回对应的索引 否则返回-1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line"><span class="comment"># mystr.find(str, start=0, end=len(mystr))</span></span><br><span class="line">mystr.find(<span class="string">&quot;ld&quot;</span>, <span class="number">3</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h4 id="index"><a href="#index" class="headerlink" title="index"></a><2>index</h4><blockquote><p>跟find()方法一样，只不过如果str不在 mystr中会报一个异常.</p></blockquote><h4 id="count"><a href="#count" class="headerlink" title="count"></a><3>count</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断字符串中字符出现的次数</span></span><br><span class="line">mystr.count(<span class="built_in">str</span>, start=<span class="number">0</span>, end=<span class="built_in">len</span>(mystr))</span><br></pre></td></tr></table></figure><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a><4>replace</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将str1替换为str2字符 替换次数</span></span><br><span class="line">mystr.replace(str1, str2,  mystr.count(str1))</span><br><span class="line"><span class="comment"># test  </span></span><br><span class="line">str1 = <span class="string">&quot;hello ha world ha&quot;</span></span><br><span class="line">str1.replace(<span class="string">&#x27;ha&#x27;</span>, <span class="string">&#x27;Ha&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># &quot;hello Ha world ha&quot;</span></span><br></pre></td></tr></table></figure><h4 id="split"><a href="#split" class="headerlink" title="split"></a><5>split</h4><p>以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.split(str=&quot; &quot;, 2)    </span></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">str1 = <span class="string">&quot;hello ha world ha&quot;</span></span><br><span class="line">str1.split(<span class="string">&quot; &quot;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a><6>capitalize</h4><p>把字符串中第一个字符大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;hello world itcast&quot;</span><br><span class="line">str1.capitalize()</span><br></pre></td></tr></table></figure><h4 id="title"><a href="#title" class="headerlink" title="title"></a><7>title</h4><p>把字符串中的每一个单词的首字母大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;hello world itcast&quot;</span><br><span class="line">str1.title()</span><br></pre></td></tr></table></figure><h4 id="startswith"><a href="#startswith" class="headerlink" title="startswith"></a><8>startswith</h4><p>检查字符串是否是以某字符开头 是返回 True  否 返回False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;hello world itcast&quot;</span></span><br><span class="line">mystr.startswith(<span class="string">&quot;ell&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="endswith"><a href="#endswith" class="headerlink" title="endswith"></a><9>endswith</h4><p>检查字符串是否以某字符结束，如果是返回True,否则返回 False.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.endswith(obj)</span></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">str1 = <span class="string">&quot;hello world itcast&quot;</span></span><br><span class="line">str1.endswith(<span class="string">&#x27;st&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="lower"><a href="#lower" class="headerlink" title="lower"></a><10>lower</h4><p>转换 mystr 中所有大写字符为小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.lower()  </span></span><br><span class="line">str1 = <span class="string">&quot;HEllo world ITcast&quot;</span></span><br><span class="line">new_str = str1.lower()</span><br></pre></td></tr></table></figure><h4 id="upper"><a href="#upper" class="headerlink" title="upper()"></a><11>upper()</h4><p>转换 mystr 中的小写字母为大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.upper()  </span></span><br><span class="line">str1 = <span class="string">&quot;HEllo world ITcast&quot;</span></span><br><span class="line">str1.upper()</span><br></pre></td></tr></table></figure><h4 id="ljust"><a href="#ljust" class="headerlink" title="ljust"></a><12>ljust</h4><p>返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.ljust(width)</span></span><br><span class="line">str1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str1.ljust(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h4 id="rjust"><a href="#rjust" class="headerlink" title="rjust"></a><13>rjust</h4><p>返回一个原字符串右对齐，并使用空格填充至长度width的新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.rjust(width)</span></span><br><span class="line">mystr = <span class="string">&quot;hello&quot;</span></span><br><span class="line">mystr.rjust(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="center"><a href="#center" class="headerlink" title="center"></a><14>center</h4><p>返回一个原字符串居中。并使用空格填充至长度width的新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.center(width)</span></span><br><span class="line">mystr = <span class="string">&quot;hello world itcast and itcast&quot;</span></span><br><span class="line">mystr.center(<span class="number">50</span>)</span><br></pre></td></tr></table></figure><h4 id="lstrip"><a href="#lstrip" class="headerlink" title="lstrip"></a><15>lstrip</h4><p>删除mystr左边的空白字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = &quot;   hello world&quot;</span><br><span class="line">mystr.lstrip()</span><br></pre></td></tr></table></figure><h4 id="rstrip"><a href="#rstrip" class="headerlink" title="rstrip"></a><16>rstrip</h4><p>删除mystr字符串末尾的空白字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = &quot;   hello world  &quot;</span><br><span class="line">mystr.rstrip()</span><br></pre></td></tr></table></figure><h4 id="strip"><a href="#strip" class="headerlink" title="strip"></a><17>strip</h4><p>删除mystr字符串两端的空白字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;\n\t itcast \t\n&quot;</span><br><span class="line">a.strip()</span><br><span class="line"># &#x27;itcast&#x27;</span><br></pre></td></tr></table></figure><h4 id="rfind"><a href="#rfind" class="headerlink" title="rfind"></a><18>rfind</h4><p>类似于find()函数， 不过是从右边开始查找字符</p><p><code>mystr.rfind(str, start=0, end=len(mystr) )</code></p><h4 id="rindex"><a href="#rindex" class="headerlink" title="rindex"></a><19>rindex</h4><p>类似于index(),  不过是从右边开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rindex( str, start=0, end=len(mystr))</span><br></pre></td></tr></table></figure><h4 id="partition"><a href="#partition" class="headerlink" title="partition"></a><20>partition</h4><p>把mystr以str分割成三部分， str前，str和str后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.partition(str)</span></span><br><span class="line">mystr = <span class="string">&quot;helloitcastworld&quot;</span></span><br><span class="line">new_str = mystr.partition(<span class="string">&#x27;itca&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_str)</span><br></pre></td></tr></table></figure><h4 id="rpartition"><a href="#rpartition" class="headerlink" title="rpartition"></a><21>rpartition</h4><p>类似于partition()函数，不过是从右边开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = &quot;helloitcastworld&quot;</span><br><span class="line">mystr.rpartition(&quot;t&quot;)</span><br></pre></td></tr></table></figure><h4 id="splitlines"><a href="#splitlines" class="headerlink" title="splitlines"></a><22>splitlines</h4><p>按照行分隔，返回一个包含各行作为元素的列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = &quot;helloitcast\nworld&quot;</span><br><span class="line">mystr.splitlines()</span><br></pre></td></tr></table></figure><h4 id="isalpha"><a href="#isalpha" class="headerlink" title="isalpha"></a><23>isalpha</h4><p>如果mystr 所有字符都是字母则返回True，否则返回False</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mystr = &#x27;abc&#x27;</span><br><span class="line">mystr.isalpha() # True</span><br><span class="line">mystr = &#x27;123&#x27;</span><br><span class="line">mystr.isalpha() # False</span><br></pre></td></tr></table></figure><h4 id="isdigit"><a href="#isdigit" class="headerlink" title="isdigit"></a><24>isdigit</h4><p>如果mystr只包含数字 则返回True  否则返回False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.isdigit()</span><br></pre></td></tr></table></figure><h4 id="isalnum"><a href="#isalnum" class="headerlink" title="isalnum"></a><25>isalnum</h4><p>如果mystr所有字符都是字母或者数字则返回True 否则返回False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;123&#x27;</span> <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">&#x27;abc&#x27;</span> <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">&#x27;abc123&#x27;</span> <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">&#x27;abc 123&#x27;</span> <span class="comment"># False</span></span><br><span class="line">mystr.isalnum() </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="isspace"><a href="#isspace" class="headerlink" title="isspace"></a><26>isspace</h4><p>如果mystr中只包含空格 则返回True  否则返回False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;  &#x27;</span></span><br><span class="line">mystr.isspace() <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join"></a><27>join</h4><p>mystr中每一个元素后面插入str  构造出一个新的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;12345&quot;</span></span><br><span class="line"><span class="built_in">str</span>.join(<span class="string">&quot;haha&quot;</span>)  <span class="comment"># h12345a12345h12345a</span></span><br><span class="line">str2 = <span class="string">&quot;-&quot;</span></span><br><span class="line">li = [<span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>]</span><br><span class="line"><span class="built_in">str</span>.join(li) <span class="comment"># my-name-is-tom</span></span><br></pre></td></tr></table></figure><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定一个字符串aStr，返回使用空格或者&#x27;\t&#x27;分割后的倒数第二个子串</span></span><br><span class="line">testStr = <span class="string">&#x27;haha nihao a \t heihei \t wpshi nide \t hao \npengyou&#x27;</span></span><br><span class="line">lists = testStr.split()</span><br><span class="line">chioce = lists[<span class="built_in">len</span>(lists)-<span class="number">2</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第3节-列表元素及字典</title>
      <link href="/blog/python%E6%95%99%E7%A8%8B/03.%E5%85%83%E7%BB%84%E4%BB%A5%E5%8F%8A%E5%AD%97%E5%85%B8/"/>
      <url>/blog/python%E6%95%99%E7%A8%8B/03.%E5%85%83%E7%BB%84%E4%BB%A5%E5%8F%8A%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="1-列表的基本格式"><a href="#1-列表的基本格式" class="headerlink" title="1.列表的基本格式"></a>1.列表的基本格式</h4><ul><li>list是python中使用最频繁的数据类型</li><li>专门用来存储一串数据，存储的数据称之为元素</li><li>通常放相同类型 可以放不同类型</li><li>列表的索引（下表）从0开始的 正整数 有序的 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [元素1， 元素2, 元素3, 元素4, 元素5]</span></span><br><span class="line">lists = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(lists))  <span class="comment"># list列表</span></span><br><span class="line">list1 = [<span class="string">&quot;功夫&quot;</span>, <span class="string">&quot;老狗&quot;</span>, <span class="string">&quot;冰冰&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># list 列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引下标 从0开始</span></span><br></pre></td></tr></table></figure><h4 id="2-获取列表中的某个元素"><a href="#2-获取列表中的某个元素" class="headerlink" title="2.获取列表中的某个元素"></a>2.获取列表中的某个元素</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lists = [3, 4, 5, 6, 7, 8]</span><br><span class="line"># 列表[下标] 查询列表中的元素</span><br><span class="line">print(lists[0])</span><br><span class="line">print(lists[2])</span><br><span class="line"># 取值的时候，如果超出索引的范围， 程序就会报错</span><br></pre></td></tr></table></figure><h4 id="3-列表的常见操作"><a href="#3-列表的常见操作" class="headerlink" title="3.列表的常见操作"></a>3.列表的常见操作</h4><ol><li><p>增加 列表.<strong>append(数据)</strong>  在末尾追尾数据，并且每次只能添加一个</p><p>​         列表.<strong>extend([4, 5, 6, 7, 8])</strong> 添加多个元素 可以迭代</p><p>​         列表.<strong>insert(索引， 数据)</strong>  在指定位置插入数据 </p></li><li><p>删除  <strong>del列表[索引]</strong>   删除指定索引的数据</p><pre><code>     **列表.remove(数据)**  删除第一个出现的指定数据 **列表.pop()**  删除列表中的最后一个元素  有返回值  删除的元素 **列表.pop(索引)** 删除指定索引数据 **列表.clear()** 清空列表</code></pre></li><li><p>修改  <strong>列表[索引] = 数据</strong>    修改指定索引的数据  如果数据不存在 就报错</p></li><li><p>查询  <strong>列表.index(x)</strong>: 返回列表中值的索引， 若不存在则出错</p><pre><code>  **列表.count(x)**:  返回x在列表中出现的次数  **len(列表)**  列表的长度  **if 数据 in 列表** 检查列表中是否包含某元素</code></pre></li><li><p>排序  <strong>列表.sort()</strong>   升序排列</p><pre><code>  **列表.sort(reverse=True)** 降序排列</code></pre></li><li><p>反转   <strong>list.reverse()</strong>: 将列表中元素的顺序反转  </p></li><li><p>复制   <strong>list.copy()</strong>  返回列表的浅复制  等价于 a[:]</p></li></ol><h4 id="4-使用for循环遍历列表"><a href="#4-使用for循环遍历列表" class="headerlink" title="4. 使用for循环遍历列表"></a>4. 使用for循环遍历列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lists = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment"># 可以把列表中的元素都遍历出来</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lists:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h4 id="5-列表的嵌套"><a href="#5-列表的嵌套" class="headerlink" title="5.列表的嵌套"></a>5.列表的嵌套</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">city = [</span><br><span class="line">  [<span class="string">&quot;昌平区&quot;</span>, <span class="string">&quot;海淀区&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;浦东区&quot;</span>, <span class="string">&quot;金山区&quot;</span>, <span class="string">&quot;宝安区&quot;</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例： 一个学校 有三个办公室 现在有8位老师等待工位的分配</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">offices = [[], [], []]</span><br><span class="line">teachers = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> names <span class="keyword">in</span> teacher:</span><br><span class="line">    index = random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    offices[index].append(names)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> bgs <span class="keyword">in</span> offices:</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d办公室里面有%d&#x27;</span>%(count,<span class="built_in">len</span>(bgs)))</span><br></pre></td></tr></table></figure><h2 id="三-元组"><a href="#三-元组" class="headerlink" title="三. 元组"></a>三. 元组</h2><h4 id="1-元组的基本格式"><a href="#1-元组的基本格式" class="headerlink" title="1.元组的基本格式"></a>1.元组的基本格式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (元素， 元素， 元素)</span></span><br><span class="line"><span class="comment"># 定义一个元组</span></span><br><span class="line"><span class="built_in">tuple</span> = (<span class="number">12</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[<span class="number">0</span>]) <span class="comment"># 取出元组中的值</span></span><br><span class="line"><span class="built_in">tuple</span>[<span class="number">0</span>] = <span class="number">50</span> </span><br><span class="line"><span class="comment"># 注意: 元组中只有一个值的时候 需要在元素后面添加逗号</span></span><br></pre></td></tr></table></figure><h4 id="2-元组和列表的区别"><a href="#2-元组和列表的区别" class="headerlink" title="2.元组和列表的区别"></a>2.元组和列表的区别</h4><blockquote><p>元组不能修改里面的数据</p></blockquote><h4 id="3-遍历元组"><a href="#3-遍历元组" class="headerlink" title="3.遍历元组"></a>3.遍历元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tuples = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tuples:</span><br><span class="line"><span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;和是%d&#x27;</span>%<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h4 id="4-判断元组中是否存在某一个元素"><a href="#4-判断元组中是否存在某一个元素" class="headerlink" title="4.判断元组中是否存在某一个元素"></a>4.判断元组中是否存在某一个元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个元组</span></span><br><span class="line">yz = (<span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># if ... in 语句</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">55</span> <span class="keyword">in</span> yz:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;存在&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不存在&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="5-元组的操作"><a href="#5-元组的操作" class="headerlink" title="5 元组的操作"></a>5 元组的操作</h4><blockquote><p>与列表操作类似</p></blockquote><h4 id="6-元组的拆包"><a href="#6-元组的拆包" class="headerlink" title="6.元组的拆包"></a>6.元组的拆包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a,b,c,d = <span class="built_in">tuple</span>  </span><br><span class="line"><span class="built_in">print</span>(a,b,c,d)</span><br></pre></td></tr></table></figure><h4 id="7-元组的应用场景"><a href="#7-元组的应用场景" class="headerlink" title="7. 元组的应用场景"></a>7. 元组的应用场景</h4><blockquote><p>格式化字符串 后面的（）本质上就是一个元组</p></blockquote><hr><h3 id="关于列表和元组的补充"><a href="#关于列表和元组的补充" class="headerlink" title="关于列表和元组的补充"></a>关于列表和元组的补充</h3><h5 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h5><blockquote><p>也称为列表推导式 或列表内涵 是python强有力的语法之一</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建平方数的方法</span></span><br><span class="line">square = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">square.append(x ** <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(square)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用列表解析</span></span><br><span class="line">square = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [&lt;表达式&gt; for x1 in &lt;序列1&gt; [...for xN in &lt;序列2&gt; if &lt;条件表达式&gt;]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习 取pi值 除去2 和4位小数保留 在1--5之间</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line">result = [<span class="built_in">round</span>(pi, n) <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> n %<span class="number">2</span> != <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="利用列表解析生成九九乘法表"><a href="#利用列表解析生成九九乘法表" class="headerlink" title="利用列表解析生成九九乘法表"></a>利用列表解析生成九九乘法表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = [(x, y, x*y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x &gt;= y]</span><br></pre></td></tr></table></figure><hr><h2 id="四-字典"><a href="#四-字典" class="headerlink" title="四. 字典"></a>四. 字典</h2><p>字典的定义格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;key:value, key:value&#125;</span><br><span class="line"><span class="comment"># 字典使用键值对存储数据  键值对 分为键名key 和 键值 value</span></span><br><span class="line"><span class="comment"># 值可以是任何类型  键名只能是字符串  数字  元组</span></span><br></pre></td></tr></table></figure><p>字典和列表的区别</p><blockquote><p>列表是有序集合  下标是从0开始的正整数</p><p>字典是无序集合  通过键名来访问数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 可以通过字典dict的构造器来创建字典 此时参数是列表或者元组</span></span><br><span class="line"><span class="built_in">dict</span>([(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tom&quot;</span>),(<span class="string">&quot;age&quot;</span>,<span class="number">33</span>),(<span class="string">&quot;job&quot;</span>,<span class="string">&quot;programmer&quot;</span>)])</span><br><span class="line"><span class="comment"># 2. 也可以通过关键字形式创建列表</span></span><br><span class="line"><span class="built_in">dict</span>(name = <span class="string">&quot;allen&quot;</span>, age = <span class="string">&#x27;40&#x27;</span>) <span class="comment"># 但键只能是字符串 且不用加引号</span></span><br></pre></td></tr></table></figure><p>访问字典中的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dicts[key] = value</span></span><br><span class="line">dict1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">23</span>, <span class="string">&quot;job&quot;</span>: <span class="string">&quot;programmer&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">&quot;age&quot;</span>] = <span class="number">45</span></span><br><span class="line"><span class="comment"># 判断是否某数据存在于此字典中 用if in 或者 in语句</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;job&quot;</span> <span class="keyword">in</span> dict1:</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">    <span class="comment">#...</span></span><br></pre></td></tr></table></figure><p>介绍一些字典中的几个常规操作方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.删除方法</span><br><span class="line"># 字典.pop(键名)  删除指定的键值对  返回被删除的值</span><br><span class="line"># 字典.clear() 清空字典</span><br><span class="line"># 字典没有remove方法</span><br><span class="line">2.修改方法</span><br><span class="line">字典[键] = 数据</span><br><span class="line">3.查询</span><br><span class="line">字典[键]</span><br><span class="line">字典.keys()</span><br><span class="line">字典.values()</span><br><span class="line">字典.items()</span><br><span class="line">4.拷贝方法</span><br><span class="line">字典.copy()</span><br><span class="line">5.len() 测量字典中 键值对的个数</span><br></pre></td></tr></table></figure><h3 id="扩展-集合"><a href="#扩展-集合" class="headerlink" title="扩展-集合"></a>扩展-集合</h3><blockquote><p>定义： 集合是无序的 里面的元素是唯一的 集合一般用于列表或者元组中的元素去重</p></blockquote><h5 id="定义一个空集合"><a href="#定义一个空集合" class="headerlink" title="定义一个空集合"></a>定义一个空集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><h5 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">set1.add(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># update</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">set1.update(<span class="string">&#x27;abcd&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># remove</span></span><br><span class="line">set1 = &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"><span class="comment"># 使用remove删除集合中的元素 如果有则直接删除 如果没有则程序报错</span></span><br><span class="line">set1.remove(<span class="number">22</span>)</span><br><span class="line"><span class="comment"># pop</span></span><br><span class="line">set1.pop() <span class="comment"># 随机删除集合中的元素 如果集合中没有元素 则程序报错</span></span><br><span class="line"><span class="comment"># discard</span></span><br><span class="line">set1.discard(<span class="number">5</span>) <span class="comment"># 删除指定元素 如果元素不存在 则不会报错</span></span><br></pre></td></tr></table></figure><h4 id="交集与并集-amp-and"><a href="#交集与并集-amp-and" class="headerlink" title="交集与并集(&amp; and |)"></a>交集与并集(&amp; and |)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">new_set = set1 &amp; set2</span><br><span class="line"><span class="built_in">print</span>(new_set)</span><br><span class="line"><span class="comment"># &#123;3, 4&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">new_set = set1 | set2</span><br><span class="line"><span class="built_in">print</span>(new_set)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure><hr><h4 id="python中使用set对列表进行去重的练习"><a href="#python中使用set对列表进行去重的练习" class="headerlink" title="python中使用set对列表进行去重的练习"></a>python中使用set对列表进行去重的练习</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原始方法，但是会打乱顺序</span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">myset = <span class="built_in">set</span>(mylist) <span class="comment">#myset是另外一个列表，里面的内容是mylist里面的无重复 项</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收件人去重，并保持原来的收件人顺序</span></span><br><span class="line"></span><br><span class="line">mailto = [<span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bbbb&#x27;</span>, <span class="string">&#x27;afa&#x27;</span>, <span class="string">&#x27;sss&#x27;</span>, <span class="string">&#x27;bbbb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;shafa&#x27;</span>]</span><br><span class="line"></span><br><span class="line">addr_to = <span class="built_in">list</span>(<span class="built_in">set</span>(mailto))</span><br><span class="line"></span><br><span class="line">addr_to.sort(key = mailto.index)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="python中的内置函数"><a href="#python中的内置函数" class="headerlink" title="python中的内置函数"></a>python中的内置函数</h3><div class="table-container"><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>len(item)</td><td>计算容器中元素个数</td></tr><tr><td>2</td><td>max(item)</td><td>返回容器中元素最大值</td></tr><tr><td>3</td><td>min(item)</td><td>返回容器中元素最小值</td></tr><tr><td>4</td><td>del(item)</td><td>删除变量</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第2节-运算符以及流程控制语句</title>
      <link href="/blog/python%E6%95%99%E7%A8%8B/02.%E7%AC%A6%E4%BB%A5%E5%8F%8A%E6%B5%81%E7%A8%8B%E8%AF%AD%E5%8F%A5/"/>
      <url>/blog/python%E6%95%99%E7%A8%8B/02.%E7%AC%A6%E4%BB%A5%E5%8F%8A%E6%B5%81%E7%A8%8B%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="Input函数的使用"><a href="#Input函数的使用" class="headerlink" title="Input函数的使用"></a>Input函数的使用</h5><blockquote><p>在python中可以使用input函数来从键盘等待用户输入 注意从中获取的任何数据都是字符串类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习：</span></span><br><span class="line"><span class="comment"># 输入，姓名names  年龄age  地址address   邮箱email </span></span><br><span class="line">names = <span class="built_in">input</span>(<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">address = <span class="built_in">input</span>(<span class="string">&quot;地址&quot;</span>)</span><br><span class="line">e_mail = <span class="built_in">input</span>(<span class="string">&quot;邮箱&quot;</span>)</span><br><span class="line"><span class="comment"># 输出  姓名是XXX   年龄是XXX  地址XXX  邮箱XXX</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名是%s 年龄是%d 地址%s 邮箱是%s&quot;</span> % (names, age, address, e_mail))</span><br></pre></td></tr></table></figure><h5 id="变量的类型转换"><a href="#变量的类型转换" class="headerlink" title="变量的类型转换"></a>变量的类型转换</h5><ul><li>int() 转整型</li><li>float() 转浮点型</li><li>str() 转换为字符串</li><li>list() 转换为列表 接收一个元组 并返回一个列表</li><li>tuple()转换为元组 接收一个列表 返回一个包含相同元素的元组</li></ul><h5 id="其他的运算符"><a href="#其他的运算符" class="headerlink" title="其他的运算符"></a>其他的运算符</h5><p>比较运算符</p><blockquote><p>返回的结果只有True False  是布尔型 bool</p></blockquote><div class="table-container"><table><thead><tr><th>运算符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>==</td><td style="text-align:center">相等</td></tr><tr><td>!=</td><td style="text-align:center">不想等</td></tr><tr><td>&gt;</td><td style="text-align:center">大于</td></tr><tr><td>&lt;</td><td style="text-align:center">小于</td></tr><tr><td>&gt;=</td><td style="text-align:center">大于或者等于</td></tr><tr><td>&lt;=</td><td style="text-align:center">小于或者等于</td></tr></tbody></table></div><p>逻辑运算符</p><p><code>and   or   not</code></p><blockquote><p>扩展</p></blockquote><p><strong><em>优先级： 运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 赋值运算符</em></strong></p><hr><p>补充的扩展<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">下面的值在作为布尔表达式时，会被解释器看作False：</span><br><span class="line">    1、None；</span><br><span class="line">    2、False；</span><br><span class="line">    3、任何为0的数字类型，如：0，0.0，0j；</span><br><span class="line">    4、任何空序列，如：&#x27;&#x27;，()，[]；</span><br><span class="line">    5、任何空字典，例如：&#123;&#125;;</span><br><span class="line">    6、用户定义的类实例，如果类定义了__bool__()或者__len__()方法，并且该方法返回0或者布尔值False。</span><br><span class="line">其它所有值被解释器看作True。</span><br><span class="line">可以用bool来转换其它值为布尔值：</span><br><span class="line">&gt;&gt;&gt; bool(&#x27;&#x27;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(&#x27;this is a test&#x27;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(42)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(0)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></p><hr><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h4 id="if语句的基本格式"><a href="#if语句的基本格式" class="headerlink" title="if语句的基本格式"></a>if语句的基本格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if 要判断的条件:</span><br><span class="line">条件成立，执行该代码段</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习</span></span><br><span class="line"><span class="comment"># 输入你的年龄  判断 如果大于 18 允许处对象</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入年龄:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你可以出对象了&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="if…else语句的格式："><a href="#if…else语句的格式：" class="headerlink" title="if…else语句的格式："></a>if…else语句的格式：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    满足条件执行该代码段<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    不满足条件执行该代码段<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="if……elif……else编程判断语句（多分支）"><a href="#if……elif……else编程判断语句（多分支）" class="headerlink" title="if……elif……else编程判断语句（多分支）"></a>if……elif……else编程判断语句（多分支）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    如果判断条件<span class="number">1</span>满足，执行代码段<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">    如果判断条件<span class="number">2</span> 满足，执行代码段<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">    如果判断条件<span class="number">3</span>满足， 则执行代码段<span class="number">3</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    上面的条件都不满足执行该语句</span><br></pre></td></tr></table></figure><h4 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    满足条件<span class="number">1</span>执行该语句</span><br><span class="line">    <span class="keyword">if</span> 判断条件<span class="number">2</span></span><br><span class="line">    条件<span class="number">2</span>满足 执行该代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    不满足条件<span class="number">1</span>执行该代码</span><br></pre></td></tr></table></figure><h4 id="获取一个随机数"><a href="#获取一个随机数" class="headerlink" title="获取一个随机数"></a>获取一个随机数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块导入</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.randint(<span class="number">0</span>, <span class="number">10</span>) <span class="comment"># 0 到 10 之间的随机数 int</span></span><br></pre></td></tr></table></figure><h4 id="案例：猜拳游戏"><a href="#案例：猜拳游戏" class="headerlink" title="案例：猜拳游戏"></a>案例：猜拳游戏</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">ranNum = random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">player = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入剪刀（0） 石头（1） 布（2）&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> ranNum == <span class="number">0</span> <span class="keyword">and</span> player == <span class="number">1</span> <span class="keyword">or</span> ranNum == <span class="number">1</span> <span class="keyword">and</span> player == <span class="number">2</span> <span class="keyword">or</span> ranNum == <span class="number">2</span> <span class="keyword">and</span> player == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;player win&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> player == ranNum:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;draw&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;computer win&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while循环的基本格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 变量的初始化</span><br><span class="line">while 条件2：</span><br><span class="line">条件满足时候： 执行该代码</span><br><span class="line">条件满足时候：执行该代码</span><br><span class="line">3 代码的更新</span><br></pre></td></tr></table></figure><p>while循环的应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 案例1 ： while循环输出1-100所有的数</span><br><span class="line"></span><br><span class="line"># 案例2:  while循环输出1-100累加和</span><br><span class="line"></span><br><span class="line"># 案例3：能够用循环实现1~100之间偶数的累积和（包含1和100）</span><br></pre></td></tr></table></figure><p>while循环嵌套的基本格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while 条件1:</span><br><span class="line">条件1 满足时 执行该代码</span><br><span class="line">条件1 满足时 执行该代码</span><br><span class="line">while 条件2:</span><br><span class="line">条件2满足时 执行该代码</span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h5><p><img src="/media/images/pic/dd.png" alt="dd"></p><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while打印三角形</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= i:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;⭐️&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"> <span class="comment"># 打印九九乘法表</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= i:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d*%d=%-2d &quot;</span>%(j, i, i*j), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 数据</span><br><span class="line">代码</span><br></pre></td></tr></table></figure><h5 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h5><p>range(start, stop) 函数可创建一个整数int列表 一般用在for循环中</p><ul><li>start 开始 默认为0  比如 range(5) 等价 range(0,5)</li><li>stop 结束 但不包括stop  例如 range(0,5) 是[0,1,2,3,4]</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="break和continue的区别"><a href="#break和continue的区别" class="headerlink" title="break和continue的区别"></a>break和continue的区别</h4><blockquote><p>break 推出整个循环  continue推出当前循环  它们只能退出一层循环</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第1节-简介起步</title>
      <link href="/blog/python%E6%95%99%E7%A8%8B/01.python%E7%AE%80%E6%B4%81%E4%BB%A5%E5%8F%8A%E8%B5%B7%E6%AD%A5/"/>
      <url>/blog/python%E6%95%99%E7%A8%8B/01.python%E7%AE%80%E6%B4%81%E4%BB%A5%E5%8F%8A%E8%B5%B7%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Python课程总体梳理"><a href="#Python课程总体梳理" class="headerlink" title="Python课程总体梳理"></a>Python课程总体梳理</h2><h4 id="课程前期计算机知识介绍："><a href="#课程前期计算机知识介绍：" class="headerlink" title="课程前期计算机知识介绍："></a>课程前期计算机知识介绍：</h4><p>​    <strong>1.计算机：</strong></p><p>​            现代用于高速计算的电子机器 可以进行数值计算 逻辑判断 还有记忆存储功能 且能够按照程序的运行 自动高速处理数据</p><p>​      如图所示：        </p><p><img src="/media/images/pic/computer.png" alt="computer"></p><p><strong>2. 操作系统的作用：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 给用户间接操作硬件的方式,：图形窗口方式、终端命令方式。</span><br><span class="line">2. 给开发者提供的间接操作硬件的方式：系统调用 </span><br><span class="line">3. 简单的说 管理好硬件设备 为用户和开发者 提供一个简单的接口 方便使用</span><br></pre></td></tr></table></figure><br>如图所示：</p><p><img src="/media/images/pic/图片 1.png" alt="computer"></p><p><strong>3 驱动程序</strong></p><p>​        作用：驱动程序提供了硬件到操作系统的一个接口以及协调二者之间的关系. 扮演者硬件和操作系统之间的一个桥梁的作用</p><p><strong>4 程序执行流程</strong></p><p>​    游戏打开==》 加载到内存中==〉cpu解释执行指令===》显卡驱动（数字信号转化为模拟信号）==〉显卡工作==》显示器显示</p><hr><p><strong>二. 编程语言和解释器</strong></p><p>编程语言：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.形式是符号和文字的组合</span><br><span class="line"></span><br><span class="line">2.目的是为了控制计算机硬件</span><br><span class="line"></span><br><span class="line">3.python是解释型语言，需要解释器将编码进行解释成对应的机器码 从而实现对计算机的指令控制，目前最主流的是c语言开发的cpython解释器</span><br><span class="line"></span><br><span class="line">4.python的作者是龟叔  1991年正式诞生</span><br><span class="line"></span><br><span class="line">5.python目前有两个版本 2.7.15和3.6.5  python2 截止到2020年停止更新</span><br></pre></td></tr></table></figure><br>python语言的特点：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.易学</span><br><span class="line">2.开源</span><br><span class="line">3.可移植性</span><br><span class="line">4.丰富的库文件</span><br></pre></td></tr></table></figure><br>python的应用领域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. web应用开发</span><br><span class="line">2. 网络爬虫</span><br><span class="line">3. 桌面软件</span><br><span class="line">4. 操作系统管理</span><br><span class="line">5. Google NASA  Facebook等</span><br></pre></td></tr></table></figure><hr><h2 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h2><h4 id="python开发环境的搭建"><a href="#python开发环境的搭建" class="headerlink" title="python开发环境的搭建"></a>python开发环境的搭建</h4><blockquote><p>python开发需要两个准备： 1 python开发程序 2 python运行程序</p></blockquote><h5 id="window下的环境搭建"><a href="#window下的环境搭建" class="headerlink" title="window下的环境搭建"></a>window下的环境搭建</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 打开python.org官网 下载对应的python版本</span><br><span class="line">2. 安装完毕之后配置环境变量： 在电脑高级设置 环境变量中path 加入python安装路径</span><br></pre></td></tr></table></figure><h5 id="Mac-下的环境安装"><a href="#Mac-下的环境安装" class="headerlink" title="Mac 下的环境安装"></a>Mac 下的环境安装</h5><p><code>Mac下自动即成python 2.7的解释器,如果想安装3.5则下载对应的软件安装即可</code></p><p><em>Python 的几种开发方案：</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. python解释器 + 普通文本编辑器</span><br><span class="line">   1. notepad++ </span><br><span class="line">   2. sublime</span><br><span class="line">   3. editplus</span><br><span class="line">2. python解释器 + 交互式终端</span><br><span class="line">3. python解释器 + IDE工具（pycharm推荐）</span><br></pre></td></tr></table></figure><h5 id="bug的几种常见错误"><a href="#bug的几种常见错误" class="headerlink" title="bug的几种常见错误"></a>bug的几种常见错误</h5><ul><li>单词错误</li><li>缩进错误</li></ul><h5 id="注释的作用以及类型"><a href="#注释的作用以及类型" class="headerlink" title="注释的作用以及类型"></a>注释的作用以及类型</h5><blockquote><p>作用：在程序中对代码进行标注和说明，增强程序的可读性</p><p>类型：单行注释 #  多行注释 ```   ```   注释# 后面留一个空格再添加相应的注释</p><p><strong><em>Python 官方提供有一系列 PEP（Python Enhancement Proposals） 文档</em></strong></p><p><strong><em>其中第 8 篇文档专门针对Python 的代码格式 给出了建议，也就是俗称的 PEP 8</em></strong></p></blockquote><p><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/">谷歌对应的中文文档</a></p><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>变量是在内存中用来临时存储数据的标识符</p></blockquote><h5 id="变量的定义："><a href="#变量的定义：" class="headerlink" title="变量的定义："></a>变量的定义：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = <span class="string">&quot;张三&quot;</span></span><br><span class="line">age = <span class="number">24</span></span><br><span class="line"><span class="comment"># 注意变量声明不需要关键字</span></span><br></pre></td></tr></table></figure><h5 id="标识符的规则"><a href="#标识符的规则" class="headerlink" title="标识符的规则"></a>标识符的规则</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.标识符由字母数字和下划线来组成 且不能以数字开头</span><br><span class="line">2.python中的标识符是区分大小写的</span><br><span class="line">3.变量名要遵循驼峰命名法 要见名知意  或者 单词用下划线连接</span><br><span class="line">4.不能和关键字和已有的名字冲突</span><br></pre></td></tr></table></figure><h5 id="python程序中的关键字"><a href="#python程序中的关键字" class="headerlink" title="python程序中的关键字"></a>python程序中的关键字</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">keyword.kwlist</span><br><span class="line"><span class="comment"># 通过以上命令来查看</span></span><br></pre></td></tr></table></figure><p><img src="/media/images/pic/dos.png" alt="computer"></p><h5 id="python中的六种标准数据类型"><a href="#python中的六种标准数据类型" class="headerlink" title="python中的六种标准数据类型"></a>python中的六种标准数据类型</h5><ul><li>Number（数字 数字中包含 整型int  浮点型float  复数complex  布尔 bool）</li><li>String （字符串）</li><li>List （列表）</li><li>Tuple（元组）</li><li>Set （集合）</li><li>Dictionary （字典）</li></ul><blockquote><p>其中 不可变的数据类型 Number String Tuple  可变的是List Set  Dict</p></blockquote><h5 id="python中判断变量的数据类型"><a href="#python中判断变量的数据类型" class="headerlink" title="python中判断变量的数据类型"></a>python中判断变量的数据类型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通常使用 type()来判断</span></span><br><span class="line">a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="literal">True</span>, <span class="number">4</span>+<span class="number">3j</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a), <span class="built_in">type</span>(b), <span class="built_in">type</span>(c), <span class="built_in">type</span>(d))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">float</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">bool</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">complex</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 还可以用<span class="title">isinstance</span>判断</span></span><br><span class="line"><span class="class"><span class="title">a</span> = 111</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params"><span class="built_in">isinstance</span>(<span class="params">a, <span class="built_in">int</span></span>)</span>) # <span class="title">True</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 二者区别在于 <span class="title">isinstance</span> 认为子类是一种父类类型 而 <span class="title">type</span>认为子类不是一种父类类型</span></span><br></pre></td></tr></table></figure><h5 id="不同类型之间的运算规则"><a href="#不同类型之间的运算规则" class="headerlink" title="不同类型之间的运算规则"></a>不同类型之间的运算规则</h5><p>算术运算符</p><div class="table-container"><table><thead><tr><th><strong>运算符<em>**</em></strong></th><th><strong>描述<em>**</em></strong></th><th><strong>实例<em>**</em></strong></th></tr></thead><tbody><tr><td>+</td><td>加</td><td>a + b</td></tr><tr><td>-</td><td>减</td><td>a - b</td></tr><tr><td>*</td><td>乘</td><td>a * b</td></tr><tr><td>/</td><td>除</td><td>a / b</td></tr><tr><td>//</td><td>取整除</td><td>返回除法的整数部分（商） 9 // 2 输出结果 4</td></tr><tr><td>%</td><td>取余数</td><td>返回除法的余数 9 % 2 = 1</td></tr><tr><td>**</td><td>幂</td><td>又称次方、乘方，2 ** 3 = 8</td></tr></tbody></table></div><p>复合赋值运算符</p><div class="table-container"><table><thead><tr><th><strong>运算符<em>**</em></strong></th><th><strong>描述<em>**</em></strong></th><th><strong>实例<em>**</em></strong></th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c = a  + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c +=  a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -=  a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c <em>=  a <strong>等效于</strong> c = c </em>a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /=  a 等效于 c = c / a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c //=  a 等效于 c = c // a</td></tr><tr><td>%=</td><td>取 <strong>模</strong> (余数)赋值运算符</td><td>c %=  a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c <strong>=  a 等效于 c = c </strong> a</td></tr></tbody></table></div><blockquote><p>注意：1. 数字之间可以进行任何运算 2. 数字和字符串之间可以进行乘法运算 3. 字符串之间可以进行加法运算</p></blockquote><h5 id="计算机中的输入和输出"><a href="#计算机中的输入和输出" class="headerlink" title="计算机中的输入和输出"></a>计算机中的输入和输出</h5><ol><li>标准输入和输出</li><li>文件输入和输出</li><li>网络输入和输出</li><li>python编程中将计算机复杂的输入和输出封装起来 形成简单的方法来供开发者调用 input ，print</li></ol><hr><h2 id="print函数的使用"><a href="#print函数的使用" class="headerlink" title="print函数的使用"></a>print函数的使用</h2><p>1.普通输出变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_num = <span class="number">100</span></span><br><span class="line">my_str = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(my_num, my_str)</span><br></pre></td></tr></table></figure><p>2.格式化输出变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 先定义输出格式</span></span><br><span class="line"><span class="comment"># 2 在格式中填充数据</span></span><br><span class="line"><span class="comment"># 练习</span></span><br><span class="line"><span class="comment"># 1. 定义字符串变量 name，输出 我的名字叫 小明，请多多关照！</span></span><br><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字叫%s&quot;</span> % name)</span><br><span class="line"><span class="comment"># 2. 定义整数变量 student_no，输出我的学号是 000001</span></span><br><span class="line">student_no = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的学号是%06d&quot;</span> %student_no)</span><br><span class="line"><span class="comment"># 3. 定义小数 price、weight、money，输出苹果单价 9.00 元／斤，购买了 5.00 斤，需要支付 45.00 元</span></span><br><span class="line">price, weight= <span class="number">9.00</span>, <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line">money = price * weight</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;苹果单价%.2f元/斤，购买了%.2f斤,需要支付%.2f元&quot;</span> %(price, weight, money))</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>常用格式化字符<em>**</em></strong></th><th><strong>含义<em>**</em></strong></th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全</td></tr><tr><td>%f</td><td>浮点数，%.2f 表示小数点后只显示两位</td></tr><tr><td>%%</td><td>输出 %</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>格式符号</th><th>转换</th></tr></thead><tbody><tr><td>%c</td><td>字符</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>有符号十进制整数</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%x</td><td>十六进制整数（小写字母0x）</td></tr><tr><td>%X</td><td>十六进制整数（大写字母0X）</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%e</td><td>科学计数法（小写’e’）</td></tr><tr><td>%E</td><td>科学计数法（大写“E”）</td></tr><tr><td>%g</td><td>％f和％e 的简写</td></tr><tr><td>%G</td><td>％f和％E的简写</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
